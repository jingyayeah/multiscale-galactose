#!/usr/bin/python
'''
This module generates the simulation definitions in the database.
The parameters for the individual simulations are generated by sampling
from the provided parameter distributions for the models.
     
@author: Matthias Koenig
@date: 2014-03-14
'''

import os

import logging
import numpy as np
from subprocess import call

from sim.models import *
from simulation.distribution.Distributions import getGalactoseDistributions, getDemoDistributions
from simulation.distribution.RandomSampling import createParametersBySampling


def createDemoSamples(N, sampling):
    dist_data = getDemoDistributions()
    return createParametersBySampling(dist_data, N, sampling);

def createGalactoseSamples(N, sampling):
    dist_data = getGalactoseDistributions()
    samples = createParametersBySampling(dist_data, N, sampling);
    samples = adaptFlowInSamples(samples)
    samples = setDeficiencyInSamples(samples, deficiency=0)
    return samples

def setDeficiencyInSamples(samples, deficiency=0):
    return setParameterInSamples(samples, 'deficiency', deficiency, '-', GLOBAL_PARAMETER)

def setParameterInSamples(samples, pid, value, unit, ptype):
    if ptype not in PTYPES:
        print 'ptype not supported', ptype
        return    
    for s in samples:
        s[pid] = (pid, value, unit, ptype)
    return samples

def setParameterValuesInSamples(raw_samples, pid, values, unit, ptype):
    if ptype not in PTYPES:
        print 'ptype not supported', ptype
        return
    samples = []
    for s in raw_samples:
        for value in values:
            # make a copy of the dictionary
            snew = s.copy()
            # add information
            snew[pid] = (pid, value, unit, ptype)
            samples.append(snew)
    return samples

    
def adaptFlowInSamples(samples):
    '''
    flow is adapted due to scaling to full liver architecture
        TODO: make this consistent, this is not good and seems like dirty fix
        TODO: make a class for the parameters
    '''
    print 'flow adaptation'
    f_flow = 0.47
    for s in samples:
        if (s.has_key("flow_sin")):
            name, value, unit, ptype = s["flow_sin"];
            s["flow_sin"] = (name, value*f_flow, unit, ptype)
    return samples


def create_django_model(sbml_id, sync=True):
    ''' Creates the model from given sbml_id '''    
    model = SBMLModel.create(sbml_id, os.environ['SBML_DIR']);
    model.save();
    if sync:
        sync_sbml()
    return model
    
def sync_sbml():
    '''
    Copies all SBML files to the server 
        run an operating system command
        call(["ls", "-l"])
    '''
    call_command = [os.environ['MULTISCALE_GALACTOSE'] + '/' + "syncDjangoSBML.sh"]
    logging.debug(str(call_command))
    call(call_command)
    
def createTask(model, integration, info='', priority=0):
    task, created = Task.objects.get_or_create(sbml_model=model, integration=integration, 
                                               info=info, priority=priority)
    if (created):
        print "Task created: {}".format(task)
    return task


def createSimulationsForSamples(task, samples):
    for s in samples:
        createSimulationForSample(task, sample=s)
        
        
def createSimulationForSample(task, sample):
    ''' 
    Create the single Parameters, the combined ParameterCollection
    and the simulation based on the Parametercollection for the
    iterable sample, which contains triples of (name, value, unit).
    '''
    # Parameters are generated in a unique way
    parameters = []
    for data in sample.values():
        name, value, unit, ptype = data
        p, _ = Parameter.objects.get_or_create(name=name, value=value, unit=unit, ptype=ptype);
        parameters.append(p)

    sim = Simulation(task=task, status = UNASSIGNED)
    sim.save()
    sim.parameters.add(*parameters)
    print "{}".format(sim)   

#----------------------------------------------------------------------#
def make_demo(sbml_id, N):
    info='Simple demo network to test database and simulations.'
    model = create_django_model(sbml_id, sync=True)
    
    # parameter samples
    samples = createDemoSamples(N=N, sampling="distribution")
    
    # simulations
    settings = Setting.get_settings( {'tstart':0.0, 'tend':500.0, 'steps':100} )
    integration = Integration.get_or_create_integration(settings)
    task = createTask(model, integration, info)
    createSimulationsForSamples(task, samples)
        
#----------------------------------------------------------------------#
def make_glucose(sbml_id):
    ''' Model of hepatic glucose metabolism '''
    create_django_model(sbml_id, sync=True)

#----------------------------------------------------------------------#
def make_galactose_core(sbml_id, N):
    info = '''Simulation of varying galactose concentrations periportal to steady state.'''
    model = create_django_model(sbml_id, sync=True)
    
    # create parameter samples
    samples = createGalactoseSamples(N=N, sampling='distribution') 
    gal_range = np.arange(0, 6, 0.5)
    samples = setParameterValuesInSamples(samples, 'PP__gal', gal_range, 'mM', BOUNDERY_INIT)
    
    # simulations
    settings = Setting.get_settings( {'tstart':0.0, 'tend':10000.0, 'steps':100} )
    integration = Integration.get_or_create_integration(settings)
    task = createTask(model, integration, info=info)
    createSimulationsForSamples(task, samples)
    
    return (task, samples)

#----------------------------------------------------------------------#
def make_galactose_dilution(sbml_id, N):
    info = '''Simulation of multiple-indicator dilution curves (tracer peak periportal).'''
    model = create_django_model(sbml_id, sync=True)
    
    # parameter samples
    samples = createGalactoseSamples(N=N, sampling="distribution")
    
    # simulations
    settings = Setting.get_settings( {'tstart':0.0, 'tend':5000.0, 'steps':100} )
    integration = Integration.get_or_create_integration(settings)
    task = createTask(model, integration, info=info)
    createSimulationsForSamples(task, samples)

    return (task, samples)

#----------------------------------------------------------------------#
def make_galactose_challenge(sbml_id, N):        
    info = '''Simulation of varying galactose challenge periportal to steady state.'''
    model = create_django_model(sbml_id, sync=True)
    
    # parameter samples
    raw_samples = createGalactoseSamples(N=N, sampling='distribution') 
    gal_challenge = np.arange(0, 6, 0.5)
    samples = setParameterValuesInSamples(raw_samples, 'gal_challenge', gal_challenge, 'mM', GLOBAL_PARAMETER)
    
    # simulations
    settings = Setting.get_settings( {'tstart':0.0, 'tend':10000.0, 'steps':100} )
    integration = Integration.get_or_create_integration(settings)
    task = createTask(model, integration, info=info)
    createSimulationsForSamples(task, samples)
    
    return (task, samples)

####################################################################################
if __name__ == "__main__":
    #----------------------------------------------------------------------#
    if (1):
        print 'make demo'
        make_demo(sbml_id='Koenig2014_demo_kinetic_v7', N=10)
    #----------------------------------------------------------------------#
    if (0):
        make_glucose(sbml_id='Koenig2014_Hepatic_Glucose_Model_annotated')
    #----------------------------------------------------------------------#
    if (0):
        [task, samples] = make_galactose_core(sbml_id='Galactose_v12_Nc20_core', N=10)
    
        # Use the samples to create deficiencies
        deficiencies = ()
        # deficiencies = range(1, 24)
        for d in deficiencies:
            sdict = task.integration.get_settings_dict()
            sdict['condition'] = 'GDEF_' + str(d)
            settings = Setting.get_settings_for_dict(sdict)
            integration = Integration.get_or_create_integration(settings)
            
            task_d = createTask(task.sbml_model, integration, info=task.info)
            # create the simulations
            samples = setDeficiencyInSamples(samples, deficiency=d)
            createSimulationsForSamples(task_d, samples)     
    #----------------------------------------------------------------------#
    if (0):
        '''
        Multiple Indicator Dilution peaks after certain time.
        The peaks are combined with additional galactose background 
        challenges
        '''
        [task, raw_samples] = make_galactose_dilution(sbml_id='Galactose_v12_Nc20_dilution', N=10)
        
        # additional galactose challenge
        PP__gal = (0.28, 5, 12.5, 17.5) # [mM]
        samples = setParameterValuesInSamples(raw_samples, 'PP__gal', PP__gal, 'mM', BOUNDERY_INIT)
        createSimulationsForSamples(task, samples)
        
    #----------------------------------------------------------------------#
    if (0):
        '''
        Galactose challenge after certain time and simulation to steady state.
        '''
        make_galactose_challenge(sbml_id="Galactose_v12_Nc20_galactose-challenge", N=10)    
    #----------------------------------------------------------------------#
    if (0):
        pass
        # TODO: implement
        # make_galactose_cirrhosis(N=10)
    
####################################################################################

