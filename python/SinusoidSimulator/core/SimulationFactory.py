'''
The SimulationFactory generates simulations for the models.
The parameters for the simulations are generated by various sampling
methods. Every simulation has a set of paramters.
Simulations can than be run with COPASI based on the SBML model and
the parameter settings files.
Parameters are lists of triples, consisting of name, value and unit.
    
@author: Matthias Koenig
@date: 2014-03-14
'''
import sys
import os
sys.path.append('/home/mkoenig/multiscale-galactose/python')
os.environ['DJANGO_SETTINGS_MODULE'] = 'mysite.settings'


from sim.models import *
import numpy as np
from Distributions import getMultipleIndicatorDistributions, getDemoDistributions
from RandomSampling import createParametersBySampling

# here the local sbml files are located
SBML_FOLDER = "/home/mkoenig/multiscale-galactose-results/tmp_sbml"

def createTask(model, integration, info):
    ''' Creates the task from given information. '''
    task, created = Task.objects.get_or_create(sbml_model=model, integration=integration)
    if (created):
        print "Task created: {}".format(task)
    task.info = info
    task.save()
    return task


def createDemoSimulations(task, N=10, sampling='distribution'):
    ''' Creates simple demo simulation to test the network visualization. '''    
    # get the parameter sets by sampling (same parameters for all galactose settings)
    # the same parameter sampling is used for all deficiencies
    dist_data = getDemoDistributions()
    samples = createParametersBySampling(dist_data, N, sampling);
    for s in samples:
        createSimulationForParameterSample(task, sample=s)
    return task


def createMultipleIndicatorSimulationTask(task, N=10, sampling="distribution"):
    ''' MulitpleIndicator simulations '''
    dist_data = getMultipleIndicatorDistributions()
    samples = createParametersBySampling(dist_data, N, sampling);
    for s in samples:
        createSimulationForParameterSample(task=task, sample=s)
        

def createGalactoseSimulations(task, gal_range, flow_range, N=1, deficiencies=[0], sampling='mean'):
    ''' Galactose simulations '''
    # get the parameter sets by sampling (same parameters for all galactose settings)
    # the same parameter sampling is used for all deficiencies
    dist_data = getMultipleIndicatorDistributions()
    samples = createParametersBySampling(dist_data, N, sampling);    
    for deficiency in deficiencies:
        for s in samples:
            for galactose in gal_range:
                for flow in flow_range:
                    # make a copy of the dictionary
                    snew = s.copy()
                    # add information
                    snew['deficiency'] = ('deficiency', deficiency, '-')
                    snew['PP_gal'] = ('PP__gal', galactose, 'mM')
                    snew['flow_sin'] = ('flow_sin', flow, 'm/s')
                    createSimulationForParameterSample(task, sample=snew)


def createSimulationForParameterSample(task, sample):
    ''' 
    Create the single Parameters, the combined ParameterCollection
    and the simulation based on the Parametercollection for the
    iterable sample, which contains triples of (name, value, unit).
    '''
    # Parameters
    ps = []
    for data in sample.values():
        name, value, unit = data
        p, created = Parameter.objects.get_or_create(name=name, value=value, unit=unit);
        ps.append(p)
    # ParameterCollection
    pset = ParameterCollection();
    pset.save()
    for p in ps:
        pset.parameters.add(p)
    pset.save()
    
    # Simulation
    sim, created = Simulation.objects.get_or_create(task=task, 
                                                      parameters = pset,
                                                      status = UNASSIGNED)
    if (created):
        print "Simulation created: {}".format(sim)

###################################################################################
def copySBML():
    ''' Copy all the SBML files to the server '''
    from subprocess import call
    # run an operating system command
    # call(["ls", "-l"])
    call_command = [code_dir + '/' + "copySBML.sh"]
    print call_command
    call(call_command)

###################################################################################
if __name__ == "__main__":
    results_dir = "/home/mkoenig/multiscale-galactose-results"
    code_dir = "/home/mkoenig/multiscale-galactose"
    #----------------------------------------------------------------------#
    if (0):
        print '*** DEMO ***'
        # Generate demo network & simulations for visualization
        sbml_id = "Koenig2014_demo_kinetic_v7"
        model = SBMLModel.create(sbml_id, SBML_FOLDER);
        model.save();
        copySBML()
        # integration
        integration, created = Integration.objects.get_or_create(tstart=0.0, 
                                                             tend=100.0, 
                                                             tsteps=2000,
                                                             abs_tol=1E-6,
                                                             rel_tol=1E-6)
        # info
        info = '''Simulation of the demo network for visualization.'''
        # simulation
        task = createTask(model, integration, info)
        createDemoSimulations(task, N=200, sampling="distribution") 
    #----------------------------------------------------------------------#
    if (0):
        print '*** MULTIPLE INDICATOR ***'
        # MultipleIndicator Simulations with variable tracer peak duration
        info = '''Simulation of multiple-indicator dilution curves (tracer peak periportal)'''
        # integration
        integration, created = Integration.objects.get_or_create(tstart=0.0, 
                                                             tend=100.0, 
                                                             tsteps=4000,
                                                             abs_tol=1E-6,
                                                             rel_tol=1E-6)
        peaks = range(0,4)
        for kp in peaks:
            # model
            sbml_id = "MultipleIndicator_P%02d_v17_Nc20_Nf1" % kp
            model = SBMLModel.create(sbml_id, SBML_FOLDER);
            model.save();
            copySBML()
            # Simulations
            task = createTask(model, integration, info);
            createMultipleIndicatorSimulationTask(task, N=1000, sampling="distribution") 
    #----------------------------------------------------------------------#
    if (1):
        print '*** GALACTOSE SIMULATIONS ***'
        # Create the galactose model
        sbml_id = "Galactose_v18_Nc20_Nf1"   
        info = '''Simulation of varying galactose concentrations periportal to steady state.'''
        model = SBMLModel.create(sbml_id, SBML_FOLDER);
        model.save();
        copySBML()
        # integration
        integration, created = Integration.objects.get_or_create(tstart=0.0, 
                                                             tend=200.0, 
                                                             tsteps=100,
                                                             abs_tol=1E-6,
                                                             rel_tol=1E-6)
        # simulation
        gal_range = np.arange(0, 6, 0.5)
        flow_range = np.arange(0, 1000E-6, 50E-6)
        task = createTask(model, integration, info)
        # create mean
        createGalactoseSimulations(task, gal_range, flow_range, N=1, deficiencies=[0,], sampling='mean')
        # create from distribution
        createGalactoseSimulations(task, gal_range, flow_range, N=5, deficiencies=[0,], sampling='distribution')
     #----------------------------------------------------------------------#        