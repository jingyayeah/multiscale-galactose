startDevPlot(file=file.path(ma.settings$dir.results, 'figures', 'MultipleIndicator_Goresky1983_1.png'), create_plots=create_plots)
plot(numeric(0), numeric(0),
xlim=c(0,30), ylim=c(0,16),
xlab="time [s]", ylab="10^3 x outflow fraction/ml", main="Goresky1973")
plotDilutionData(gor1983, compounds, ccolors, correctTime=TRUE)
stopDevPlot()
## Goresky1983 & 1973 ##
startDevPlot(file=file.path(ma.settings$dir.results, 'figures', 'MultipleIndicator_Goresky_1.png'), create_plots=create_plots)
plot(numeric(0), numeric(0),
xlim=c(0,30), ylim=c(0,16),
xlab="time [s]", ylab="10^3 x outflow fraction/ml", main="Goresky1973 & 1983")
plotDilutionData(gor1983, compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="A",], compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="B",], compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="C",], compounds, ccolors, correctTime=TRUE)
stopDevPlot()
###############################################################
## Villeneuve1996 ##
# data is in log
vil1996 <- read.csv(file.path(ma.settings$dir.expdata, "dilution_indicator", "Villeneuve1996_Fig3.csv"), sep="\t")
summary(vil1996)
startDevPlot(file=file.path(ma.settings$dir.results, 'figures', 'MultipleIndicator_Villeneuve1996_1.png'), create_plots=create_plots)
plot(numeric(0), numeric(0),
xlim=c(0,120), ylim=c(0,4000),
xlab="time [s]", ylab="10^3 x outflow fraction", main="Villeneuve1996")
plotDilutionData(vil1996, compounds, ccolors, correctTime=TRUE)
stopDevPlot()
# scaling for comparison
vil1996$outflow <- 1/200 * vil1996$outflow
# Plot all the dilution curves in the same plot
startDevPlot(file=file.path(ma.settings$dir.results, 'figures', 'MultipleIndicator_All_1.png'), create_plots=create_plots)
plot(numeric(0), numeric(0),
xlim=c(0,120), ylim=c(0,20),
xlab="time [s]", ylab="10^3 x outflow fraction", main="Villeneuve1996")
plotDilutionData(vil1996, compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1983, compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="A",], compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="B",], compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="C",], compounds, ccolors, correctTime=TRUE)
stopDevPlot()
library(MultiscaleAnalysis)
rm(list=ls())
library('MultiscaleAnalysis')
setwd(ma.settings$dir.base)
t_peak <- 1000              # [s] MID peak start
t_end <- 5000               # [s] simulation time
folder <- '2014-12-08_T7'   # Multiple indicator data
folder.mean <- '2014-12-08_T8'   # Multiple indicator data mean
# Process the integration time curves
info <- process_folder_info(folder)
processed <- preprocess_task(folder=folder, force=force)
rm(list=ls())
library('MultiscaleAnalysis')
setwd(ma.settings$dir.base)
t_peak <- 1000              # [s] MID peak start
t_end <- 5000               # [s] simulation time
folder <- '2014-12-08_T7'   # Multiple indicator data
folder.mean <- '2014-12-08_T8'   # Multiple indicator data mean
# Process the integration time curves
info <- process_folder_info(folder)
processed <- preprocess_task(folder=folder, force=FALSE)
library(MultiscaleAnalysis)
str(processed)
names(processed)
p <- preprocess_task(folder=folder, force=FALSE)
names(p)
head(p$pars)
f.level = "PP__gal"
gal_levels <- levels(as.factor(pars[[f.level]]))
print(gal_levels)
pars <- p$pars
head(pars)
f.level = "PP__gal"
gal_levels <- levels(as.factor(pars[[f.level]]))
print(gal_levels)
plot.ids = c('PP__gal', 'PV__gal')
plot.colors = c( rgb(0.5,0.5,0.5, alpha=0.3), rgb(0,0,1.0, alpha=0.3) )
names(plot.colors) <- plot.ids
xlimits <- c(t_peak-5, t_peak+200)
ylimits <- c(0.0, max(as.numeric(gal_levels)))
nrow = ceiling(sqrt(length(plot.levels)))
par(mfrow=c(nrow, nrow))
for (p.level in plot.levels){
# empty plot
plot(numeric(0), numeric(0), xlim=xlimits, ylim=ylimits,
main=paste(f.level, '=', p.level))
# find the simulation rows for the level &
# plot all the single simulations for the level
gal_rows <- which(pars[[f.level]]==p.level)
for (k in gal_rows){
for (id in plot.ids){
points(x[[id]][[k]]$time, x[[id]][[k]][[2]],
type='l', col=plot.colors[[id]])
}
}
}
par(mfrow=c(1,1))
nrow = ceiling(sqrt(length(plot.levels)))
par(mfrow=c(nrow, nrow))
for (gal in gal_levels){
# empty plot
plot(numeric(0), numeric(0), xlim=xlimits, ylim=ylimits,
main=paste(f.level, '=', gal))
# find the simulation rows for the level &
# plot all the single simulations for the level
gal_rows <- which(pars[[f.level]]==gal)
for (k in gal_rows){
for (id in plot.ids){
points(x[[id]][[k]]$time, x[[id]][[k]][[2]],
type='l', col=plot.colors[[id]])
}
}
}
par(mfrow=c(1,1))
nrow = ceiling(sqrt(length(plot.levels)))
par(mfrow=c(nrow, nrow))
for (gal in gal_levels){
# empty plot
plot(numeric(0), numeric(0), xlim=xlimits, ylim=ylimits,
main=paste(f.level, '=', gal))
# find the simulation rows for the level &
# plot all the single simulations for the level
gal_rows <- which(pars[[f.level]]==gal)
for (k in gal_rows){
for (id in plot.ids){
points(p$x[[id]][[k]]$time, x[[id]][[k]][[2]],
type='l', col=plot.colors[[id]])
}
}
}
par(mfrow=c(1,1))
nrow = ceiling(sqrt(length(plot.levels)))
par(mfrow=c(nrow, nrow))
for (gal in gal_levels){
# empty plot
plot(numeric(0), numeric(0), xlim=xlimits, ylim=ylimits,
main=paste(f.level, '=', gal))
# find the simulation rows for the level &
# plot all the single simulations for the level
gal_rows <- which(pars[[f.level]]==gal)
for (k in gal_rows){
for (id in plot.ids){
points(p$x[[id]][[k]]$time, p$x[[id]][[k]][[2]],
type='l', col=plot.colors[[id]])
}
}
}
par(mfrow=c(1,1))
nrow = ceiling(sqrt(length(gal_levels)))
par(mfrow=c(nrow, nrow))
for (gal in gal_levels){
# empty plot
plot(numeric(0), numeric(0), xlim=xlimits, ylim=ylimits,
main=paste(f.level, '=', gal))
# find the simulation rows for the level &
# plot all the single simulations for the level
gal_rows <- which(pars[[f.level]]==gal)
for (k in gal_rows){
for (id in plot.ids){
points(p$x[[id]][[k]]$time, p$x[[id]][[k]][[2]],
type='l', col=plot.colors[[id]])
}
}
}
par(mfrow=c(1,1))
xlimits <- c(0.0, t_end)
nrow = ceiling(sqrt(length(gal_levels)))
par(mfrow=c(nrow, nrow))
for (gal in gal_levels){
# empty plot
plot(numeric(0), numeric(0), xlim=xlimits, ylim=ylimits,
main=paste(f.level, '=', gal))
# find the simulation rows for the level &
# plot all the single simulations for the level
gal_rows <- which(pars[[f.level]]==gal)
for (k in gal_rows){
for (id in plot.ids){
points(p$x[[id]][[k]]$time, p$x[[id]][[k]][[2]],
type='l', col=plot.colors[[id]])
}
}
}
par(mfrow=c(1,1))
library('matrixStats')
plotMeanCurves <- function(mlist, f.level, compounds, ccolors){
for (kc in seq(length(compounds))){
compound <- compounds[kc]
col <- ccolors[kc]
id <- paste('PV__', compound, sep='')
# different levels
plot.levels <- levels(as.factor(pars[[f.level]]))
for (p.level in plot.levels){
sim_rows <- which(pars[[f.level]]==p.level)
tmp <- mlist[[id]][ ,sim_rows]
w <- pars$Q_sinunit[sim_rows] # weighting with the volume flow F
row.means <- rowMeans(tmp)
row.wmeans <- rowWeightedMeans(tmp, w=w)
row.medians <- rowMedians(tmp)
row.wmedians <- rowWeightedMedians(tmp, w=w)
row.sds <- rowSds(tmp)
time = as.numeric(rownames(tmp))
points(time, row.wmeans, col=col, lwd=2, type='l', lty=1)
#points(time, row.wmeans+row.sds, col='Orange', lwd=2, type='l', lty=1)
#points(time, row.wmedians, col=col, lwd=2, type='l', lty=2)
points(time, row.means, col=col, lwd=0.5, type='l', lty=2)
#points(time, rowMedians(tmp), col=col, lwd=2, type='l', lty=3)
#points(time, rowMins(tmp), col='Red', lwd=2, type='l', lty=2)
#points(time, rowMaxs(tmp), col='Red', lwd=2, type='l', lty=2)
#points(time, rowQuantiles(tmp,probs=c(0.25)), col='Green', lwd=2, type='l', lty=3)
#points(time, rowQuantiles(tmp,probs=c(0.75)), col='Green', lwd=2, type='l', lty=3)
# lines for the max values
tmax.wmeans <- time[which.max(row.wmeans)]
cat("tmax [", id , "] = ", tmax.wmeans, "\n")
tmax.means <- time[which.max(row.means)]
abline(v=tmax.wmeans, col=col)
#abline(v=tmax.means, col=col)
}
}
}
t.approx = seq(from=t_peak-5, to=t_peak+50, by=0.2)
time <- t.approx
simIds <- rownames(pars)
mlist <- createApproximationMatrix(ids=ids, simIds=simIds, points=t.approx, reverse=FALSE)
ids <- paste(rep('PP__', length(compounds)), compounds)
compounds = c('gal', 'galM', 'rbcM', 'alb', 'suc', 'h2oM')
ids <- paste(rep('PP__', length(compounds)), compounds)
ids <- paste(rep('PP__', length(compounds)), compounds, sep='')
ids
ids <- c( paste(rep('PP__', length(compounds)), compounds, sep=''),
paste(rep('PV__', length(compounds)), compounds, sep=''))
ids
mlist <- createApproximationMatrix(ids=ids, simIds=simIds, points=t.approx, reverse=FALSE)
mlist <- createApproximationMatrix(p$x, ids=ids, simIds=simIds, points=t.approx, reverse=FALSE)
t.approx
compounds = c('gal', 'galM', 'rbcM', 'alb', 'suc', 'h2oM')
ccolors = c('gray', 'black', 'red', 'darkgreen', 'darkorange', 'darkblue')
f.level <- "PP__gal"
time.min=995
par(mfrow=c(2,1))
plot(numeric(0), numeric(0), log='y', xlim=c(time.min, 1025), ylim=c(1E-2,0.5))
plotMeanCurves(mlist, f.level, compounds, ccolors)
plot(numeric(0), numeric(0), xlim=c(time.min, 1025), ylim=c(0,0.3))
plotMeanCurves(mlist, f.level, compounds, ccolors)
par(mfrow=c(1,1))
pars.sorted <- pars[with(pars, order(y_cell, y_sin, L, y_dis, flow_sin, PP__gal)), ]
head(pars.sorted)
N=54
plot(numeric(0), numeric(0), xlim=c(time.min, 1025), ylim=c(0,0.3))
testIds = rownames(pars.sorted)[(1+N*5):(5+N*5)]
for (simId in testIds){
for (kc in seq(length(compounds))){
compound <- compounds[kc]
print(compound)
id <- paste('PV__', compound, sep="")
print(id)
col <- ccolors[kc]
time <- x[[id]][[simId]]$time
tmp.data <- x[[id]][[simId]][[2]]
points(time, tmp.data, type='l', col=col)
tmp.tmax <- time[which.max(tmp.data)]
abline(v=tmp.tmax, col=col)
}
}
N=54
plot(numeric(0), numeric(0), xlim=c(time.min, 1025), ylim=c(0,0.3))
testIds = rownames(pars.sorted)[(1+N*5):(5+N*5)]
for (simId in testIds){
for (kc in seq(length(compounds))){
compound <- compounds[kc]
print(compound)
id <- paste('PV__', compound, sep="")
print(id)
col <- ccolors[kc]
time <- p$x[[id]][[simId]]$time
tmp.data <- p$x[[id]][[simId]][[2]]
points(time, tmp.data, type='l', col=col)
tmp.tmax <- time[which.max(tmp.data)]
abline(v=tmp.tmax, col=col)
}
}
hist(pars$flow_sin, breaks = 40)
gal_levels
plotMeanCurves <- function(mlist, f.level, compounds, ccolors){
for (kc in seq(length(compounds))){
compound <- compounds[kc]
col <- ccolors[kc]
id <- paste('PV__', compound, sep='')
# different levels
# plot.levels <- levels(as.factor(pars[[f.level]]))
plot.levels = c("0.28", "12.5", "17.5")
for (p.level in plot.levels){
sim_rows <- which(pars[[f.level]]==p.level)
tmp <- mlist[[id]][ ,sim_rows]
w <- pars$Q_sinunit[sim_rows] # weighting with the volume flow F
row.means <- rowMeans(tmp)
row.wmeans <- rowWeightedMeans(tmp, w=w)
row.medians <- rowMedians(tmp)
row.wmedians <- rowWeightedMedians(tmp, w=w)
row.sds <- rowSds(tmp)
time = as.numeric(rownames(tmp))
points(time, row.wmeans, col=col, lwd=2, type='l', lty=1)
#points(time, row.wmeans+row.sds, col='Orange', lwd=2, type='l', lty=1)
#points(time, row.wmedians, col=col, lwd=2, type='l', lty=2)
points(time, row.means, col=col, lwd=0.5, type='l', lty=2)
#points(time, rowMedians(tmp), col=col, lwd=2, type='l', lty=3)
#points(time, rowMins(tmp), col='Red', lwd=2, type='l', lty=2)
#points(time, rowMaxs(tmp), col='Red', lwd=2, type='l', lty=2)
#points(time, rowQuantiles(tmp,probs=c(0.25)), col='Green', lwd=2, type='l', lty=3)
#points(time, rowQuantiles(tmp,probs=c(0.75)), col='Green', lwd=2, type='l', lty=3)
# lines for the max values
tmax.wmeans <- time[which.max(row.wmeans)]
cat("tmax [", id , "] = ", tmax.wmeans, "\n")
tmax.means <- time[which.max(row.means)]
abline(v=tmax.wmeans, col=col)
#abline(v=tmax.means, col=col)
}
}
}
# Dilution curves
t.approx = seq(from=t_peak-5, to=t_peak+50, by=0.2)
time <- t.approx
simIds <- rownames(pars)
compounds = c('gal', 'galM', 'rbcM', 'alb', 'suc', 'h2oM')
ids <- c( paste(rep('PP__', length(compounds)), compounds, sep=''),
paste(rep('PV__', length(compounds)), compounds, sep=''))
ids
t.approx
mlist <- createApproximationMatrix(p$x, ids=ids, simIds=simIds, points=t.approx, reverse=FALSE)
compounds = c('gal', 'galM', 'rbcM', 'alb', 'suc', 'h2oM')
ccolors = c('gray', 'black', 'red', 'darkgreen', 'darkorange', 'darkblue')
f.level <- "PP__gal"
time.min=995
par(mfrow=c(2,1))
plot(numeric(0), numeric(0), log='y', xlim=c(time.min, 1025), ylim=c(1E-2,0.5))
plotMeanCurves(mlist, f.level, compounds, ccolors)
plot(numeric(0), numeric(0), xlim=c(time.min, 1025), ylim=c(0,0.3))
plotMeanCurves(mlist, f.level, compounds, ccolors)
par(mfrow=c(1,1))
time = seq(from=t_peak-5, to=t_peak+50, by=0.25) # approximation time for plot
# Process the integration time curves
info <- process_folder_info(folder)
p <- preprocess_task(folder=folder, force=FALSE)
pars <- p$pars
sim_ids <- rownames(pars)
names(p)
################################################################
rm(list=ls())
library('MultiscaleAnalysis')
setwd(ma.settings$dir.base)
# Set folder and peak times for analysis
folder <- '2014-12-13_T9'   # Multiple indicator data
t_peak <- 5000               # [s] MID peak start
t_end <- 10000               # [s] simulation time
# Only small subset of simulation is of interest
time = seq(from=t_peak-5, to=t_peak+50, by=0.25) # approximation time for plot
# Process the integration time curves
info <- process_folder_info(folder)
p <- preprocess_task(folder=folder, force=FALSE)
pars <- p$pars
sim_ids <- rownames(pars)
names(p)
inds = which(pars$f_flow==0.4, pars$PP__gal==0.28)
head(inds)
compound = 'gal'
sprintf('H%02i', 1:20)
sprintf('H%02i__%s', 1:20, compound)
ids = c(sprintf('PP__%s', compound),
sprintf('H%02i__%s', 1:20, compound),
sprintf('PP__%s', compound))
ids
ids = c(sprintf('PP__%s', compound),
sprintf('H%02i__%s', 1:20, compound),
sprintf('PV__%s', compound))
ids
sim_ids = rownames(pars)[inds]
head(sim_ids)
time
dlist <- createApproximationMatrix(p$x, ids=ids, simIds=sim_ids, points=time, reverse=FALSE)
time
ids
sim_ids
time
ids
length(sim_ids)
rm(list=ls())
library('MultiscaleAnalysis')
setwd(ma.settings$dir.base)
# Set folder and peak times for analysis
folder <- '2014-12-12_T2'   # Multiple indicator data
t_peak <- 5000               # [s] MID peak start
t_end <- 10000               # [s] simulation time
# Only small subset of simulation is of interest
time = seq(from=t_peak-5, to=t_peak+50, by=0.25) # approximation time for plot
# Process the integration time curves
info <- process_folder_info(folder)
p <- preprocess_task(folder=folder, force=FALSE)
pars <- p$pars
sim_ids <- rownames(pars)
names(p)
# Species in the dilution curves
compounds = c('gal', 'galM', 'rbcM', 'alb', 'suc', 'h2oM')
# Variation of background galactose levels for given tracer
f.level = "PP__gal"
gal_levels <- levels(as.factor(pars[[f.level]]))
cat('Galactose levels: ', gal_levels, '\n')
# subset for visualization
inds = which(pars$f_flow==0.4, pars$PP__gal==0.28)
head(inds)
# Select the ids for the approximation matrix
# PP__s, H01__s, H02__s, ..., H20__s, PV__s
compound = 'gal'
ids = c(sprintf('PP__%s', compound),
sprintf('H%02i__%s', 1:20, compound),
sprintf('PV__%s', compound))
sim_ids = rownames(pars)[inds]
# Create the approximation matrix
time
ids
length(sim_ids)
inds = which(pars$f_flow==0.4 & pars$PP__gal==0.28)
head(inds)
inds = which(pars$f_flow==0.4 & pars$PP__gal==0.28)
head(inds)
(pars$flow==0.4)
(pars$f_flow==0.4)
which(pars$f_flow==0.4)
inds = which(pars$f_flow==0.4)
inds
compound = 'gal'
ids = c(sprintf('PP__%s', compound),
sprintf('H%02i__%s', 1:20, compound),
sprintf('PV__%s', compound))
sim_ids = rownames(pars)[inds]
# Create the approximation matrix
time
ids
length(sim_ids)
dlist <- createApproximationMatrix(p$x, ids=ids, simIds=sim_ids, points=time, reverse=FALSE)
names(p$x)
source('~/multiscale-galactose/R/MultiscaleAnalysis/R/preprocess_functions.R')
source('~/multiscale-galactose/R/MultiscaleAnalysis/R/preprocess_functions.R')
source('~/multiscale-galactose/R/MultiscaleAnalysis/R/preprocess_functions.R')
source('~/multiscale-galactose/R/MultiscaleAnalysis/R/preprocess_functions.R')
rm(list=ls())
library('MultiscaleAnalysis')
setwd(ma.settings$dir.base)
# Set folder and peak times for analysis
folder <- '2014-12-12_T2'   # Multiple indicator data
t_peak <- 5000               # [s] MID peak start
t_end <- 10000               # [s] simulation time
# Only small subset of simulation is of interest
time = seq(from=t_peak-5, to=t_peak+50, by=0.25) # approximation time for plot
# Select the ids for the approximation matrix
# PP__s, H01__s, H02__s, ..., H20__s, PV__s
compound = 'gal'
ids = c(sprintf('PP__%s', compound),
sprintf('H%02i__%s', 1:20, compound),
sprintf('PV__%s', compound))
# problem that different ids can be used for preprocessing
p <- preprocess_task(folder=folder, ids=ids, force=FALSE, outname='circos')
source('~/multiscale-galactose/R/MultiscaleAnalysis/R/preprocess_functions.R')
source('~/multiscale-galactose/R/MultiscaleAnalysis/R/preprocess_functions.R')
source('~/multiscale-galactose/R/MultiscaleAnalysis/R/preprocess_functions.R')
#' the varying timesteps used for simulation.
#' Important part is also dimension reduction of the data
#' structure.
#' Folder format follows '2014-11-17_T5'.
#' @export
preprocess_task <- function(folder, ids=preprocess.ids, force=FALSE, out_name='x'){
if (missing(folder))
stop('Need to specify folder for preprocessing.')
# get all the information from the folder
info <- process_folder_info(folder)
# create results folder
dir.create(file.path(info$dir, 'results'), showWarnings = FALSE)
# read parameter file & extend with SBML information
cat(info$parsfile, '\n')
pars <- loadParameterFile(file=info$parsfile)
# extend the parameter information with info from SBML file
ps <- getParameterTypes(pars=pars)
model <- loadSBMLModel(info$f.sbml)
pars <- extendParameterStructure(pars=pars, fixed_ps=ps$fixed, model=model)
# Preprocess timecourses as Rdata
simIds = rownames(pars)
fname <- file.path(info$dir, 'results', sprintf('%s.Rdata', out_name))
cat('Creating data matrix ...\n')
if (file.exists(fname) & force==FALSE){
load(file=fname)
cat('Preprocessed data exists and is loaded.\n')
} else {
x <- createPreprocessDataMatrices(ids=ids, out.fname=fname, simIds=simIds,
modelId=info$modelId, dir=info$dir.simdata)
}
return(list(pars=pars, ids=ids, x=x, info=info))
}
rm(list=ls())
library('MultiscaleAnalysis')
setwd(ma.settings$dir.base)
# Set folder and peak times for analysis
folder <- '2014-12-12_T2'   # Multiple indicator data
t_peak <- 5000               # [s] MID peak start
t_end <- 10000               # [s] simulation time
# Only small subset of simulation is of interest
time = seq(from=t_peak-5, to=t_peak+50, by=0.25) # approximation time for plot
# Select the ids for the approximation matrix
# PP__s, H01__s, H02__s, ..., H20__s, PV__s
compound = 'gal'
ids = c(sprintf('PP__%s', compound),
sprintf('H%02i__%s', 1:20, compound),
sprintf('PV__%s', compound))
source('~/multiscale-galactose/R/MultiscaleAnalysis/R/preprocess_functions.R')
source('~/multiscale-galactose/R/MultiscaleAnalysis/R/preprocess_functions.R')
