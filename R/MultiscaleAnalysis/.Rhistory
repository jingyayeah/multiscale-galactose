pp_compounds = ids[grep('PP__', names(df))]
plotTimecourse(df, pp_compounds)
pv_compounds = ids[grep('PP__', names(df))]
plotTimecourse(df, pv_compounds)
plotTimecourse(df, pv_compounds)
plotTimecourse <- function(df, ids){
for (id in ids){
lines(df$time, df[[id]])
}
}
pv_compounds = ids[grep('PV__', names(df))]
# plot some components via ids
plotTimecourse <- function(df, ids){
for (id in ids){
lines(df$time, df[[id]])
}
}
# subsets for plotting
pp_ids = ids[grep('PP__', names(df))]
pv_ids = ids[grep('PV__', names(df))]
H01_ids = ids[grep('H01__', names(df))]
gal_ids = ids[grep('__gal$', names(df))]
adp_ids = ids[grep('__a[d,t]p', names(df))]
audp_ids = ids[grep('__[a,u][d,t]p$', names(df))]
# create some plots
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,5), type='l')
plotTimecourse(df, pp_compounds)
plotTimecourse(df, pv_compounds)
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,2.3), type='l')
plotTimecourse(df, pp_compounds)
plotTimecourse(df, pv_compounds)
print pp_ids
print(pp_ids)
plotTimecourse(df, c('PV__galM'), col='Blue')
plotTimecourse(df, c('PV__galM'), col='Blue')
# plot some components via ids
plotTimecourse <- function(df, ids, cols='Black'){
for (id in ids){
lines(df$time, df[[id]], cols)
}
}
plotTimecourse(df, c('PV__galM'), col='Blue')
plotTimecourse(df, c('PV__galM'), col=c('Blue'))
# plot some components via ids
plotTimecourse <- function(df, ids, cols='Black'){
for (id in ids){
lines(df$time, df[[id]], col=cols)
}
}
plotTimecourse(df, c('PV__galM'), col=c('Blue'))
plot(df$time, df[['PV__galM']])
plot(df$time, df[['PV__galM']], xlim(c(0,20)))
plot(df$time, df[['PV__galM']] , xlim=c(0,20)))
plot(df$time, df[['PV__galM']] , xlim=c(0,20))
plot(df$time, df[['PV__galM']] , xlim=c(0,50))
plot(df$time, df[['PV__galM']] , xlim=c(0,100))
plotTimecourse(df, c('PV_galM'))
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,2.3), type='l')
plotTimecourse(df, c('PV_galM'))
plotTimecourse(df, c('PV__galM'))
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,2.3), type='l')
plotTimecourse(df, c('PV__galM'), col=c('Blue'))
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,0.05), type='l')
plotTimecourse(df, c('PV__galM'), col=c('Blue'))
galM_ids = ids[grep('__galM$', names(df))]
plotTimecourse(df, galM_ids)
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,0.5), type='l')
plotTimecourse(df, galM_ids)
plotTimecourse(df, gal_ids, col=c('Blue'))
plotTimecourse(df, gal_ids, col=c('Blue'))
head(df$[[gal_ids]])
head(df[[gal_ids]])
head(df[,gal_ids])
ma.settings$simulator <- 'ROADRUNNER'
task <- 3
date = '2014-07-15'
modelId <- paste('Galactose_v12_Nc20_dilution')
Nc <- 20
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
print(parsfile)
pars <- loadParameterFile(file=parsfile)
head(pars)
sname <- paste(date, '_', task, sep='')
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
print(parsfile)
pars <- loadParameterFile(file=parsfile)
head(pars)
rm(list=ls())
library(data.table)
library(libSBML)
library(matrixStats)
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
ma.settings$simulator <- 'ROADRUNNER'
task <- 3
date = '2014-07-15'
modelId <- paste('Galactose_v12_Nc20_dilution')
Nc <- 20
sname <- paste(date, '_', task, sep='')
rm(list=ls())
library(data.table)
library(libSBML)
library(matrixStats)
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
# Get overview over available simulations
ma.settings$simulator <- 'ROADRUNNER'
task <- 'T3'
date = '2014-07-15'
modelId <- paste('Galactose_v12_Nc20_dilution')
Nc <- 20
sname <- paste(date, '_', task, sep='')
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
print(parsfile)
pars <- loadParameterFile(file=parsfile)
head(pars)
simId <- 497
dir = paste(ma.settings$dir.results, '/tmp_sim/', task, sep='')
df = readDataForSimulation(dir=dir, simId=paste('Sim', simId, sep=''))
head(df)
ids = names(df)
plotTimecourse <- function(df, ids, cols='Black'){
for (id in ids){
lines(df$time, df[[id]], col=cols)
}
}
pp_ids = ids[grep('PP__', names(df))]
pv_ids = ids[grep('PV__', names(df))]
H01_ids = ids[grep('H01__', names(df))]
gal_ids = ids[grep('__gal$', names(df))]
galM_ids = ids[grep('__galM$', names(df))]
adp_ids = ids[grep('__a[d,t]p', names(df))]
audp_ids = ids[grep('__[a,u][d,t]p$', names(df))]
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,2.3), type='l')
plotTimecourse(df, pp_compounds)
plotTimecourse(df, pv_compounds)
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,2.3), type='l')
plotTimecourse(df, pp_ids)
plotTimecourse(df, pv_ids)
plotTimecourse(df, c('PV__galM'), col=c('Blue'))
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,0.05), type='l')
plotTimecourse(df, c('PV__galM'), col=c('Blue'))
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,0.05), type='l')
plotTimecourse(df, c('PV__galM'), col=c('Blue'))
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,2.3), type='l')
plotTimecourse(df, pp_ids)
plotTimecourse(df, pv_ids)
plotTimecourse(df, c('PV__galM'), col=c('Blue'))
plotTimecourse(df, c('PV__gal'), col=c('Red'))
rm(list=ls())
library(data.table)
library(libSBML)
library(matrixStats)
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
# Get overview over available simulations
ma.settings$simulator <- 'ROADRUNNER'
task <- 'T3'
date = '2014-07-15'
modelId <- paste('Galactose_v12_Nc20_dilution')
Nc <- 20
sname <- paste(date, '_', task, sep='')
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
print(parsfile)
pars <- loadParameterFile(file=parsfile)
head(pars)
simId <- 298
dir = paste(ma.settings$dir.results, '/tmp_sim/', task, sep='')
df = readDataForSimulation(dir=dir, simId=paste('Sim', simId, sep=''))
head(df)
ids = names(df)
# plot some components via ids
plotTimecourse <- function(df, ids, cols='Black'){
for (id in ids){
lines(df$time, df[[id]], col=cols)
}
}
# subsets for plotting
pp_ids = ids[grep('PP__', names(df))]
pv_ids = ids[grep('PV__', names(df))]
H01_ids = ids[grep('H01__', names(df))]
gal_ids = ids[grep('__gal$', names(df))]
galM_ids = ids[grep('__galM$', names(df))]
adp_ids = ids[grep('__a[d,t]p', names(df))]
audp_ids = ids[grep('__[a,u][d,t]p$', names(df))]
# create some plots
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,2.3), type='l')
plotTimecourse(df, pp_ids)
plotTimecourse(df, pv_ids)
plotTimecourse(df, c('PV__galM'), col=c('Blue'))
plotTimecourse(df, c('PV__gal'), col=c('Red'))
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,5.1), type='l')
plotTimecourse(df, c('PV__gal'), col=c('Red'))
plotTimecourse(df, c('PP__gal'), col=c('Red'))
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,5.1), type='l')
plotTimecourse(df, gal_ids)
head(pars)
simId <- 497 # 298 (5)
dir = paste(ma.settings$dir.results, '/tmp_sim/', task, sep='')
df = readDataForSimulation(dir=dir, simId=paste('Sim', simId, sep=''))
head(df)
ids = names(df)
# plot some components via ids
plotTimecourse <- function(df, ids, cols='Black'){
for (id in ids){
lines(df$time, df[[id]], col=cols)
}
}
# subsets for plotting
pp_ids = ids[grep('PP__', names(df))]
pv_ids = ids[grep('PV__', names(df))]
H01_ids = ids[grep('H01__', names(df))]
gal_ids = ids[grep('__gal$', names(df))]
galM_ids = ids[grep('__galM$', names(df))]
adp_ids = ids[grep('__a[d,t]p', names(df))]
audp_ids = ids[grep('__[a,u][d,t]p$', names(df))]
# create some plots
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,2.3), type='l')
plotTimecourse(df, pp_ids)
plotTimecourse(df, pv_ids)
plotTimecourse(df, c('PV__galM'), col=c('Blue'))
plotTimecourse(df, c('PV__gal'), col=c('Red'))
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,5.1), type='l')
plotTimecourse(df, gal_ids)
plotTimecourse(df, c('PV__gal'), col=c('Red'))
plotTimecourse(df, c('PP__gal'), col=c('Red'))
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,5.1), type='l')
plotTimecourse(df, gal_ids)
plot(df$time, df)
plot(df$time, df[[ids]])
plot(df$time, df[,ids])
plot(df$time, df[[,ids]])
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,2.0), type='l')
plotTimecourse(df, ids)
library(MultiscaleAnalysis)
library(MultiscaleAnalysis)
library(MultiscaleAnalysis)
df = readDataForSimulationFile(sim_file)
library(MultiscaleAnalysis)
library(MultiscaleAnalysis)
## makePlot.R
# Rscript makePlot.R sid
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
args <- commandArgs(trailingOnly = TRUE)
sim_file <- args[1]
print(sim_file)
# create model dataframe for simulation
df = readDataForSimulationFile(sim_file)
print(head(df))
ids = names(df)
#' Load the column data for single simulation by simulation file
#'
#' @param fname CSV file to load
#' @return column data
#' @export
readDataForSimulationFile <- function(fname, col.indices_f=NULL){
# much faster solution than read.csv
# data <- read.csv(file=fname)
# ! careful data is not striped with fread
data <- fread(fname, header=T, sep=',')
# replace 'X..' if header given via '# '
names(data) <- gsub('X..', '', names(data))
names(data) <- gsub('#', '', names(data))
names(data) <- gsub('\\[', '', names(data))
names(data) <- gsub('\\]', '', names(data))
# necessary to trim
setnames(data, trim(colnames(data)))
# fix strange behavior via cast
data <- as.data.frame(data)
# TODO: fix problems with settings the rownames to time
# ? why set the time as rownames?
# rownames(data) <- data[,'time']
# reduce data col.indices given by the function
if (!is.null(col.indices_f)){
col.indices <- col.indices_f(data)
data <- data[, col.indices]
}
data
}
library(MultiscaleAnalysis)
library(MultiscaleAnalysis)
## makePlot.R
# Rscript makePlot.R sid
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
args <- commandArgs(trailingOnly = TRUE)
sim_file <- args[1]
print(sim_file)
# create model dataframe for simulation
df = readDataForSimulationFile(sim_file)
print(head(df))
ids = names(df)
library(MultiscaleAnalysis)
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
args <- commandArgs(trailingOnly = TRUE)
sim_file <- args[1]
print(sim_file)
# create model dataframe for simulation
df = readDataForSimulationFile(sim_file)
print(head(df))
ids = names(df)
df
# Rscript makePlot.R sid
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
args <- commandArgs(trailingOnly = TRUE)
sim_file <- args[1]
print(sim_file)
## makePlot.R
# Rscript makePlot.R sid
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
args <- commandArgs(trailingOnly = TRUE)
sim_file <- args[1]
print(sim_file)
sim_file = '/home/mkoenig/multiscale-galactose-results/django/timecourse/T3/Galactose_v12_Nc20_dilution_Sim497_roadrunner.csv'
# create model dataframe for simulation
if is.na(sim_file){
print('No simulation file given')
} else {
df = readDataForSimulationFile(sim_file)
print(head(df))
ids = names(df)
df
}
library(MultiscaleAnalysis)
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
args <- commandArgs(trailingOnly = TRUE)
sim_file <- args[1]
print(sim_file)
sim_file = '/home/mkoenig/multiscale-galactose-results/django/timecourse/T3/Galactose_v12_Nc20_dilution_Sim497_roadrunner.csv'
if is.na(sim_file){
print('No simulation file given')
} else {
df = readDataForSimulationFile(sim_file)
print(head(df))
ids = names(df)
df
}
taframe for simulation
if is.na(sim_file){
print('No simulation file given')
} else {
df = readDataForSimulationFile(sim_file)
ids = names(df)
}
if is.na(sim_file){
print('No simulation file given')
} else {
df = readDataForSimulationFile(sim_file)
ids = names(df)
}
# create model dataframe for simulation
if is.na(sim_file){
print('No simulation file given')
} else {
print('Simulation file:')
print(sim_file)
df = readDataForSimulationFile(sim_file)
ids = names(df)
}
# create model dataframe for simulation
if is.na(sim_file){
print('No simulation file given')
} else {
print('Simulation file:')
print(sim_file)
# df = readDataForSimulationFile(sim_file)
# ids = names(df)
}
if (is.na(sim_file)){
print('No simulation file given')
} else {
print('Simulation file:')
print(sim_file)
# df = readDataForSimulationFile(sim_file)
# ids = names(df)
}
if (is.na(sim_file)){
print('No simulation file given')
} else {
print('Simulation file:')
print(sim_file)
df = readDataForSimulationFile(sim_file)
ids = names(df)
}
library(MultiscaleAnalysis)
library(MultiscaleAnalysis)
library(MultiscaleAnalysis)
help(MultiscaleAnalysis)
library(MultiscaleAnalysis)
library(MultiscaleAnalysis)
devtools::load_all("~/multiscale-galactose/R/MultiscaleAnalysis")
library(MultiscaleAnalysis)
help(MultiscaleAnalysis)
library(MultiscaleAnalysis)
help(MultiscaleAnalysis)
library(MultiscaleAnalysis)
library(MultiscaleAnalysis)
library(MultiscaleAnalysis)
help(MultiscaleAnalysis)
load_all('/home/mkoenig/multiscale-galactose/R/MultiscaleAnalysis/')
install.-packages('devtools')
install.packages('devtools')
library('devtools')
load_all('/home/mkoenig/multiscale-galactose/R/MultiscaleAnalysis/')
help(MultiscaleAnalysis::)
help(MultiscaleAnalysis)
library(MultiscaleAnalysis)
help(MultiscaleAnalysis)
library(MultiscaleAnalysis)
library(MultiscaleAnalysis)
help(MultiscaleAnalysis)
library(MultiscaleAnalysis)
help(MultiscaleAnalysis)
library(MultiscaleAnalysis)
libary('MultiscaleAnalysis')
library('MultiscaleAnalysis')
MultiscaleAnalysis
help(MultiscaleAnalysis)
library(MultiscaleAnalysis)
roxygenize('.', roclets=c('rd', 'collate', 'namespace'))
library(MultiscaleAnalysis)
help(MultiscaleAnalysis::)
help(MultiscaleAnalysis)
roxygenize('.', roclets=c('rd', 'collate', 'namespace'))
library(MultiscaleAnalysis)
library(MultiscaleAnalysis)
help(MultiscaleAnalysis)
library(MultiscaleAnalysis)
library(MultiscaleAnalysis)
library(MultiscaleAnalysis)
help(MultiscaleAnalysis)
??MultiscaleAnalysis
library(MultiscaleAnalysis)
## makePlot.R
# Rscript makePlot.R sid
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
args <- commandArgs(trailingOnly = TRUE)
sim_file <- args[1]
out_dir <- args[2]
sim_file = '/home/mkoenig/multiscale-galactose-results/django/timecourse/T3/Galactose_v12_Nc20_dilution_Sim497_roadrunner.csv'
out_dir = '/home/mkoenig/multiscale-galactose-results/tmp_plot'
print(sim_file)
print(out_dir)
# create model dataframe for simulation
if (is.na(sim_file)){
print('No simulation file given')
}
# plot some components via ids
plotTimecourse <- function(df, ids, cols='Black'){
for (id in ids){
lines(df$time, df[[id]], col=cols)
}
}
df = readDataForSimulationFile(sim_file)
ids = names(df)
# subsets for plotting
pp_ids = ids[grep('PP__', names(df))]
pv_ids = ids[grep('PV__', names(df))]
H01_ids = ids[grep('H01__', names(df))]
gal_ids = ids[grep('__gal$', names(df))]
galM_ids = ids[grep('__galM$', names(df))]
adp_ids = ids[grep('__a[d,t]p', names(df))]
audp_ids = ids[grep('__[a,u][d,t]p$', names(df))]
# create some plots
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,2.3), type='l')
plotTimecourse(df, pp_ids, col='Black')
plotTimecourse(df, pp_ids, col='Blue')
## makePlot.R
# Rscript makePlot.R sid
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
args <- commandArgs(trailingOnly = TRUE)
sim_file <- args[1]
out_dir <- args[2]
sim_file = '/home/mkoenig/multiscale-galactose-results/django/timecourse/T3/Galactose_v12_Nc20_dilution_Sim497_roadrunner.csv'
out_dir = '/home/mkoenig/multiscale-galactose-results/tmp_plot'
print(sim_file)
print(out_dir)
# create model dataframe for simulation
if (is.na(sim_file)){
print('No simulation file given')
}
# plot some components via ids
plotTimecourse <- function(df, ids, cols='Black'){
for (id in ids){
lines(df$time, df[[id]], col=cols)
}
}
df = readDataForSimulationFile(sim_file)
ids = names(df)
# subsets for plotting
pp_ids = ids[grep('PP__', names(df))]
pv_ids = ids[grep('PV__', names(df))]
H01_ids = ids[grep('H01__', names(df))]
gal_ids = ids[grep('__gal$', names(df))]
galM_ids = ids[grep('__galM$', names(df))]
adp_ids = ids[grep('__a[d,t]p', names(df))]
audp_ids = ids[grep('__[a,u][d,t]p$', names(df))]
# create some plots
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,2.3), type='l')
plotTimecourse(df, pp_ids, col='Black')
plotTimecourse(df, pv_ids, col='Blue')
