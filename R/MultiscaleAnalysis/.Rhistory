}
# some example plots
name="PP__alb"
create_plot_files = TRUE
if (create_plot_files){
png(filename=paste(ma.settings$dir.results, '/', task, "_test_", name, sep=""),
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
time <- getTimeFromPreprocessMatrix(preprocess.mat) - 10.0
plotCompound(time, preprocess.mat[[name]], name, col=ccolors[name], ylim=c(0,1.2))
if (create_plot_files){
dev.off()
}
max(preprocess.mat[["PP__alb"]]
max(preprocess.mat[["PP__alb"]])
max(preprocess.mat[["PP__alb"]])
max(preprocess.mat[["PP__alb"]])
# some example plots
name="PP__alb"
create_plot_files = TRUE
if (create_plot_files){
png(filename=paste(ma.settings$dir.results, '/', task, "_test_", name, sep=""),
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
time <- getTimeFromPreprocessMatrix(preprocess.mat) - 10.0
plotCompound(time, preprocess.mat[[name]], name, col=ccolors[name], ylim=c(0,2.1))
if (create_plot_files){
dev.off()
}
d800 <- read.table('/home/mkoenig/Desktop/Model-Coupling_Schwen/vascular-tree/transit_times_800')
hist(d800)
head(d800)
d800 <- read.table('/home/mkoenig/Desktop/Model-Coupling_Schwen/vascular-tree/transit_times_800', as.numeric)
d800 <- read.table('/home/mkoenig/Desktop/Model-Coupling_Schwen/vascular-tree/transit_times_800', colClasses=numeric)
d800 <- read.table('/home/mkoenig/Desktop/Model-Coupling_Schwen/vascular-tree/transit_times_800', colClasses=c('numeric'))
head(d800)
hist(d800)
hist(d800$V1)
hist(d800$V1, breaks=20)
hist(d800$V1, breaks=20, xlab=c("time [s]")
hist(d800$V1, breaks=20, xlab=c("time [s]"))
hist(d800$V1, breaks=20, xlab="time [s]")
library(MultiscaleAnalysis)
rm(list=ls())
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
install.packages('matrixStats')
rm(list=ls())
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
sname <- '2014-05-27_Demo'
modelId <- paste('Koenig2014_demo_kinetic_v7')
task <- 'T1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
plotParameterHistogramFull(pars)
pars
head(pars)
plotParameterHistogramFull(pars)
pnames = getParameterNames(pars)
pnames
names(pars)
names(pars)[1]
names(pars)[1][1:3]
sname <- '2014-05-27_Demo'
modelId <- paste('Koenig2014_demo_kinetic_v7')
task <- 'T1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
names(pars)
library(MultiscaleAnalysis)
sname <- '2014-05-11_Demo'
modelVersion <- 'v14_Nc20_Nf1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, 'data')
load_with_sims = FALSE;
task = 'T12'
modelId <- 'Koenig2014_demo_kinetic_v7'
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
sname <- '2014-05-27_Demo'
modelId <- paste('Koenig2014_demo_kinetic_v7')
task <- 'T1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
names(pars)
gsub('X..', '', names(pars))
names(pars) <- gsub('X..', '', names(pars))
names(pars)
library(MultiscaleAnalysis)
rm(list=ls())
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
sname <- '2014-05-27_Demo'
modelId <- paste('Koenig2014_demo_kinetic_v7')
task <- 'T1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
names(pars)
library(MultiscaleAnalysis)
sname <- '2014-05-27_Demo'
modelId <- paste('Koenig2014_demo_kinetic_v7')
task <- 'T1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
names(pars)
plotParameterHistogramFull(pars)
hist(pars$duration)
strptime(pars$duration)
strptime(pars$duration, format="%H:%M:%S")
pars$duration
library(MultiscaleAnalysis)
# install.packages('data.table')
install.packages('matrixStats')
rm(list=ls())
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
sname <- '2014-05-27_Demo'
modelId <- paste('Koenig2014_demo_kinetic_v7')
task <- 'T1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
plotParameterHistogramFull(pars)
# do the preprocessing (here all columns)
# what is written in the CSV?
outFile <- preprocess(parsfile, ma.settings$dir.simdata)
install.packages("matrixStats")
rm(list=ls())
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
sname <- '2014-05-27_Demo'
modelId <- paste('Koenig2014_demo_kinetic_v7')
task <- 'T1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
plotParameterHistogramFull(pars)
# do the preprocessing (here all columns)
# what is written in the CSV?
outFile <- preprocess(parsfile, ma.settings$dir.simdata)
library(MultiscaleAnalysis)
rm(list=ls())
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
sname <- '2014-05-27_Demo'
modelId <- paste('Koenig2014_demo_kinetic_v7')
task <- 'T1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
plotParameterHistogramFull(pars)
# do the preprocessing (here all columns)
# what is written in the CSV?
outFile <- preprocess(parsfile, ma.settings$dir.simdata)
library(MultiscaleAnalysis)
rm(list=ls())
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
sname <- '2014-05-27_Demo'
modelId <- paste('Koenig2014_demo_kinetic_v7')
task <- 'T1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
plotParameterHistogramFull(pars)
# do the preprocessing (here all columns)
# what is written in the CSV?
outFile <- preprocess(parsfile, ma.settings$dir.simdata)
library(MultiscaleAnalysis)
rm(list=ls())
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
sname <- '2014-05-27_Demo'
modelId <- paste('Koenig2014_demo_kinetic_v7')
task <- 'T1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
plotParameterHistogramFull(pars)
# do the preprocessing (here all columns)
# what is written in the CSV?
outFile <- preprocess(parsfile, ma.settings$dir.simdata)
library(MultiscaleAnalysis)
library(MultiscaleAnalysis)
library(MultiscaleAnalysis)
rm(list=ls())
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
sname <- '2014-05-27_Demo'
modelId <- paste('Koenig2014_demo_kinetic_v7')
task <- 'T1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
plotParameterHistogramFull(pars)
# do the preprocessing (here all columns)
# what is written in the CSV?
outFile <- preprocess(parsfile, ma.settings$dir.simdata)
# load the preprocessed data
load(outFile)
preprocess.list[[1]]
head(preprocess.list[[1]])
tmp <- head(preprocess.list[[1]])
plot(tmp$time, tmp$[A_in])
library(MultiscaleAnalysis)
rm(list=ls())
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
sname <- '2014-05-27_Demo'
modelId <- paste('Koenig2014_demo_kinetic_v7')
task <- 'T1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
plotParameterHistogramFull(pars)
# do the preprocessing (here all columns)
# what is written in the CSV?
outFile <- preprocess(parsfile, ma.settings$dir.simdata)
# load the preprocessed data
load(outFile)
tmp <- head(preprocess.list[[1]])
plot(tmp$time, tmp$A_in)
help(gsub)
rm(list=ls())
library(data.table)
library(libSBML)
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
sname <- '2014-05-11_Demo'
modelVersion <- 'v14_Nc20_Nf1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, 'data')
load_with_sims = FALSE;
task = 'T12'
modelId <- 'Koenig2014_demo_kinetic_v7'
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
head(parsfile)
# Load the data
if (load_with_sims == FALSE){
# only load the parameters:
pars <- loadParameterFile(parsfile)
} else {
# preprocessing necessary for loading the data with the parameters
load(file=outfileFromParsFile(parsfile))
}
print(summary(pars))
names(pars)
rm(list=ls())
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
sname <- '2014-05-27_Demo'
modelId <- paste('Koenig2014_demo_kinetic_v7')
task <- 'T1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
plotParameterHistogramFull(pars)
# do the preprocessing (here all columns)
# what is written in the CSV?
outFile <- preprocess(parsfile, ma.settings$dir.simdata)
library(MultiscaleAnalysis)
outFile <- preprocess(parsfile, ma.settings$dir.simdata)
# load the preprocessed data
load(outFile)
tmp <- preprocess.list[1]
head(tmp)
plot(tmp$time, tmp$A_in)
plot(tmp$A_in)
head(tmp)
head(tmp$time)
head(tmp[['time']])
names(tmp)
tmp <- preprocess.list[[1]
head(tmp)
tmp <- preprocess.list[[1]]
head(tmp)
plot(tmp$A_in)
plot(tmp$time, tmp$A_in)
x <- 1:10
y <- rnorm(10)
par(mfrow = c(2,1))
plot(x, y, main = "approx(.) and approxfun(.)")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
plot(tmp$time, tmp$A_in)
x <- 1:10
y <- rnorm(10)
par(mfrow = c(2,1))
plot(x, y, main = "approx(.) and approxfun(.)")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
library(MultiscaleAnalysis)
rm(list=ls())
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
task <- 'T2'
sname <- paste('2014-06-10_', task, sep='')
modelId <- paste('Koenig2014_demo_kinetic_v7')
t.approx <- seq(from=0, to=100, by=0.1)
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
plotParameterHistogramFull(pars)
outFile <- preprocess(parsfile, ma.settings$dir.simdata, time=t.approx)
load(outFile)
outFile <- preprocess(parsfile, ma.settings$dir.simdata, time=t.approx)
rm(list=ls())
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
task <- 'T2'
sname <- paste('2014-06-10_', task, sep='')
modelId <- paste('Koenig2014_demo_kinetic_v7')
t.approx <- seq(from=0, to=100, by=0.1)
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
plotParameterHistogramFull(pars)
library(MultiscaleAnalysis)
outFile <- preprocess(parsfile, ma.settings$dir.simdata, time=t.approx)
outFile <- preprocess(pars, ma.settings$dir.simdata, time=t.approx)
load(outFile)
# Plot all the single curves with mean and std
# They have to be weighted with the actual probability assicociated with the samples.
plotCurve <- function(preprocess.mat, name, sim.indices=NULL){
Nsim <- nrow(data)
time <- preprocess.mat[['time']][,1]
print(time)
data <- preprocess.mat[[name]]
if (!is.null(sim.indices)){
data <- as.matrix(data[,sim.indices])
}
xlim=c(0,25)
ylim=c(min(data), max(data))
plotCompound(time, data, name=name, xlim=xlim, ylim=ylim, weights=NULL, col="black")
plotCompoundMean(time, data, weights=NULL, col="red")
}
# Varied parameters
pnames <- getParameterNames(pars=pars)
# Available columns
cnames <- names(preprocess.mat)
print(cnames)
cnames <- cnames[2:7]
cnames
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', 'Demo_results' , ".png", sep=""),
width = 1200, height = 1200, units = "px", bg = "white",  res = 100)
}
Np = ceiling(sqrt(length(cnames)))
par(mfrow=c(Np,Np))
for (name in cnames){
print(name)
if (name != 'time'){
plotCurve(preprocess.mat, name, sim.indices=NULL)
}
}
par(mfrow=c(1,1))
if (create_plot_files == TRUE){
dev.off()
}
create_plot_files = F
# Create the plot
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', 'Demo_results' , ".png", sep=""),
width = 1200, height = 1200, units = "px", bg = "white",  res = 100)
}
Np = ceiling(sqrt(length(cnames)))
par(mfrow=c(Np,Np))
for (name in cnames){
print(name)
if (name != 'time'){
plotCurve(preprocess.mat, name, sim.indices=NULL)
}
}
par(mfrow=c(1,1))
if (create_plot_files == TRUE){
dev.off()
}
create_plot_files = F
# Plot all the single curves with mean and std
# They have to be weighted with the actual probability assicociated with the samples.
plotCurve <- function(preprocess.mat, name, sim.indices=NULL){
Nsim <- nrow(data)
time <- preprocess.mat[['time']][,1]
data <- preprocess.mat[[name]]
if (!is.null(sim.indices)){
data <- as.matrix(data[,sim.indices])
}
xlim=c(0,25)
ylim=c(min(data), max(data))
plotCompound(time, data, name=name, xlim=xlim, ylim=ylim, weights=NULL, col="black")
plotCompoundMean(time, data, weights=NULL, col="red")
}
# Create the plot
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', 'Demo_results' , ".png", sep=""),
width = 1200, height = 1200, units = "px", bg = "white",  res = 100)
}
Np = ceiling(sqrt(length(cnames)))
par(mfrow=c(Np,Np))
for (name in cnames){
print(name)
if (name != 'time'){
plotCurve(preprocess.mat, name, sim.indices=NULL)
}
}
par(mfrow=c(1,1))
if (create_plot_files == TRUE){
dev.off()
}
library('ggplot2')
install.package('ggplot2')
package.install('ggplot2')
install.packages('ggplot2')
install.packages('ggplot')
install.packages('ggplot2')
install.packages('ggplot2')
library('ggplot2')
library('ggplot2')
str(mpg)
qplot(displ, hwy, data=mpg)
?str
qplot(displ, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth")
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"))
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"))
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets= .~drv)
qplot(hwy, data=mpg, facets= drv~., binwidth=2)
head(mpg)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
p <- g + geom_point()
print(p)
g + geom_point()
g + geom_line()
g + geom_bar()
g + geom_points()
g + geom_points()
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method='lm')
(.~drv)
g + geom_point() + geom_smooth(method='lm') + facet_grid(.~drv)
g + geom_point() + geom_smooth(method='lm') + facet_grid(drv~.)
) + geom_smooth(method='lm') + facet_grid(drv~.)
g + geom_point(color="steelblue", size=4, alpha=1/2) + geom_smooth(method='lm') + facet_grid(drv~.)
g + geom_point(aes(color=drv), size=4, alpha=1/2) + geom_smooth(method='lm')
g + geom_point(aes(color=drv), size=4, alpha=1/2) + geom_smooth(method='lm') + labs(title = "MAACS Cohort")
g + geom_point(aes(color=drv), size=4, alpha=1/2) + geom_smooth(method='lm') + labs(title = "MAACS Cohort") + labs(x='Nocturnal Symptoms')
g + geom_point(color="steelblue", size=4, alpha=1/2) + geom_smooth(method='lm') + theme_bw()
g + geom_point(color="steelblue", size=4, alpha=1/2) + geom_smooth(method='lm') + theme_bw() + coord_cartesian(ylim=c(15, 35))
install.packages('gcookbook')
