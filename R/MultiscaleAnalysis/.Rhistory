sex=sex, age=age, bodyweight=bodyweight, volLiver=volLiver) )
}
################################################################################
# Rejection sampling of f_d
################################################################################
# Sampling from distributions via rejection sampling of good guess of
# probability distribution.
f_d.rejection_sample <- function(f_d, Nsim, interval){
# find maximum value
#   f_d.max_x <- optimize(f_d, interval=interval, maximum=TRUE)$maximum
#   f_d.max_y <- f_d(f_d.max_x)
#  factor 10 faster:
x = seq(from=interval[1], to=interval[2], length.out=400)
y = f_d(x)
ind.max <- which.max(y)
x.max <- x[ind.max]
y.max <- y[ind.max]
# estimation of sd via half maximal values
# f_d.half <- function(x){f_d(x)-0.5*f_d.max_y}
# f_d.half_x1 <- uniroot(f_d.half, interval=c(interval[1], f_d.max_x))$root
# f_d.half_x2 <- uniroot(f_d.half, interval=c(f_d.max_x, interval[2]))$root
# sd <- max(f_d.max_x-f_d.half_x1, f_d.half_x2-f_d.max_x)
ind.sdleft <- tail(which(y[1:ind.max]<=0.5*y.max),1)
ind.sdright <- which(y[ind.max:length(y)]<=0.5*y.max)[1] + ind.max -1
sd.left <- x.max - x[ind.sdleft]
sd.right <- x[ind.sdright]-x.max
sd <- max(sd.left, sd.right)
# sample within 3*sds in the provided interval
# s.interval = c(max(interval[1], x.max-3*sd), min(interval[2], x.max+3*sd))
# normalization constant for rejection sampling,
# so that the second function is above the sample function
m <- 1.1 * y.max / (1/(sd*sqrt(2*pi)))
funct1 <- function(x) {m*dnorm(x, mean=x.max, sd=sd)}
# rejection sampling
values <- NULL
while(length(values) < Nsim){
x <- rnorm(n=Nsim*2, mean=x.max, sd=sd)
x <- x[x>0]   # guarantee that > 0, otherwise the f_d will break
u <- runif(n=length(x))
ratio <- f_d(x)/funct1(x)
ind <- I(u<ratio)
values <- c(values, x[ind==1])
}
values = values[1:Nsim]
return(list(values=values, f_d=f_d, funct1=funct1) )
}
# sex='male'; age=50; bodyweight=80; height=175; BSA=1.9;
# ptm <- proc.time()
# f_d1 <- f_d.volLiver.c(sex=sex, age=age, bodyweight=bodyweight,
#                         height=height, BSA=BSA)
# proc.time() - ptm
#
# # rm(list=ls())
# ptm <- proc.time()
# rs2 <- f_d.rejection_sample(f_d1$f_d, Nsim=500, interval=c(1, 4000))
# proc.time() - ptm
#
#
# # normalization for plots
# A <- integrate(f=f_d1$f_d, lower=1000, upper=3000)
# A$value
# plot(1:3000, 1/A$value*f_d1$f_d(1:3000), col='red')
# hist(rs2$values, add=TRUE, freq=FALSE, breaks=10)
#
# hist(rs2$values, freq=FALSE, breaks =10)
# points(1:3000, f_d1$f_d(1:3000), col='red')
#
# ptm <- proc.time()
# f_d1$f_d(1:1000)
# proc.time() - ptm
#
# library(profr)
# p <- profr(
#   f_d.rejection_sample(f_d1$f_d, Nsim=10, interval=c(1, 4000)),
#   0.01
# )
# plot(p)
################################################################################
# Prediction function for liver volume and blood flow
################################################################################
# Combined prediction of liver volume and
predict_liver_person <- function(person, Nsample){
# individual combined probability density for liver volume
f_d1 <- f_d.volLiver.c(sex=person$sex, age=person$age, bodyweight=person$bodyweight,
height=person$height, BSA=person$BSA)
# rejection sampling of liver volume
rs1 <- f_d.rejection_sample(f_d1$f_d, Nsim=Nsample, interval=c(1, 4000))
volLiver <- rs1$values
# now for ever liver volume the blood flow
# individual combined probability density for blood flow
flowLiver = rep(NA, Nsample)
for (i in 1:Nsample){
f_d2 <- f_d.flowLiver.c(sex=person$sex, age=person$age, bodyweight=person$bodyweight,
height=person$height, BSA=person$BSA, volLiver=volLiver[i])
rs2 <- f_d.rejection_sample(f_d2$f_d, Nsim=1, interval=c(1, 4000))
flowLiver[i] <- rs2$values[1]
}
return(list(volLiver=volLiver, flowLiver=flowLiver))
}
# predict_liver_person(person=nhanes[1,], Nsample=3)
predict_liver_people <- function(people, Nsample, Ncores=1){
names <- colnames(people)
if( !("sex" %in% names)) {warning("sex missing in data")}
if( !("age" %in% names)) {warning("age missing in data")}
if( !("bodyweight" %in% names)) {warning("bodyweight missing in data")}
if( !("height" %in% names)) {warning("height missing in data")}
if( !("BSA" %in% names)) {warning("BSA missing in data")}
# create empty matrix
Np = nrow(people)
volLiver <- matrix(NA, nrow=Np, ncol=Nsample)
flowLiver <- matrix(NA, nrow=Np, ncol=Nsample)
workerFunc <- function(i){
predict_liver_person(people[i, ], Nsample)
}
if (Ncores == 1){
for (k in 1:Np){
# ptm <- proc.time()
# cat(k, '\n')
res <- workerFunc(k)
volLiver[k, ] <- res$volLiver
flowLiver[k, ] <- res$flowLiver
# time <- proc.time() - ptm
# print(time)
}
} else {
res <- mclapply(1:Np, workerFunc, mc.cores=Ncores)
for (k in 1:Np){
volLiver[k, ] <- res[[k]]$volLiver
flowLiver[k, ] <- res[[k]]$flowLiver
}
}
return(list(volLiver=volLiver, flowLiver=flowLiver))
}
# library(parallel)
load(file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_data.Rdata'))
nhanes <- data[, c('SEQN', 'sex', 'bodyweight', 'age', 'height', 'BSA')]
rm(data)
head(nhanes)
predict_liver_people <- function(people, Nsample, Ncores=1){
names <- colnames(people)
if( !("sex" %in% names)) {warning("sex missing in data")}
if( !("age" %in% names)) {warning("age missing in data")}
if( !("bodyweight" %in% names)) {warning("bodyweight missing in data")}
if( !("height" %in% names)) {warning("height missing in data")}
if( !("BSA" %in% names)) {warning("BSA missing in data")}
# create empty matrix
Np = nrow(people)
volLiver <- matrix(NA, nrow=Np, ncol=Nsample)
flowLiver <- matrix(NA, nrow=Np, ncol=Nsample)
workerFunc <- function(i){
predict_liver_person(people[i, ], Nsample)
}
if (Ncores == 1){
for (k in 1:Np){
# ptm <- proc.time()
# cat(k, '\n')
res <- workerFunc(k)
volLiver[k, ] <- res$volLiver
flowLiver[k, ] <- res$flowLiver
# time <- proc.time() - ptm
# print(time)
}
} else {
library(parallel)
res <- mclapply(1:Np, workerFunc, mc.cores=Ncores)
for (k in 1:Np){
volLiver[k, ] <- res[[k]]$volLiver
flowLiver[k, ] <- res[[k]]$flowLiver
}
}
return(list(volLiver=volLiver, flowLiver=flowLiver))
}
# library(parallel)
load(file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_data.Rdata'))
nhanes <- data[, c('SEQN', 'sex', 'bodyweight', 'age', 'height', 'BSA')]
rm(data)
head(nhanes)
## predict liver volume and blood flow ##
set.seed(12345)
ptm <- proc.time()
liver.info <- predict_liver_people(nhanes[1:5, ], 5)
proc.time() - ptm
ptm <- proc.time()
liver.info <- predict_liver_people(nhanes[1:5, ], 5, Ncores=4)
proc.time() - ptm
## predict liver volume and blood flow ##
set.seed(12345)
cat('# serial #\n')
ptm <- proc.time()
liver.info <- predict_liver_people(nhanes[1:5, ], 50)
proc.time() - ptm
cat('# parallel #\n')
ptm <- proc.time()
liver.info <- predict_liver_people(nhanes[1:5, ], 50, Ncores=12)
proc.time() - ptm
################################################################################
rm(list=ls())
setwd(ma.settings$dir.base)
source(file.path(ma.settings$dir.code, 'analysis', 'GAMLSS_predict_functions.R'))
##############################################################################
# Predict NHANES
##############################################################################
load(file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_data.Rdata'))
nhanes <- data[, c('SEQN', 'sex', 'bodyweight', 'age', 'height', 'BSA')]
rm(data)
head(nhanes)
## predict liver volume and blood flow ##
cat('# parallel #\n')
set.seed(12345)
ptm <- proc.time()
liver.info <- predict_liver_people(nhanes[1:5, ], 1, Ncores=11)
proc.time() - ptm
nhanes$volLiver <- liver.info$volLiver
nhanes$flowLiver <- liver.info$flowLiver
save('nhanes', file=ma.settings$dir.base, 'results', 'nhanes', 'nhanes_liver.Rdata'))
load(file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_data.Rdata'))
nhanes <- data[, c('SEQN', 'sex', 'bodyweight', 'age', 'height', 'BSA')]
rm(data)
head(nhanes)
## predict liver volume and blood flow ##
set.seed(12345)
cat('# serial #\n')
ptm <- proc.time()
liver.info <- predict_liver_people(nhanes[1:5, ], 1)
proc.time() - ptm
cat('# parallel #\n')
ptm <- proc.time()
liver.info <- predict_liver_people(nhanes[1:5, ], 1, Ncores=12)
proc.time() - ptm
ptm <- proc.time()
liver.info <- predict_liver_people(nhanes[1:5, ], 1, Ncores=11)
proc.time() - ptm
rm(list=ls())
setwd(ma.settings$dir.base)
source(file.path(ma.settings$dir.code, 'analysis', 'GAMLSS_predict_functions.R'))
##############################################################################
# Predict NHANES
##############################################################################
load(file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_data.Rdata'))
nhanes <- data[, c('SEQN', 'sex', 'bodyweight', 'age', 'height', 'BSA')]
rm(data)
head(nhanes)
## predict liver volume and blood flow ##
cat('# parallel #\n')
set.seed(12345)
ptm <- proc.time()
liver.info <- predict_liver_people(nhanes[1:5, ], 1, Ncores=11)
proc.time() - ptm
nhanes$volLiver <- liver.info$volLiver
nhanes$flowLiver <- liver.info$flowLiver
save('nhanes', file=file.path(sma.settings$dir.base, 'results', 'nhanes', 'nhanes_liver.Rdata'))
liver.info$volLiver
rm(list=ls())
setwd(ma.settings$dir.base)
source(file.path(ma.settings$dir.code, 'analysis', 'GAMLSS_predict_functions.R'))
##############################################################################
# Predict NHANES
##############################################################################
load(file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_data.Rdata'))
nhanes <- data[, c('SEQN', 'sex', 'bodyweight', 'age', 'height', 'BSA')]
rm(data)
head(nhanes)
## predict liver volume and blood flow ##
cat('# parallel #\n')
set.seed(12345)
ptm <- proc.time()
liver.info <- predict_liver_people(nhanes, 1, Ncores=11)
proc.time() - ptm
nhanes$volLiver <- liver.info$volLiver
nhanes$flowLiver <- liver.info$flowLiver
save('nhanes', file=file.path(sma.settings$dir.base, 'results', 'nhanes', 'nhanes_liver.Rdata'))
liver.info
liver.info <- predict_liver_people(nhanes[1:5,], 1, Ncores=11)
cat('# parallel #\n')
set.seed(12345)
ptm <- proc.time()
liver.info <- predict_liver_people(nhanes[1:5,], 1, Ncores=11)
proc.time() - ptm
liver.info
nhanes$volLiver <- liver.info$volLiver
nhanes$flowLiver <- liver.info$flowLiver
rm(list=ls())
setwd(ma.settings$dir.base)
source(file.path(ma.settings$dir.code, 'analysis', 'GAMLSS_predict_functions.R'))
##############################################################################
# Predict NHANES
##############################################################################
load(file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_data.Rdata'))
nhanes <- data[, c('SEQN', 'sex', 'bodyweight', 'age', 'height', 'BSA')]
rm(data)
head(nhanes)
## predict liver volume and blood flow ##
cat('# parallel #\n')
set.seed(12345)
ptm <- proc.time()
# liver.info <- predict_liver_people(nhanes[1:5,], 1, Ncores=11)
liver.info <- predict_liver_people(nhanes, 1, Ncores=11)
proc.time() - ptm
#liver.info
nhanes$volLiver <- liver.info$volLiver
nhanes$flowLiver <- liver.info$flowLiver
save('nhanes', file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_liver.Rdata'))
head(nhanes)
plot(nhanes$age, nhanes$flowLiver)
plot(nhanes$age, nhanes$volLiver, cex=0.3, pch=21)
rm(list=ls())
setwd(ma.settings$dir.base)
source(file.path(ma.settings$dir.code, 'analysis', 'GAMLSS_predict_functions.R'))
##############################################################################
# Predict NHANES
##############################################################################
load(file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_data.Rdata'))
nhanes <- data[, c('SEQN', 'sex', 'bodyweight', 'age', 'height', 'BSA')]
rm(data)
head(nhanes)
## predict liver volume and blood flow ##
cat('# parallel #\n')
set.seed(12345)
ptm <- proc.time()
# liver.info <- predict_liver_people(nhanes[1:5,], 20, Ncores=1)
liver.info <- predict_liver_people(nhanes, 1, Ncores=11)
proc.time() - ptm
#liver.info
nhanes$volLiver <- liver.info$volLiver
nhanes$flowLiver <- liver.info$flowLiver
save('nhanes', file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_liver.Rdata'))
nrows(nhanes)
nrow(nhanes)
libary('MultiscaleAnalysis')
library('MultiscaleAnalysis')
################################################################################
# NHANES prediction
################################################################################
# Predicts the liver volumes, blood flows and metabolic functions for the
# NHANES cohort.
#
# author: Matthias Koenig
# date: 2014-11-29
################################################################################
rm(list=ls())
library('MultiscaleAnalysis')
setwd(ma.settings$dir.base)
source(file.path(ma.settings$dir.code, 'analysis', 'GAMLSS_predict_functions.R'))
##############################################################################
# Predict NHANES
##############################################################################
load(file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_data.Rdata'))
nhanes <- data[, c('SEQN', 'sex', 'bodyweight', 'age', 'height', 'BSA')]
nhanes$volLiver <- NA
nhanes$volLiverkg <- NA
rm(data)
head(nhanes)
## predict liver volume and blood flow ##
cat('# parallel #\n')
set.seed(12345)
ptm <- proc.time()
# liver.info <- predict_liver_people(nhanes[1:20,], 1000, Ncores=4)
liver.info <- predict_liver_people(nhanes[1:5,], 1000, Ncores=11)
proc.time() - ptm
save('nhanes', 'liver.info', file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_liver.Rdata'))
## Calculate GEC and GECkg for nhanes ##
# GEC <- calculate_GEC(nhanes$volLiver, nhanes$flowLiver)
# nhanes$GEC <- GEC$GEC
# head(nhanes)
# nhanes$GECkg <- nhanes$GEC/nhanes$bodyweight
# save('nhanes', file='nhanes_liverData_GEC.Rdata')
#########################
# head(nhanes)
# plot(nhanes$age, nhanes$flowLiver)
# plot(nhanes$age, nhanes$volLiver, cex=0.3, pch=21)
#
# plot(liver.info$volLiver[1,], liver.info$flowLiver[1,], xlim=c(0,2000), ylim=c(0,2000), cex=0.2)
# points(liver.info$volLiver[2,], liver.info$flowLiver[2,], xlim=c(0,2000), ylim=c(0,2000), cex=0.2, col='red')
# boxplot(t(liver.info$volLiver))
# still too slow
# ptm <- proc.time()
# f_d1 <- f_d.volLiver.c(sex=nhanes$sex[2], age=nhanes$age[2], bodyweight=nhanes$bodyweight[2],
#                        height=nhanes$height[2], BSA=nhanes$BSA[2])
# proc.time() - ptm
#
# library(profr)
# p <- profr(
#    f_d.volLiver.c(sex=nhanes$sex[2], age=nhanes$age[2], bodyweight=nhanes$bodyweight[2],
#                  height=nhanes$height[2], BSA=nhanes$BSA[2]),
#    0.01
# )
# plot(p)
# load(file='nhanes_liverData.Rdata')
# head(nhanes)
#
# ##  Some control plots
# I.male <- (nhanes$sex=='male')
# I.female <- (nhanes$sex=='female')
#
# par(mfrow=c(2,2))
# plot(nhanes$age[I.male], GEC$GEC[I.male], col='blue', cex=0.3, ylim=c(0,6))
# plot(nhanes$age[I.female], GEC$GEC[I.female], col='red', cex=0.3, ylim=c(0,6))
# plot(nhanes$age[I.male], GEC$GEC[I.male]/nhanes$bodyweight[I.male], col='blue', cex=0.3, ylim=c(0,0.1))
# plot(nhanes$age[I.female], GEC$GEC[I.female]/nhanes$bodyweight[I.female], col='red', cex=0.3, ylim=c(0,0.1))
# par(mfrow=c(1,1))
#
# m <- models.flowLiver_volLiver$fit.all
# df.all <- models.flowLiver_volLiver$df.all
# plotCentiles(model=m, d=df.all, xname='volLiver', yname='flowLiver',
#              main='Test', xlab='liver volume', ylab='liver bloodflow', xlim=c(0,3000), ylim=c(0,3000),
#              pcol='blue')
# points(nhanes$volLiver[nhanes$sex=='female'], nhanes$flowLiver[nhanes$sex=='female'], xlim=c(0,3000), ylim=c(0,2500), col='red', cex=0.2)
# points(nhanes$volLiver[nhanes$sex=='male'], nhanes$flowLiver[nhanes$sex=='male'], xlim=c(0,3000), ylim=c(0,2500), col='black', cex=0.2)
#
# plotCentiles(model=m, d=df.all, xname='volLiver', yname='flowLiver',
#              main='Test', xlab='liver volume', ylab='liver bloodflow', xlim=c(0,3000), ylim=c(0,3000),
#              pcol='blue')
# points(nhanes$volLiver[nhanes$age>18], nhanes$flowLiver[nhanes$age>18], xlim=c(0,3000), ylim=c(0,2500), col='black', cex=0.2)
#
#
# plot(nhanes$age[nhanes$sex=='female'], nhanes$volLiver[nhanes$sex=='female'], xlim=c(0,100), ylim=c(0,2500), col='red', cex=0.2)
# points(nhanes$age[nhanes$sex=='male'], nhanes$volLiver[nhanes$sex=='male'], xlim=c(0,100), ylim=c(0,2500), col='blue', cex=0.2)
#
# plot(nhanes$age[nhanes$sex=='female'], nhanes$flowLiver[nhanes$sex=='female'], xlim=c(0,100), ylim=c(0,2500), col='red', cex=0.2)
# points(nhanes$age[nhanes$sex=='male'], nhanes$flowLiver[nhanes$sex=='male'], xlim=c(0,100), ylim=c(0,2500), col='blue', cex=0.2)
# }
################################################################################
# NHANES prediction
################################################################################
# Predicts the liver volumes, blood flows and metabolic functions for the
# NHANES cohort.
#
# author: Matthias Koenig
# date: 2014-11-29
################################################################################
rm(list=ls())
library('MultiscaleAnalysis')
setwd(ma.settings$dir.base)
source(file.path(ma.settings$dir.code, 'analysis', 'GAMLSS_predict_functions.R'))
##############################################################################
# Predict NHANES
##############################################################################
load(file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_data.Rdata'))
nhanes <- data[, c('SEQN', 'sex', 'bodyweight', 'age', 'height', 'BSA')]
nhanes$volLiver <- NA
nhanes$volLiverkg <- NA
rm(data)
head(nhanes)
## predict liver volume and blood flow ##
cat('# parallel #\n')
set.seed(12345)
ptm <- proc.time()
# liver.info <- predict_liver_people(nhanes[1:20,], 1000, Ncores=4)
liver.info <- predict_liver_people(nhanes[1:5,], 1000, Ncores=1)
proc.time() - ptm
save('nhanes', 'liver.info', file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_liver.Rdata'))
## Calculate GEC and GECkg for nhanes ##
# GEC <- calculate_GEC(nhanes$volLiver, nhanes$flowLiver)
# nhanes$GEC <- GEC$GEC
# head(nhanes)
# nhanes$GECkg <- nhanes$GEC/nhanes$bodyweight
# save('nhanes', file='nhanes_liverData_GEC.Rdata')
#########################
# head(nhanes)
# plot(nhanes$age, nhanes$flowLiver)
# plot(nhanes$age, nhanes$volLiver, cex=0.3, pch=21)
#
# plot(liver.info$volLiver[1,], liver.info$flowLiver[1,], xlim=c(0,2000), ylim=c(0,2000), cex=0.2)
# points(liver.info$volLiver[2,], liver.info$flowLiver[2,], xlim=c(0,2000), ylim=c(0,2000), cex=0.2, col='red')
# boxplot(t(liver.info$volLiver))
# still too slow
# ptm <- proc.time()
# f_d1 <- f_d.volLiver.c(sex=nhanes$sex[2], age=nhanes$age[2], bodyweight=nhanes$bodyweight[2],
#                        height=nhanes$height[2], BSA=nhanes$BSA[2])
# proc.time() - ptm
#
# library(profr)
# p <- profr(
#    f_d.volLiver.c(sex=nhanes$sex[2], age=nhanes$age[2], bodyweight=nhanes$bodyweight[2],
#                  height=nhanes$height[2], BSA=nhanes$BSA[2]),
#    0.01
# )
# plot(p)
# load(file='nhanes_liverData.Rdata')
# head(nhanes)
#
# ##  Some control plots
# I.male <- (nhanes$sex=='male')
# I.female <- (nhanes$sex=='female')
#
# par(mfrow=c(2,2))
# plot(nhanes$age[I.male], GEC$GEC[I.male], col='blue', cex=0.3, ylim=c(0,6))
# plot(nhanes$age[I.female], GEC$GEC[I.female], col='red', cex=0.3, ylim=c(0,6))
# plot(nhanes$age[I.male], GEC$GEC[I.male]/nhanes$bodyweight[I.male], col='blue', cex=0.3, ylim=c(0,0.1))
# plot(nhanes$age[I.female], GEC$GEC[I.female]/nhanes$bodyweight[I.female], col='red', cex=0.3, ylim=c(0,0.1))
# par(mfrow=c(1,1))
#
# m <- models.flowLiver_volLiver$fit.all
# df.all <- models.flowLiver_volLiver$df.all
# plotCentiles(model=m, d=df.all, xname='volLiver', yname='flowLiver',
#              main='Test', xlab='liver volume', ylab='liver bloodflow', xlim=c(0,3000), ylim=c(0,3000),
#              pcol='blue')
# points(nhanes$volLiver[nhanes$sex=='female'], nhanes$flowLiver[nhanes$sex=='female'], xlim=c(0,3000), ylim=c(0,2500), col='red', cex=0.2)
# points(nhanes$volLiver[nhanes$sex=='male'], nhanes$flowLiver[nhanes$sex=='male'], xlim=c(0,3000), ylim=c(0,2500), col='black', cex=0.2)
#
# plotCentiles(model=m, d=df.all, xname='volLiver', yname='flowLiver',
#              main='Test', xlab='liver volume', ylab='liver bloodflow', xlim=c(0,3000), ylim=c(0,3000),
#              pcol='blue')
# points(nhanes$volLiver[nhanes$age>18], nhanes$flowLiver[nhanes$age>18], xlim=c(0,3000), ylim=c(0,2500), col='black', cex=0.2)
#
#
# plot(nhanes$age[nhanes$sex=='female'], nhanes$volLiver[nhanes$sex=='female'], xlim=c(0,100), ylim=c(0,2500), col='red', cex=0.2)
# points(nhanes$age[nhanes$sex=='male'], nhanes$volLiver[nhanes$sex=='male'], xlim=c(0,100), ylim=c(0,2500), col='blue', cex=0.2)
#
# plot(nhanes$age[nhanes$sex=='female'], nhanes$flowLiver[nhanes$sex=='female'], xlim=c(0,100), ylim=c(0,2500), col='red', cex=0.2)
# points(nhanes$age[nhanes$sex=='male'], nhanes$flowLiver[nhanes$sex=='male'], xlim=c(0,100), ylim=c(0,2500), col='blue', cex=0.2)
# }
