tmp <- pars[, name] *p.gen[name, 'scale_fac']
hpars <- hist(tmp, plot=FALSE, breaks=20)
plot(hpars, col=histcp, freq=FALSE, add=T)
}
plotLogNormalDistribution(p.gen, name, maxvalue=3.0)
legend("topright",  legend = c('Simulation'), fill=c(histcp))
if (create_plot_files){
dev.off()
}
## y_sin ##
name = 'L'
if (create_plot_files == TRUE){
fname <- file.path(dir_out, paste('distribution_', name, '.png', sep=""))
png(filename=fname, width=plot.width, height=plot.height, units=plot.units, bg=plot.bg, res=plot.res)
}
plot(numeric(0), numeric(0),  main="Sinusoidal length",
xlab=xlabByName(p.gen, name), ylab=ylabByName(p.gen, name),
xlim=c(0, 1000), ylim=c(0, 0.005))
if (exists('pars')){
# add the parameter hist
tmp <- pars[, name] *p.gen[name, 'scale_fac']
hpars <- hist(tmp, plot=FALSE, breaks=20)
plot(hpars, col=histcp, freq=FALSE, add=T)
}
# add distribution
plotLogNormalDistribution(p.gen, name, maxvalue=1000)
legend("topright",  legend = c('Simulation'), fill=c(histcp))
if (create_plot_files){
dev.off()
}
par(mfrow=c(1,2))
folder <- '2014-12-17_T19'
info <- process_folder_info(folder)
res <- calculate_GEC_curves(folder, force=FALSE, B=10)
GEC_f <- GEC_functions(task=info$task)
plot_GEC_function(GEC_f)
names(GEC_f)
GEC_f$d.mean[, c('f_flow', 'Q_per_vol_units')]
folder <- '2014-12-17_T20'
info <- process_folder_info(folder)
res <- calculate_GEC_curves(folder, force=FALSE, B=10)
GEC_f <- GEC_functions(task=info$task)
plot_GEC_function(GEC_f)
par(mfrow=c(1,1))
library('MultiscaleAnalysis')
setwd(ma.settings$dir.base)
rm(list=ls())
library('MultiscaleAnalysis')
setwd(ma.settings$dir.base)
res <- calculate_GEC_curves(folder, force=FALSE, B=10)
par(mfrow=c(1,2))
folder <- '2014-12-17_T19'
info <- process_folder_info(folder)
res <- calculate_GEC_curves(folder, force=FALSE, B=10)
calculate_GEC_curves <- function(folder, t_peak=2000, t_end=10000,
#factors=c('f_flow', "gal_challenge", "N_fen", 'scale_f'),
factors=c('f_flow', "N_fen", 'scale_f'),
force=FALSE, B=1000){
# Process the integration time curves
processed <- preprocess_task(folder=folder, force=force)
# Calculate the galactose clearance parameters
parscl <- extend_with_galactose_clearance(processed=processed, t_peak, t_end=t_end)
# Perform analysis split by factors.
# Generates the necessary data points for the interpolation of the GEC
# curves and creates an estimate of error via bootstrap.
cat('Calculate mean GEC\n')
d.mean <- ddply(parscl, factors, f_integrate_GEC)
cat('Calculate se GEC (bootstrap)\n')
d.se <- ddply(parscl, factors, f_integrate_GEC_bootstrap, funct=sd, B=B)
# save the GEC curves
GEC_curves <- list(d.mean=d.mean, d.se=d.se)
GEC.file <- GEC_curve_file(processed$info[['task']])
cat(GEC.file, '\n')
save('parscl', 'GEC_curves', file=GEC.file)
return( list(parscl=parscl, GEC_curves=GEC_curves, GEC.file=GEC.file) )
}
par(mfrow=c(1,2))
folder <- '2014-12-17_T19'
info <- process_folder_info(folder)
res <- calculate_GEC_curves(folder, force=FALSE, B=10)
GEC_f <- GEC_functions(task=info$task)
plot_GEC_function(GEC_f)
names(GEC_f)
GEC_f$d.mean[, c('f_flow', 'Q_per_vol_units')]
folder <- '2014-12-17_T20'
info <- process_folder_info(folder)
res <- calculate_GEC_curves(folder, force=FALSE, B=10)
GEC_f <- GEC_functions(task=info$task)
plot_GEC_function(GEC_f)
par(mfrow=c(1,1))
head(res)
source('~/multiscale-galactose/R/MultiscaleAnalysis/R/GEC_functions.R')
rm(list=ls())
par(mfrow=c(1,2))
folder <- '2014-12-17_T17'
info <- process_folder_info(folder)
res <- calculate_GEC_curves(folder, force=FALSE, B=10)
GEC_f <- GEC_functions(task=info$task)
plot_GEC_function(GEC_f)
names(GEC_f)
GEC_f$d.mean[, c('f_flow', 'Q_per_vol_units')]
folder <- '2014-12-17_T18'
info <- process_folder_info(folder)
res <- calculate_GEC_curves(folder, force=FALSE, B=10)
head(res)
GEC_f <- GEC_functions(task=info$task)
plot_GEC_function(GEC_f)
par(mfrow=c(1,1))
0.0024*1500
d.mean <- GEC_f$d.mean
p1 <- ggplot(d.mean, aes(f_flow, R_per_vol_units*1500)) + geom_point() + geom_line() + facet_grid(~ scale_f)
p2 <- ggplot(d.mean, aes(f_flow, Q_per_vol_units)) + geom_point() + geom_line() + facet_grid(~ scale_f)
p3 <- ggplot(d.mean, aes(Q_per_vol_units, R_per_vol_units*1500)) + geom_point() + geom_line()+ ylim(0,5) +facet_grid(~ scale_f)
multiplot(p1, p2, p3, cols=3)
rm(list=ls())
library('MultiscaleAnalysis')
setwd(ma.settings$dir.base)
dir_out <- file.path(ma.settings$dir.base, 'results', 'dilution')
folder <- '2014-12-17_T20'         # Multiple indicator data
t_peak <- 5000; t_end <- 10000    # [s] peak start time & total simulation time
# Focus on interesting time for analysis
time = seq(from=t_peak-5, to=t_peak+50, by=0.05)   # approximation time for plot
info <- process_folder_info(folder)
p <- preprocess_task(folder=folder, force=FALSE)
pars <- p$pars
sim_ids <- rownames(pars)
# Species in the dilution curves
compounds = c('gal', 'galM', 'rbcM', 'alb', 'suc', 'h2oM')
ccolors = c('gray', 'black', 'red', 'darkgreen', 'darkorange', 'darkblue')
ids <- c( paste(rep('PP__', length(compounds)), compounds, sep=''),
paste(rep('PV__', length(compounds)), compounds, sep=''))
ccolors <- c(ccolors, ccolors)
names(ccolors) <- ids
# Variation of background galactose levels for given tracer
# Constant injection was used to reach various steady state levels of galactose.
f.level = "PP__gal"
gal_levels <- levels(as.factor(pars[[f.level]]))
cat('Galactose levels: ', gal_levels, '\n')
# Create approximation matrices based on time courses
# Dilution curves were simulated under varying flow conditions.
dlist <- createApproximationMatrix(p$x, ids=ids, simIds=sim_ids, points=time, reverse=FALSE)
# split ids on the factors
factors=c('f_flow', "N_fen", 'scale_f')
get_split_sims <- function(pars){
paste('Sim', pars$sim, sep="")
}
split_sims <- dlply(pars, factors, get_split_sims)
split_info <- attr(split_sims, "split_labels")
split_info
# For one condition and compound all the individual timecurves are plotted.
pv_compounds = paste('PV__', compounds, sep='')
plot_compounds = pv_compounds[2:length(pv_compounds)] # don't plot PV__gal
f_flow = 0.4    # correction of flow from liver to tissue
time.rel <- time-t_peak
weights <- pars$Q_sinunit   # weighting with volume flow
create_plots = TRUE
for (gal in gal_levels){
fname <- file.path(dir_out, sprintf('MultipleIndicator_Individual_%s_gal%s.png', info$task, gal))
startDevPlot(width=2000, height=500, file=fname, create_plots=create_plots)
# Subset corresponding to flow & galactose background
inds = (pars$f_flow == f_flow & pars$PP__gal == gal)
# create figure for every gal challenge
par(mfrow=c(1,length(plot_compounds)) )
for (name in plot_compounds){
plot(numeric(0), numeric(0), type='n',
main=name, xlab="time [s]", ylab="c [mM]",
xlim=range(time.rel), ylim=c(0.0, 1.0))
plot_compound_curves(time=time.rel, data=dlist[[name]][, inds], weights=pars$Q_sinunit[inds],
col=rgb(0.5,0.5,0.5, alpha=0.2))
plot_compound_mean(time=time.rel, data=as.matrix(dlist[[name]][, inds]), weights=pars$Q_sinunit[inds],
col=ccolors[name])
}
par(mfrow=c(1,1))
stopDevPlot(create_plots=create_plots)
}
# Create dilution plots of mean curves
# The individual dilution curves are weighted with the volume flow of the
# respective sinusoidal units.
plot_mean_curves <- function(dlist, pars, subset, f.level, compounds, ccolors, scale=1.0, time_shift=0.0, std=TRUE){
weights <- pars$Q_sinunit
for (kc in seq(length(compounds))){
compound <- compounds[kc]
col <- ccolors[kc]
id <- paste('PV__', compound, sep='')
# different levels
plot.levels <- levels(as.factor(pars[[f.level]]))
for (p.level in plot.levels){
# get subset of data belonging to galactose level and the subset
sim_rows <- intersect(which(pars[[f.level]]==p.level), which(rownames(pars) %in% subset))
# cat('Simulation rows:', sim_rows, pars$sim[sim_rows], '\n')
w <- weights[sim_rows]
data <- scale * as.matrix(dlist[[id]][ ,sim_rows])
time = as.numeric(rownames(data))-t_peak + time_shift
plot_compound_mean(time=time, data=data, weights=w, col=col, std=std)
}
}
}
subset = split_sims[[which(split_info$f_flow==0.4)]]
scale = 1.0
par(mfrow=c(2,1))
time.range <- c(0, 30)
# normal plot
plot(numeric(0), numeric(0), xlim=time.range, ylim=c(0,0.4*scale), type='n',
main='Dilution Curves', xlab="Time [s]", ylab="Concentration [ml]")
plot_mean_curves(dlist, pars, subset, f.level, compounds, ccolors, scale=scale, std=FALSE)
# log plot
plot(numeric(0), numeric(0), log='y', xlim=time.range, ylim=c(1E-3,0.4*scale),
main='Log Dilution Curves', xlab="Time [s]", ylab="Concentration [ml]")
plot_mean_curves(dlist, pars, subset, f.level, compounds, ccolors, scale=scale)
legend("topright",  legend=compounds, fill=ccolors)
par(mfrow=c(1,1))
d <- read.csv(file.path(ma.settings$dir.base, "results", "dilution", "Goresky_processed.csv"), sep="\t")
expcompounds = c('galactose', 'RBC', 'albumin', 'sucrose', 'water')
expcolors = c('black', 'red', 'darkgreen', 'darkorange', 'darkblue')
# normal plot experimental data
plot(numeric(0), numeric(0), type='n',
xlim=c(0,25), ylim=c(0,16),
xlab="time [s]", ylab="10^3 x outflow fraction/ml", main="Goresky1973 & 1983")
plotDilutionData(d[d$study=="gor1983",], expcompounds, expcolors)
plotDilutionData(d[d$study=="gor1973" & d$condition=="A",], expcompounds, expcolors)
plotDilutionData(d[d$study=="gor1973" & d$condition=="B",], expcompounds, expcolors)
plotDilutionData(d[d$study=="gor1973" & d$condition=="C",], expcompounds, expcolors)
legend("topright",  legend=expcompounds, fill=expcolors)
# plot simulation
max.rbc = max(d$outflow) # maximum of experimental rbc curves
max.rbc
#scale = 5.8*scale  # 4.55 (0.4)
#subset = split_sims[[which(split_info$f_flow==0.3)]]
#offset =1
#scale = 5.0*scale  # 4.55 (0.4)
#subset = split_sims[[which(split_info$f_flow==0.35)]]
#offset = 0.5
subset = split_sims[[which(split_info$f_flow==0.4)]]
scale = 4.9*max.rbc
time_shift = 0.5
plot_mean_curves(dlist, pars, subset, f.level, compounds, ccolors, scale=scale, time_shift=time_shift, std=FALSE)
d <- read.csv(file.path(ma.settings$dir.base, "results", "dilution", "Goresky_processed.csv"), sep="\t")
expcompounds = c('galactose', 'RBC', 'albumin', 'sucrose', 'water')
expcolors = c('black', 'red', 'darkgreen', 'darkorange', 'darkblue')
# normal plot experimental data
plot(numeric(0), numeric(0), type='n',
xlim=c(0,25), ylim=c(0,16),
xlab="time [s]", ylab="10^3 x outflow fraction/ml", main="Goresky1973 & 1983")
plotDilutionData(d[d$study=="gor1983",], expcompounds, expcolors)
plotDilutionData(d[d$study=="gor1973" & d$condition=="A",], expcompounds, expcolors)
plotDilutionData(d[d$study=="gor1973" & d$condition=="B",], expcompounds, expcolors)
plotDilutionData(d[d$study=="gor1973" & d$condition=="C",], expcompounds, expcolors)
legend("topright",  legend=expcompounds, fill=expcolors)
# plot simulation
max.rbc = max(d$outflow) # maximum of experimental rbc curves
max.rbc
#scale = 5.8*scale  # 4.55 (0.4)
#subset = split_sims[[which(split_info$f_flow==0.3)]]
#offset =1
#scale = 5.0*scale  # 4.55 (0.4)
#subset = split_sims[[which(split_info$f_flow==0.35)]]
#offset = 0.5
subset = split_sims[[which(split_info$f_flow==0.4)]]
scale = 4.3*max.rbc
time_shift = 1.3
plot_mean_curves(dlist, pars, subset, f.level, compounds, ccolors, scale=scale, time_shift=time_shift, std=FALSE)
rm(list=ls())
par(mfrow=c(1,2))
folder <- '2014-12-17_T17'
info <- process_folder_info(folder)
res <- calculate_GEC_curves(folder, force=FALSE, B=10)
GEC_f <- GEC_functions(task=info$task)
plot_GEC_function(GEC_f)
names(GEC_f)
GEC_f$d.mean[, c('f_flow', 'Q_per_vol_units')]
folder <- '2014-12-17_T18'
info <- process_folder_info(folder)
res <- calculate_GEC_curves(folder, force=FALSE, B=10)
head(res)
GEC_f <- GEC_functions(task=info$task)
plot_GEC_function(GEC_f)
par(mfrow=c(1,1))
p1 <- ggplot(GEC_f$d.mean, aes(f_flow, Q_per_vol_units)) + geom_point() + geom_line() + facet_grid(~ scale_f)
p1
d.mean <- GEC_f$d.mean
p1 <- ggplot(d.mean, aes(f_flow, R_per_vol_units*1500)) + geom_point() + geom_line() + facet_grid(~ scale_f)
p2 <- ggplot(d.mean, aes(f_flow, Q_per_vol_units)) + geom_point() + geom_line() + facet_grid(~ scale_f)
p3 <- ggplot(d.mean, aes(Q_per_vol_units, R_per_vol_units*1500)) + geom_point() + geom_line()+ ylim(0,5) +facet_grid(~ scale_f)
multiplot(p1, p2, p3, cols=3)
f_1 <- function(t, t_peak, t_duration){
c = numeric(length(t))
c[t<t_peak] <- 0
c[t>=t_peak& t<t_peak+t_duration] <- 1/t_duration
c[t>t_peak+t_duration] <- 0
return(c)
}
t = seq(from=0, to=20, length.out=200)
t = seq(from=0, to=20, length.out=200)
y1 <- f1(t)
f1 <- function(t, t_peak, t_duration){
c = numeric(length(t))
c[t<t_peak] <- 0
c[t>=t_peak& t<t_peak+t_duration] <- 1/t_duration
c[t>t_peak+t_duration] <- 0
return(c)
}
t = seq(from=0, to=20, length.out=200)
y1 <- f1(t)
f1 <- function(t, t_peak=5, t_duration=0.5){
c = numeric(length(t))
c[t<t_peak] <- 0
c[t>=t_peak& t<t_peak+t_duration] <- 1/t_duration
c[t>t_peak+t_duration] <- 0
return(c)
}
t = seq(from=0, to=20, length.out=200)
y1 <- f1(t)
plot(t, y1)
plot(t, y1, type='l')
f1 <- function(t, t_peak=5, t_duration=0.5){
c = numeric(length(t))
c[t<t_peak] <- 0
c[t>=t_peak& t<t_peak+t_duration] <- 1/t_duration
c[t>t_peak+t_duration] <- 0
return(c)
}
t = seq(from=0, to=20, length.out=400)
y1 <- f1(t)
plot(t, y1, type='l')
f2 <- function(t, t_peak=5, t_duration=0.5){
c = numeric(length(t))
# c[t<t_peak] <- 0
# c[t>=t_peak& t<t_peak+t_duration] <- 1/t_duration
# c[t>t_peak+t_duration] <- 0
sigma = sqrt(t_duration/2)
c <- 1/(sigma *sqrt(2*pi)) * exp(-(t-t_peak)/(2*sigma^2))
return(c)
}
t = seq(from=0, to=20, length.out=400)
y1 <- f1(t)
y2 <- f2(t)
plot(t, y1, type='l', lwd=2)
lines(t, y2, col='red', lwd=2)
f2 <- function(t, t_peak=5, t_duration=0.5){
c = numeric(length(t))
# c[t<t_peak] <- 0
# c[t>=t_peak& t<t_peak+t_duration] <- 1/t_duration
# c[t>t_peak+t_duration] <- 0
sigma = sqrt(t_duration/2)
c <- 1/(sigma *sqrt(2*pi)) * exp(-(t-t_peak)^2/(2*sigma^2))
return(c)
}
t = seq(from=0, to=20, length.out=400)
y1 <- f1(t)
y2 <- f2(t)
plot(t, y1, type='l', lwd=2)
lines(t, y2, col='red', lwd=2)
f1 <- function(t, t_peak=5, t_duration=0.5){
c = numeric(length(t))
c[t<t_peak] <- 0
c[t>=t_peak& t<t_peak+t_duration] <- 1/t_duration
c[t>t_peak+t_duration] <- 0
return(c)
}
f2 <- function(t, t_peak=5, t_duration=0.5){
c = numeric(length(t))
# c[t<t_peak] <- 0
# c[t>=t_peak& t<t_peak+t_duration] <- 1/t_duration
# c[t>t_peak+t_duration] <- 0
mu = t_peak + 0.5*t_duration
sigma = sqrt(t_duration/2)
print(sigma)
c <- 1/(sigma *sqrt(2*pi)) * exp(-(t-mu)^2/(2*sigma^2))
return(c)
}
t = seq(from=0, to=20, length.out=400)
y1 <- f1(t)
y2 <- f2(t)
plot(t, y1, type='l', lwd=2)
lines(t, y2, col='red', lwd=2)
0.5/2
sqrt(0.25)
f2 <- function(t, t_peak=5, t_duration=0.5){
c = numeric(length(t))
# c[t<t_peak] <- 0
# c[t>=t_peak& t<t_peak+t_duration] <- 1/t_duration
# c[t>t_peak+t_duration] <- 0
mu = t_peak + 0.5*t_duration
sigma = t_duration/2
print(sigma)
c <- 1/(sigma *sqrt(2*pi)) * exp(-(t-mu)^2/(2*sigma^2))
return(c)
}
t = seq(from=0, to=20, length.out=400)
y1 <- f1(t)
y2 <- f2(t)
plot(t, y1, type='l', lwd=2)
lines(t, y2, col='red', lwd=2)
f1 <- function(t, t_peak=5, t_duration=0.5){
c = numeric(length(t))
c[t<t_peak] <- 0
c[t>=t_peak& t<t_peak+t_duration] <- 1/t_duration
c[t>t_peak+t_duration] <- 0
return(c)
}
f2 <- function(t, t_peak=5, t_duration=0.5){
c = numeric(length(t))
# c[t<t_peak] <- 0
# c[t>=t_peak& t<t_peak+t_duration] <- 1/t_duration
# c[t>t_peak+t_duration] <- 0
mu = t_peak + 0.5*t_duration
sigma = t_duration/2
print(sigma)
c <- 1/(sigma *sqrt(2*pi)) * exp(-(t-mu)^2/(2*sigma^2))
return(c)
}
t = seq(from=0, to=10, length.out=800)
y1 <- f1(t)
y2 <- f2(t)
plot(t, y1, type='l', lwd=2)
lines(t, y2, col='red', lwd=2)
f2 <- function(t, t_peak=5, t_duration=0.5, sigma=t_duration/2){
c = numeric(length(t))
# c[t<t_peak] <- 0
# c[t>=t_peak& t<t_peak+t_duration] <- 1/t_duration
# c[t>t_peak+t_duration] <- 0
mu = t_peak + 0.5*t_duration
print(sigma)
c <- 1/(sigma *sqrt(2*pi)) * exp(-(t-mu)^2/(2*sigma^2))
return(c)
}
t = seq(from=0, to=10, length.out=800)
y1 <- f1(t)
y2 <- f2(t)
plot(t, y1, type='l', lwd=2)
lines(t, y2, col='red', lwd=2)
y3 <- f2(t, t_duration/4)
plot(t, y1, type='l', lwd=2)
lines(t, y2, col='red', lwd=2)
lines(t, y3, col='darkorange', lwd=2)
t = seq(from=0, to=10, length.out=800)
y1 <- f1(t)
y2 <- f2(t)
y3 <- f2(t, sigma_f=0.5)
plot(t, y1, type='l', lwd=2)
lines(t, y2, col='red', lwd=2)
lines(t, y3, col='darkorange', lwd=2)
f2 <- function(t, t_peak=5, t_duration=0.5, sigma_f=1){
c = numeric(length(t))
# c[t<t_peak] <- 0
# c[t>=t_peak& t<t_peak+t_duration] <- 1/t_duration
# c[t>t_peak+t_duration] <- 0
mu = t_peak + 0.5*t_duration
sigma = t_duration/2 * sigma_f
print(sigma)
c <- 1/(sigma *sqrt(2*pi)) * exp(-(t-mu)^2/(2*sigma^2))
return(c)
}
t = seq(from=0, to=10, length.out=800)
y1 <- f1(t)
y2 <- f2(t)
y3 <- f2(t, sigma_f=0.5)
plot(t, y1, type='l', lwd=2)
lines(t, y2, col='red', lwd=2)
lines(t, y3, col='darkorange', lwd=2)
f2 <- function(t, t_peak=5, t_duration=0.5){
mu = t_peak + 0.5*t_duration
sigma = t_duration/2
c <- 1/(sigma *sqrt(2*pi)) * exp(-(t-mu)^2/(2*sigma^2))
return(c)
}
f3 <- function(t, t_peak=5, t_duration=0.5){
mu = t_peak + 0.5*t_duration
sigma = 1/(t_peak*sqrt(2*pi))
c <- 1/(sigma *sqrt(2*pi)) * exp(-(t-mu)^2/(2*sigma^2))
return(c)
}
y1 <- f1(t)
y2 <- f2(t)
y3 <- f3(t)
plot(t, y1, type='l', lwd=2)
lines(t, y2, col='red', lwd=2)
lines(t, y3, col='darkorange', lwd=2)
f3 <- function(t, t_peak=5, t_duration=0.5){
mu = t_peak + 0.5*t_duration
sigma = 1/(mu*sqrt(2*pi))
c <- 1/(sigma *sqrt(2*pi)) * exp(-(t-mu)^2/(2*sigma^2))
return(c)
}
t = seq(from=0, to=10, length.out=800)
y1 <- f1(t)
y2 <- f2(t)
y3 <- f3(t)
plot(t, y1, type='l', lwd=2)
lines(t, y2, col='red', lwd=2)
lines(t, y3, col='darkorange', lwd=2)
f3 <- function(t, t_peak=5, t_duration=0.5){
mu = t_peak + 0.5*t_duration
y_peak = 1/t_duration
sigma = 1/(y_peak*sqrt(2*pi))
c <- 1/(sigma *sqrt(2*pi)) * exp(-(t-mu)^2/(2*sigma^2))
return(c)
}
t = seq(from=0, to=10, length.out=800)
y1 <- f1(t)
y2 <- f2(t)
y3 <- f3(t)
plot(t, y1, type='l', lwd=2)
lines(t, y2, col='red', lwd=2)
lines(t, y3, col='darkorange', lwd=2)
t = seq(from=4, to=7, length.out=800)
y1 <- f1(t)
y2 <- f2(t)
y3 <- f3(t)
plot(t, y1, type='l', lwd=2)
lines(t, y2, col='red', lwd=2)
lines(t, y3, col='darkorange', lwd=2)
