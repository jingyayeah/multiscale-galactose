# do the preprocessing (here all columns)
# what is written in the CSV?
outFile <- preprocess(parsfile, ma.settings$dir.simdata)
# load the preprocessed data
load(outFile)
tmp <- head(preprocess.list[[1]])
plot(tmp$time, tmp$A_in)
help(gsub)
rm(list=ls())
library(data.table)
library(libSBML)
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
sname <- '2014-05-11_Demo'
modelVersion <- 'v14_Nc20_Nf1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, 'data')
load_with_sims = FALSE;
task = 'T12'
modelId <- 'Koenig2014_demo_kinetic_v7'
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
head(parsfile)
# Load the data
if (load_with_sims == FALSE){
# only load the parameters:
pars <- loadParameterFile(parsfile)
} else {
# preprocessing necessary for loading the data with the parameters
load(file=outfileFromParsFile(parsfile))
}
print(summary(pars))
names(pars)
rm(list=ls())
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
sname <- '2014-05-27_Demo'
modelId <- paste('Koenig2014_demo_kinetic_v7')
task <- 'T1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
plotParameterHistogramFull(pars)
# do the preprocessing (here all columns)
# what is written in the CSV?
outFile <- preprocess(parsfile, ma.settings$dir.simdata)
library(MultiscaleAnalysis)
outFile <- preprocess(parsfile, ma.settings$dir.simdata)
# load the preprocessed data
load(outFile)
tmp <- preprocess.list[1]
head(tmp)
plot(tmp$time, tmp$A_in)
plot(tmp$A_in)
head(tmp)
head(tmp$time)
head(tmp[['time']])
names(tmp)
tmp <- preprocess.list[[1]
head(tmp)
tmp <- preprocess.list[[1]]
head(tmp)
plot(tmp$A_in)
plot(tmp$time, tmp$A_in)
x <- 1:10
y <- rnorm(10)
par(mfrow = c(2,1))
plot(x, y, main = "approx(.) and approxfun(.)")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
plot(tmp$time, tmp$A_in)
x <- 1:10
y <- rnorm(10)
par(mfrow = c(2,1))
plot(x, y, main = "approx(.) and approxfun(.)")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
library(MultiscaleAnalysis)
rm(list=ls())
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
task <- 'T2'
sname <- paste('2014-06-10_', task, sep='')
modelId <- paste('Koenig2014_demo_kinetic_v7')
t.approx <- seq(from=0, to=100, by=0.1)
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
plotParameterHistogramFull(pars)
outFile <- preprocess(parsfile, ma.settings$dir.simdata, time=t.approx)
load(outFile)
outFile <- preprocess(parsfile, ma.settings$dir.simdata, time=t.approx)
rm(list=ls())
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
task <- 'T2'
sname <- paste('2014-06-10_', task, sep='')
modelId <- paste('Koenig2014_demo_kinetic_v7')
t.approx <- seq(from=0, to=100, by=0.1)
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
plotParameterHistogramFull(pars)
library(MultiscaleAnalysis)
outFile <- preprocess(parsfile, ma.settings$dir.simdata, time=t.approx)
outFile <- preprocess(pars, ma.settings$dir.simdata, time=t.approx)
load(outFile)
# Plot all the single curves with mean and std
# They have to be weighted with the actual probability assicociated with the samples.
plotCurve <- function(preprocess.mat, name, sim.indices=NULL){
Nsim <- nrow(data)
time <- preprocess.mat[['time']][,1]
print(time)
data <- preprocess.mat[[name]]
if (!is.null(sim.indices)){
data <- as.matrix(data[,sim.indices])
}
xlim=c(0,25)
ylim=c(min(data), max(data))
plotCompound(time, data, name=name, xlim=xlim, ylim=ylim, weights=NULL, col="black")
plotCompoundMean(time, data, weights=NULL, col="red")
}
# Varied parameters
pnames <- getParameterNames(pars=pars)
# Available columns
cnames <- names(preprocess.mat)
print(cnames)
cnames <- cnames[2:7]
cnames
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', 'Demo_results' , ".png", sep=""),
width = 1200, height = 1200, units = "px", bg = "white",  res = 100)
}
Np = ceiling(sqrt(length(cnames)))
par(mfrow=c(Np,Np))
for (name in cnames){
print(name)
if (name != 'time'){
plotCurve(preprocess.mat, name, sim.indices=NULL)
}
}
par(mfrow=c(1,1))
if (create_plot_files == TRUE){
dev.off()
}
create_plot_files = F
# Create the plot
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', 'Demo_results' , ".png", sep=""),
width = 1200, height = 1200, units = "px", bg = "white",  res = 100)
}
Np = ceiling(sqrt(length(cnames)))
par(mfrow=c(Np,Np))
for (name in cnames){
print(name)
if (name != 'time'){
plotCurve(preprocess.mat, name, sim.indices=NULL)
}
}
par(mfrow=c(1,1))
if (create_plot_files == TRUE){
dev.off()
}
create_plot_files = F
# Plot all the single curves with mean and std
# They have to be weighted with the actual probability assicociated with the samples.
plotCurve <- function(preprocess.mat, name, sim.indices=NULL){
Nsim <- nrow(data)
time <- preprocess.mat[['time']][,1]
data <- preprocess.mat[[name]]
if (!is.null(sim.indices)){
data <- as.matrix(data[,sim.indices])
}
xlim=c(0,25)
ylim=c(min(data), max(data))
plotCompound(time, data, name=name, xlim=xlim, ylim=ylim, weights=NULL, col="black")
plotCompoundMean(time, data, weights=NULL, col="red")
}
# Create the plot
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', 'Demo_results' , ".png", sep=""),
width = 1200, height = 1200, units = "px", bg = "white",  res = 100)
}
Np = ceiling(sqrt(length(cnames)))
par(mfrow=c(Np,Np))
for (name in cnames){
print(name)
if (name != 'time'){
plotCurve(preprocess.mat, name, sim.indices=NULL)
}
}
par(mfrow=c(1,1))
if (create_plot_files == TRUE){
dev.off()
}
library('ggplot2')
install.package('ggplot2')
package.install('ggplot2')
install.packages('ggplot2')
install.packages('ggplot')
install.packages('ggplot2')
install.packages('ggplot2')
library('ggplot2')
library('ggplot2')
str(mpg)
qplot(displ, hwy, data=mpg)
?str
qplot(displ, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth")
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"))
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"))
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets= .~drv)
qplot(hwy, data=mpg, facets= drv~., binwidth=2)
head(mpg)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
p <- g + geom_point()
print(p)
g + geom_point()
g + geom_line()
g + geom_bar()
g + geom_points()
g + geom_points()
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(method='lm')
(.~drv)
g + geom_point() + geom_smooth(method='lm') + facet_grid(.~drv)
g + geom_point() + geom_smooth(method='lm') + facet_grid(drv~.)
) + geom_smooth(method='lm') + facet_grid(drv~.)
g + geom_point(color="steelblue", size=4, alpha=1/2) + geom_smooth(method='lm') + facet_grid(drv~.)
g + geom_point(aes(color=drv), size=4, alpha=1/2) + geom_smooth(method='lm')
g + geom_point(aes(color=drv), size=4, alpha=1/2) + geom_smooth(method='lm') + labs(title = "MAACS Cohort")
g + geom_point(aes(color=drv), size=4, alpha=1/2) + geom_smooth(method='lm') + labs(title = "MAACS Cohort") + labs(x='Nocturnal Symptoms')
g + geom_point(color="steelblue", size=4, alpha=1/2) + geom_smooth(method='lm') + theme_bw()
g + geom_point(color="steelblue", size=4, alpha=1/2) + geom_smooth(method='lm') + theme_bw() + coord_cartesian(ylim=c(15, 35))
install.packages('gcookbook')
rm(list=ls())
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
compounds = c('RBC', 'albumin', 'Na', 'sucrose', 'water', 'galactose')
ccolors = c('darkred', 'darkgreen', 'gray', 'darkorange', 'darkblue', 'black')
#          red,  green, orange, blue,  black, gray
gor1983 <- read.csv(file.path(ma.settings$dir.expdata, "dilution_indicator", "Goresky1983_Fig1.csv"), sep="\t")
summary(gor1983)
plot(numeric(0), numeric(0),
xlim=c(0,30), ylim=c(0,16),
xlab="time [s]", ylab="10^3 x outflow fraction/ml", main="Goresky1973")
plotDilutionData(gor1983)
rm(list=ls())
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
compounds = c('RBC', 'albumin', 'Na', 'sucrose', 'water', 'galactose')
ccolors = c('darkred', 'darkgreen', 'gray', 'darkorange', 'darkblue', 'black')
#          red,  green, orange, blue,  black, gray
library(MultiscaleAnalysis)
###############################################################
# Load experimental data
###############################################################
## Goresky1973 ##
# Units: time [s], compound: 1000*outflow fraction/ml
# A : galactose 5mg/100ml | glucose 117 mg/100ml
# gor1973.A <- gor1973[gor1973$condition == 'A',]
# B: galactose 225mg/100ml | glucose 103 mg/100ml
# gor1973.B <- gor1973[gor1973$condition == 'B', ]
# C: galactose 225mg/100ml | glucose 103 mg/100ml
# gor1973.C <- gor1973[gor1973$condition == 'C',]
gor1973 <- read.csv(file.path(ma.settings$dir.expdata, "dilution_indicator", "Goresky1973_Fig1.csv"), sep="\t")
summary(gor1973)
plotDilutionDataGoresky1973 <- function(correctTime=FALSE){
#plot the curves, i.e compound against time
condition.levels = levels(gor1973$condition);
par(mfrow=c(length(condition.levels),1))
for (condition in condition.levels){
name = paste("Goresky1973", condition)
print(name)
plot(numeric(0), numeric(0),
xlim=c(0,30), ylim=c(0,16),
xlab="time [s]", ylab="10^3 x outflow fraction/ml", main=name)
data <- gor1973[gor1973$condition == condition, ]
plotDilutionData(data,  correctTime)
}
par(mfrow=c(1,1))
}
plotDilutionDataGoresky1973()
plotDilutionDataGoresky1973 <- function(correctTime=FALSE){
#plot the curves, i.e compound against time
condition.levels = levels(gor1973$condition);
par(mfrow=c(length(condition.levels),1))
for (condition in condition.levels){
name = paste("Goresky1973", condition)
print(name)
plot(numeric(0), numeric(0),
xlim=c(0,30), ylim=c(0,16),
xlab="time [s]", ylab="10^3 x outflow fraction/ml", main=name)
data <- gor1973[gor1973$condition == condition, ]
plotDilutionData(data, compounds, ccolors, correctTime)
}
par(mfrow=c(1,1))
}
plotDilutionDataGoresky1973()
plot(numeric(0), numeric(0),
xlim=c(0,30), ylim=c(0,16),
xlab="time [s]", ylab="10^3 x outflow fraction/ml", main="Goresky1973")
plotDilutionDataGoresky1973()
plotDilutionDataGoresky1973(correctTime=TRUE)
gor1983 <- read.csv(file.path(ma.settings$dir.expdata, "dilution_indicator", "Goresky1983_Fig1.csv"), sep="\t")
summary(gor1983)
plot(numeric(0), numeric(0),
xlim=c(0,30), ylim=c(0,16),
xlab="time [s]", ylab="10^3 x outflow fraction/ml", main="Goresky1973")
plotDilutionData(gor1983, compounds, ccolors)
plot(numeric(0), numeric(0),
xlim=c(0,30), ylim=c(0,16),
xlab="time [s]", ylab="10^3 x outflow fraction/ml", main="Goresky1973")
plotDilutionData(gor1983, compounds, ccolors, correctTime=TRUE)
## Goresky1983 & 1973 ##
plot(numeric(0), numeric(0),
xlim=c(0,30), ylim=c(0,16),
xlab="time [s]", ylab="10^3 x outflow fraction/ml", main="Goresky1973 & 1983")
plotDilutionData(gor1983, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="A",], compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="B",], compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="C",], compounds, ccolors, correctTime=TRUE)
plot(numeric(0), numeric(0),
xlim=c(0,120), ylim=c(0,4000),
xlab="time [s]", ylab="10^3 x outflow fraction", main="Villeneuve1996")
vil1996 <- read.csv(paste(folder$expdata, "/", "Villeneuve1996_Fig3.csv", sep=""), sep="\t")
summary(vil1996)
plotDilutionData(vil1996.scale, compounds, ccolors, correctTime=TRUE)
vil1996 <- read.csv(paste(folder$expdata, "/", "Villeneuve1996_Fig3.csv", sep=""), sep="\t")
vil1996 <- read.csv(file.path(ma.settings$dir.expdata, "dilution_indicator", "Villeneuve1996_Fig3.csv"), sep="\t")
summary(vil1996)
plotDilutionData(vil1996.scale, compounds, ccolors, correctTime=TRUE)
vil1996 <- read.csv(file.path(ma.settings$dir.expdata, "dilution_indicator", "Villeneuve1996_Fig3.csv"), sep="\t")
summary(vil1996)
plotDilutionData(vil1996, compounds, ccolors, correctTime=TRUE)
# Plot all the dilution curves in the same plot
plot(numeric(0), numeric(0),
xlim=c(0,120), ylim=c(0,20),
xlab="time [s]", ylab="10^3 x outflow fraction", main="Villeneuve1996")
vil1996.scale <- vil1996
vil1996.scale$outflow <- 1/200 * vil1996.scale$outflow
plotDilutionData(vil1996.scale, correctTime=TRUE)
plotDilutionData(gor1983, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="A",], correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="B",], correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="C",], correctTime=TRUE)
## Villeneuve1996 ##
# data is in log
plot(numeric(0), numeric(0),
xlim=c(0,120), ylim=c(0,4000),
xlab="time [s]", ylab="10^3 x outflow fraction", main="Villeneuve1996")
vil1996 <- read.csv(file.path(ma.settings$dir.expdata, "dilution_indicator", "Villeneuve1996_Fig3.csv"), sep="\t")
summary(vil1996)
plotDilutionData(vil1996, compounds, ccolors, correctTime=TRUE)
# Plot all the dilution curves in the same plot
plot(numeric(0), numeric(0),
xlim=c(0,120), ylim=c(0,20),
xlab="time [s]", ylab="10^3 x outflow fraction", main="Villeneuve1996")
vil1996.scale <- vil1996
vil1996.scale$outflow <- 1/200 * vil1996.scale$outflow
plotDilutionData(vil1996.scale, correctTime=TRUE)
plotDilutionData(gor1983, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="A",], compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="B",], compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="C",], compounds, ccolors, correctTime=TRUE)
# scaling for comparison
vil1996$outflow <- 1/200 * scale$outflow
plotDilutionData(vil1996, correctTime=TRUE)
plotDilutionData(gor1983, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="A",], compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="B",], compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="C",], compounds, ccolors, correctTime=TRUE)
vil1996$outflow <- 1/200 * scale$outflow
plotDilutionData(vil1996, compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1983, compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="A",], compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="B",], compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="C",], compounds, ccolors, correctTime=TRUE)
# Plot all the dilution curves in the same plot
plot(numeric(0), numeric(0),
xlim=c(0,120), ylim=c(0,20),
xlab="time [s]", ylab="10^3 x outflow fraction", main="Villeneuve1996")
# scaling for comparison
vil1996$outflow <- 1/200 * scale$outflow
plotDilutionData(vil1996, compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1983, compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="A",], compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="B",], compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="C",], compounds, ccolors, correctTime=TRUE)
plot(numeric(0), numeric(0),
xlim=c(0,120), ylim=c(0,4000),
xlab="time [s]", ylab="10^3 x outflow fraction", main="Villeneuve1996")
vil1996 <- read.csv(file.path(ma.settings$dir.expdata, "dilution_indicator", "Villeneuve1996_Fig3.csv"), sep="\t")
summary(vil1996)
plotDilutionData(vil1996, compounds, ccolors, correctTime=TRUE)
vil1996$outflow <- 1/200 * vil1996$outflow
plotDilutionData(vil1996, compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1983, compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="A",], compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="B",], compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="C",], compounds, ccolors, correctTime=TRUE)
vil1996 <- read.csv(file.path(ma.settings$dir.expdata, "dilution_indicator", "Villeneuve1996_Fig3.csv"), sep="\t")
summary(vil1996)
plotDilutionData(vil1996, compounds, ccolors, correctTime=TRUE)
# Plot all the dilution curves in the same plot
plot(numeric(0), numeric(0),
xlim=c(0,120), ylim=c(0,20),
xlab="time [s]", ylab="10^3 x outflow fraction", main="Villeneuve1996")
# scaling for comparison
vil1996$outflow <- 1/200 * vil1996$outflow
plotDilutionData(vil1996, compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1983, compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="A",], compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="B",], compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="C",], compounds, ccolors, correctTime=TRUE)
library(MultiscaleAnalysis)
rm(list=ls())
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
compounds = c('RBC', 'albumin', 'Na', 'sucrose', 'water', 'galactose')
ccolors = c('darkred', 'darkgreen', 'gray', 'darkorange', 'darkblue', 'black')
#          red,  green, orange, blue,  black, gray
gor1973 <- read.csv(file.path(ma.settings$dir.expdata, "dilution_indicator", "Goresky1973_Fig1.csv"), sep="\t")
summary(gor1973)
plotDilutionDataGoresky1973 <- function(correctTime=FALSE){
#plot the curves, i.e compound against time
condition.levels = levels(gor1973$condition);
par(mfrow=c(length(condition.levels),1))
for (condition in condition.levels){
name = paste("Goresky1973", condition)
print(name)
plot(numeric(0), numeric(0),
xlim=c(0,30), ylim=c(0,16),
xlab="time [s]", ylab="10^3 x outflow fraction/ml", main=name)
data <- gor1973[gor1973$condition == condition, ]
plotDilutionData(data, compounds, ccolors, correctTime)
}
par(mfrow=c(1,1))
}
plotDilutionDataGoresky1973()
plotDilutionDataGoresky1973(correctTime=TRUE)
# Units: time [s], compound: 1000*outflow fraction/ml
gor1983 <- read.csv(file.path(ma.settings$dir.expdata, "dilution_indicator", "Goresky1983_Fig1.csv"), sep="\t")
summary(gor1983)
plot(numeric(0), numeric(0),
xlim=c(0,30), ylim=c(0,16),
xlab="time [s]", ylab="10^3 x outflow fraction/ml", main="Goresky1973")
plotDilutionData(gor1983, compounds, ccolors)
plotDilutionDataGoresky1973 <- function(correctTime=FALSE){
#plot the curves, i.e compound against time
condition.levels = levels(gor1973$condition);
par(mfrow=c(length(condition.levels),1))
for (condition in condition.levels){
name = paste("Goresky1973", condition)
print(name)
plot(numeric(0), numeric(0),
xlim=c(0,30), ylim=c(0,16),
xlab="time [s]", ylab="10^3 x outflow fraction/ml", main=name)
data <- gor1973[gor1973$condition == condition, ]
plotDilutionData(data, compounds, ccolors, correctTime)
}
par(mfrow=c(1,1))
}
plotDilutionDataGoresky1973()
plotDilutionDataGoresky1973(correctTime=TRUE)
plot(numeric(0), numeric(0),
xlim=c(0,30), ylim=c(0,16),
xlab="time [s]", ylab="10^3 x outflow fraction/ml", main="Goresky1973")
plotDilutionData(gor1983, compounds, ccolors, correctTime=TRUE)
rm(list=ls())
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
compounds = c('RBC', 'albumin', 'Na', 'sucrose', 'water', 'galactose')
ccolors = c('darkred', 'darkgreen', 'gray', 'darkorange', 'darkblue', 'black')
#          red,  green, orange, blue,  black, gray
plot(numeric(0), numeric(0),
xlim=c(0,30), ylim=c(0,16),
xlab="time [s]", ylab="10^3 x outflow fraction/ml", main="Goresky1973")
plotDilutionData(gor1983, compounds, ccolors, correctTime=TRUE)
gor1983 <- read.csv(file.path(ma.settings$dir.expdata, "dilution_indicator", "Goresky1983_Fig1.csv"), sep="\t")
summary(gor1983)
plot(numeric(0), numeric(0),
xlim=c(0,30), ylim=c(0,16),
xlab="time [s]", ylab="10^3 x outflow fraction/ml", main="Goresky1973")
plotDilutionData(gor1983, compounds, ccolors)
plot(numeric(0), numeric(0),
xlim=c(0,30), ylim=c(0,16),
xlab="time [s]", ylab="10^3 x outflow fraction/ml", main="Goresky1973")
plotDilutionData(gor1983, compounds, ccolors, correctTime=TRUE)
plot(numeric(0), numeric(0),
xlim=c(0,30), ylim=c(0,16),
xlab="time [s]", ylab="10^3 x outflow fraction/ml", main="Goresky1973")
plotDilutionData(gor1983, compounds, ccolors, correctTime=TRUE)
library(MultiscaleAnalysis)
plot(numeric(0), numeric(0),
xlim=c(0,30), ylim=c(0,16),
xlab="time [s]", ylab="10^3 x outflow fraction/ml", main="Goresky1973")
plotDilutionData(gor1983, compounds, ccolors, correctTime=TRUE)
