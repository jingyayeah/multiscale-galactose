setwd(ma.settings$dir.base)
# Get overview over available simulations
folder <- '2014-12-08_T3'
info <- process_folder_info(folder)
str(info)
# Load the parameter file
pars <- loadParameterFile(file=info$parsfile)
head(pars)
plotParameterHistogramFull(pars)
plotParameterHistogramFull(pars)
hist(pars$N_fen)
plot(pars$N_fen)
count(pars$N_fen)
simIds <- rownames(pars)
simIds
get_rdata_for_simulation <- function(sim_id, info){
fname <- file.path(info$dir.simdata, sprintf('%s_%s_roadrunner.csv.Rdata', info$modelId, sim_id))
cat(fname, '\n')
load(fname)
return(data)
}
# get data for simulation
data <- lapply(simIds, get_rdata_for_simulation, info)
simIds <- rownames(pars)[1:20]
get_rdata_for_simulation <- function(sim_id, info){
fname <- file.path(info$dir.simdata, sprintf('%s_%s_roadrunner.csv.Rdata', info$modelId, sim_id))
cat(fname, '\n')
load(fname)
return(data)
}
# get data for simulation
data <- lapply(simIds, get_rdata_for_simulation, info)
names(data) <- simIds
ids = names(data[[1]])
keywords = c("time", "y_cell", "y_dis", "scale_f", "gal_challenge", "deficiency", "flow_sin", "L", "y_sin")
# plot some components via ids
plotTimecourse <- function(data, ids, cols='Black'){
for (id in ids){
if (!(id %in% keywords)){
lines(data$time, data[[id]], col=cols)
}
}
}
plot(numeric(0), numeric(0), type='n', xlim=c(1999,2030), ylim=c(0,8.5))
for(k in 1:length(simIds)){
lines(data[[k]]$time, data[[k]]$PV__gal)
}
plot(numeric(0), numeric(0), type='n', xlim=c(1999,2030), ylim=c(0,8.5))
for(k in 1:length(simIds)){
lines(data[[k]]$time, data[[k]]$H01__gal)
}
plot(numeric(0), numeric(0), type='n', xlim=c(1999,3000), ylim=c(0,8.5))
for(k in 1:length(simIds)){
lines(data[[k]]$time, data[[k]]$H01__gal)
}
task <- 'T3'
load(file=GEC_curve_file(task))
d.mean <- GEC_curves$d.mean
d.se <- GEC_curves$d.se
add_age <- function(data, age.levels=c(20, 40, 60, 80, 100)){
# add the age to the data frame
N_fen.levels <- unique(data$N_fen)
N_fen.levels <- N_fen.levels[order(N_fen.levels, decreasing=TRUE)]
age.levels <- c(20, 40, 60, 80, 100)
data$age <- NA
for (k in seq_along(age.levels)){
data$age[data$N_fen == N_fen.levels[k]] <- age.levels[k]
}
# add the base age
tmp <- data[ data$age == 20, ]
tmp$age <- 0
data <- rbind(data, tmp)
# reorder
data <- data[with(data, order(f_flow, age)), ]
return(data)
}
d.mean <- add_age(d.mean)
d.se <- add_age(d.se)
plot(numeric(0), numeric(0), xlim=range(d.mean$Q_per_vol_units), ylim=range(d.mean$R_per_vol_units)*1500, type='n',
main="Effect of ageing on GEC", xlab='Q_per_vol_units', ylab='R_per_vol_units')
for (age in c(0, 20, 40, 60, 80, 100)){
inds <- which(d.mean$age == age)
with(d.mean, lines(Q_per_vol_units[inds], R_per_vol_units[inds]*1500) )
}
task <- 'T4'
load(file=GEC_curve_file(task))
d.mean <- GEC_curves$d.mean
d.se <- GEC_curves$d.se
add_age <- function(data, age.levels=c(20, 40, 60, 80, 100)){
# add the age to the data frame
N_fen.levels <- unique(data$N_fen)
N_fen.levels <- N_fen.levels[order(N_fen.levels, decreasing=TRUE)]
age.levels <- c(20, 40, 60, 80, 100)
data$age <- NA
for (k in seq_along(age.levels)){
data$age[data$N_fen == N_fen.levels[k]] <- age.levels[k]
}
# add the base age
tmp <- data[ data$age == 20, ]
tmp$age <- 0
data <- rbind(data, tmp)
# reorder
data <- data[with(data, order(f_flow, age)), ]
return(data)
}
d.mean <- add_age(d.mean)
d.se <- add_age(d.se)
plot(numeric(0), numeric(0), xlim=range(d.mean$Q_per_vol_units), ylim=range(d.mean$R_per_vol_units)*1500, type='n',
main="Effect of ageing on GEC", xlab='Q_per_vol_units', ylab='R_per_vol_units')
for (age in c(0, 20, 40, 60, 80, 100)){
inds <- which(d.mean$age == age)
with(d.mean, lines(Q_per_vol_units[inds], R_per_vol_units[inds]*1500) )
}
par(mfrow=c(1,2))
folder <- '2014-12-08_T5'
info <- process_folder_info(folder)
res <- calculate_GEC_curves(folder, force=TRUE, B=10)
GEC_f <- GEC_functions(task=info$task)
plot_GEC_function(GEC_f)
folder <- '2014-12-08_T6'
info <- process_folder_info(folder)
res <- calculate_GEC_curves(folder, force=TRUE, B=10)
GEC_f <- GEC_functions(task=info$task)
plot_GEC_function(GEC_f)
par(mfrow=c(1,1))
rm(list=ls())
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
create_plots = TRUE
compounds = c('RBC', 'albumin', 'Na', 'sucrose', 'water', 'galactose')
ccolors = c('darkred', 'darkgreen', 'gray', 'darkorange', 'darkblue', 'black')
###############################################################
# Load experimental data
###############################################################
## Goresky1973 ##
# Units: time [s], compound: 1000*outflow fraction/ml
# A : galactose 5mg/100ml | glucose 117 mg/100ml
# gor1973.A <- gor1973[gor1973$condition == 'A',]
# B: galactose 225mg/100ml | glucose 103 mg/100ml
# gor1973.B <- gor1973[gor1973$condition == 'B', ]
# C: galactose 225mg/100ml | glucose 103 mg/100ml
# gor1973.C <- gor1973[gor1973$condition == 'C',]
gor1973 <- read.csv(file.path(ma.settings$dir.expdata, "dilution_indicator", "Goresky1973_Fig1.csv"), sep="\t")
summary(gor1973)
plotDilutionDataGoresky1973 <- function(correctTime=FALSE){
#plot the curves, i.e compound against time
condition.levels = levels(gor1973$condition);
par(mfrow=c(length(condition.levels),1))
for (condition in condition.levels){
name = paste("Goresky1973", condition)
print(name)
plot(numeric(0), numeric(0), type='n',
xlim=c(0,30), ylim=c(0,16),
xlab="time [s]", ylab="10^3 x outflow fraction/ml", main=name)
data <- gor1973[gor1973$condition == condition, ]
plotDilutionData(data, compounds, ccolors, correctTime=correctTime)
}
par(mfrow=c(1,1))
}
startDevPlot(file=file.path(ma.settings$dir.results, 'figures', 'MultipleIndicator_Goresky1973_1.png'), create_plots=create_plots)
plotDilutionDataGoresky1973()
stopDevPlot()
startDevPlot(file=file.path(ma.settings$dir.results, 'figures', 'MultipleIndicator_Goresky1973_2.png'), create_plots=create_plots)
plotDilutionDataGoresky1973(correctTime=TRUE)
stopDevPlot()
###############################################################
## Goresky1983 ##
# Units: time [s], compound: 1000*outflow fraction/ml
gor1983 <- read.csv(file.path(ma.settings$dir.expdata, "dilution_indicator", "Goresky1983_Fig1.csv"), sep="\t")
summary(gor1983)
plot(numeric(0), numeric(0),
xlim=c(0,30), ylim=c(0,16),
xlab="time [s]", ylab="10^3 x outflow fraction/ml", main="Goresky1973")
plotDilutionData(gor1983, compounds, ccolors)
startDevPlot(file=file.path(ma.settings$dir.results, 'figures', 'MultipleIndicator_Goresky1983_1.png'), create_plots=create_plots)
plot(numeric(0), numeric(0),
xlim=c(0,30), ylim=c(0,16),
xlab="time [s]", ylab="10^3 x outflow fraction/ml", main="Goresky1973")
plotDilutionData(gor1983, compounds, ccolors, correctTime=TRUE)
stopDevPlot()
## Goresky1983 & 1973 ##
startDevPlot(file=file.path(ma.settings$dir.results, 'figures', 'MultipleIndicator_Goresky_1.png'), create_plots=create_plots)
plot(numeric(0), numeric(0),
xlim=c(0,30), ylim=c(0,16),
xlab="time [s]", ylab="10^3 x outflow fraction/ml", main="Goresky1973 & 1983")
plotDilutionData(gor1983, compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="A",], compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="B",], compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="C",], compounds, ccolors, correctTime=TRUE)
stopDevPlot()
###############################################################
## Villeneuve1996 ##
# data is in log
vil1996 <- read.csv(file.path(ma.settings$dir.expdata, "dilution_indicator", "Villeneuve1996_Fig3.csv"), sep="\t")
summary(vil1996)
startDevPlot(file=file.path(ma.settings$dir.results, 'figures', 'MultipleIndicator_Villeneuve1996_1.png'), create_plots=create_plots)
plot(numeric(0), numeric(0),
xlim=c(0,120), ylim=c(0,4000),
xlab="time [s]", ylab="10^3 x outflow fraction", main="Villeneuve1996")
plotDilutionData(vil1996, compounds, ccolors, correctTime=TRUE)
stopDevPlot()
# scaling for comparison
vil1996$outflow <- 1/200 * vil1996$outflow
# Plot all the dilution curves in the same plot
startDevPlot(file=file.path(ma.settings$dir.results, 'figures', 'MultipleIndicator_All_1.png'), create_plots=create_plots)
plot(numeric(0), numeric(0),
xlim=c(0,120), ylim=c(0,20),
xlab="time [s]", ylab="10^3 x outflow fraction", main="Villeneuve1996")
plotDilutionData(vil1996, compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1983, compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="A",], compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="B",], compounds, ccolors, correctTime=TRUE)
plotDilutionData(gor1973[gor1973$condition=="C",], compounds, ccolors, correctTime=TRUE)
stopDevPlot()
library(MultiscaleAnalysis)
rm(list=ls())
library('MultiscaleAnalysis')
setwd(ma.settings$dir.base)
t_peak <- 1000              # [s] MID peak start
t_end <- 5000               # [s] simulation time
folder <- '2014-12-08_T7'   # Multiple indicator data
folder.mean <- '2014-12-08_T8'   # Multiple indicator data mean
# Process the integration time curves
info <- process_folder_info(folder)
processed <- preprocess_task(folder=folder, force=force)
rm(list=ls())
library('MultiscaleAnalysis')
setwd(ma.settings$dir.base)
t_peak <- 1000              # [s] MID peak start
t_end <- 5000               # [s] simulation time
folder <- '2014-12-08_T7'   # Multiple indicator data
folder.mean <- '2014-12-08_T8'   # Multiple indicator data mean
# Process the integration time curves
info <- process_folder_info(folder)
processed <- preprocess_task(folder=folder, force=FALSE)
library(MultiscaleAnalysis)
str(processed)
names(processed)
p <- preprocess_task(folder=folder, force=FALSE)
names(p)
head(p$pars)
f.level = "PP__gal"
gal_levels <- levels(as.factor(pars[[f.level]]))
print(gal_levels)
pars <- p$pars
head(pars)
f.level = "PP__gal"
gal_levels <- levels(as.factor(pars[[f.level]]))
print(gal_levels)
plot.ids = c('PP__gal', 'PV__gal')
plot.colors = c( rgb(0.5,0.5,0.5, alpha=0.3), rgb(0,0,1.0, alpha=0.3) )
names(plot.colors) <- plot.ids
xlimits <- c(t_peak-5, t_peak+200)
ylimits <- c(0.0, max(as.numeric(gal_levels)))
nrow = ceiling(sqrt(length(plot.levels)))
par(mfrow=c(nrow, nrow))
for (p.level in plot.levels){
# empty plot
plot(numeric(0), numeric(0), xlim=xlimits, ylim=ylimits,
main=paste(f.level, '=', p.level))
# find the simulation rows for the level &
# plot all the single simulations for the level
gal_rows <- which(pars[[f.level]]==p.level)
for (k in gal_rows){
for (id in plot.ids){
points(x[[id]][[k]]$time, x[[id]][[k]][[2]],
type='l', col=plot.colors[[id]])
}
}
}
par(mfrow=c(1,1))
nrow = ceiling(sqrt(length(plot.levels)))
par(mfrow=c(nrow, nrow))
for (gal in gal_levels){
# empty plot
plot(numeric(0), numeric(0), xlim=xlimits, ylim=ylimits,
main=paste(f.level, '=', gal))
# find the simulation rows for the level &
# plot all the single simulations for the level
gal_rows <- which(pars[[f.level]]==gal)
for (k in gal_rows){
for (id in plot.ids){
points(x[[id]][[k]]$time, x[[id]][[k]][[2]],
type='l', col=plot.colors[[id]])
}
}
}
par(mfrow=c(1,1))
nrow = ceiling(sqrt(length(plot.levels)))
par(mfrow=c(nrow, nrow))
for (gal in gal_levels){
# empty plot
plot(numeric(0), numeric(0), xlim=xlimits, ylim=ylimits,
main=paste(f.level, '=', gal))
# find the simulation rows for the level &
# plot all the single simulations for the level
gal_rows <- which(pars[[f.level]]==gal)
for (k in gal_rows){
for (id in plot.ids){
points(p$x[[id]][[k]]$time, x[[id]][[k]][[2]],
type='l', col=plot.colors[[id]])
}
}
}
par(mfrow=c(1,1))
nrow = ceiling(sqrt(length(plot.levels)))
par(mfrow=c(nrow, nrow))
for (gal in gal_levels){
# empty plot
plot(numeric(0), numeric(0), xlim=xlimits, ylim=ylimits,
main=paste(f.level, '=', gal))
# find the simulation rows for the level &
# plot all the single simulations for the level
gal_rows <- which(pars[[f.level]]==gal)
for (k in gal_rows){
for (id in plot.ids){
points(p$x[[id]][[k]]$time, p$x[[id]][[k]][[2]],
type='l', col=plot.colors[[id]])
}
}
}
par(mfrow=c(1,1))
nrow = ceiling(sqrt(length(gal_levels)))
par(mfrow=c(nrow, nrow))
for (gal in gal_levels){
# empty plot
plot(numeric(0), numeric(0), xlim=xlimits, ylim=ylimits,
main=paste(f.level, '=', gal))
# find the simulation rows for the level &
# plot all the single simulations for the level
gal_rows <- which(pars[[f.level]]==gal)
for (k in gal_rows){
for (id in plot.ids){
points(p$x[[id]][[k]]$time, p$x[[id]][[k]][[2]],
type='l', col=plot.colors[[id]])
}
}
}
par(mfrow=c(1,1))
xlimits <- c(0.0, t_end)
nrow = ceiling(sqrt(length(gal_levels)))
par(mfrow=c(nrow, nrow))
for (gal in gal_levels){
# empty plot
plot(numeric(0), numeric(0), xlim=xlimits, ylim=ylimits,
main=paste(f.level, '=', gal))
# find the simulation rows for the level &
# plot all the single simulations for the level
gal_rows <- which(pars[[f.level]]==gal)
for (k in gal_rows){
for (id in plot.ids){
points(p$x[[id]][[k]]$time, p$x[[id]][[k]][[2]],
type='l', col=plot.colors[[id]])
}
}
}
par(mfrow=c(1,1))
library('matrixStats')
plotMeanCurves <- function(mlist, f.level, compounds, ccolors){
for (kc in seq(length(compounds))){
compound <- compounds[kc]
col <- ccolors[kc]
id <- paste('PV__', compound, sep='')
# different levels
plot.levels <- levels(as.factor(pars[[f.level]]))
for (p.level in plot.levels){
sim_rows <- which(pars[[f.level]]==p.level)
tmp <- mlist[[id]][ ,sim_rows]
w <- pars$Q_sinunit[sim_rows] # weighting with the volume flow F
row.means <- rowMeans(tmp)
row.wmeans <- rowWeightedMeans(tmp, w=w)
row.medians <- rowMedians(tmp)
row.wmedians <- rowWeightedMedians(tmp, w=w)
row.sds <- rowSds(tmp)
time = as.numeric(rownames(tmp))
points(time, row.wmeans, col=col, lwd=2, type='l', lty=1)
#points(time, row.wmeans+row.sds, col='Orange', lwd=2, type='l', lty=1)
#points(time, row.wmedians, col=col, lwd=2, type='l', lty=2)
points(time, row.means, col=col, lwd=0.5, type='l', lty=2)
#points(time, rowMedians(tmp), col=col, lwd=2, type='l', lty=3)
#points(time, rowMins(tmp), col='Red', lwd=2, type='l', lty=2)
#points(time, rowMaxs(tmp), col='Red', lwd=2, type='l', lty=2)
#points(time, rowQuantiles(tmp,probs=c(0.25)), col='Green', lwd=2, type='l', lty=3)
#points(time, rowQuantiles(tmp,probs=c(0.75)), col='Green', lwd=2, type='l', lty=3)
# lines for the max values
tmax.wmeans <- time[which.max(row.wmeans)]
cat("tmax [", id , "] = ", tmax.wmeans, "\n")
tmax.means <- time[which.max(row.means)]
abline(v=tmax.wmeans, col=col)
#abline(v=tmax.means, col=col)
}
}
}
t.approx = seq(from=t_peak-5, to=t_peak+50, by=0.2)
time <- t.approx
simIds <- rownames(pars)
mlist <- createApproximationMatrix(ids=ids, simIds=simIds, points=t.approx, reverse=FALSE)
ids <- paste(rep('PP__', length(compounds)), compounds)
compounds = c('gal', 'galM', 'rbcM', 'alb', 'suc', 'h2oM')
ids <- paste(rep('PP__', length(compounds)), compounds)
ids <- paste(rep('PP__', length(compounds)), compounds, sep='')
ids
ids <- c( paste(rep('PP__', length(compounds)), compounds, sep=''),
paste(rep('PV__', length(compounds)), compounds, sep=''))
ids
mlist <- createApproximationMatrix(ids=ids, simIds=simIds, points=t.approx, reverse=FALSE)
mlist <- createApproximationMatrix(p$x, ids=ids, simIds=simIds, points=t.approx, reverse=FALSE)
t.approx
compounds = c('gal', 'galM', 'rbcM', 'alb', 'suc', 'h2oM')
ccolors = c('gray', 'black', 'red', 'darkgreen', 'darkorange', 'darkblue')
f.level <- "PP__gal"
time.min=995
par(mfrow=c(2,1))
plot(numeric(0), numeric(0), log='y', xlim=c(time.min, 1025), ylim=c(1E-2,0.5))
plotMeanCurves(mlist, f.level, compounds, ccolors)
plot(numeric(0), numeric(0), xlim=c(time.min, 1025), ylim=c(0,0.3))
plotMeanCurves(mlist, f.level, compounds, ccolors)
par(mfrow=c(1,1))
pars.sorted <- pars[with(pars, order(y_cell, y_sin, L, y_dis, flow_sin, PP__gal)), ]
head(pars.sorted)
N=54
plot(numeric(0), numeric(0), xlim=c(time.min, 1025), ylim=c(0,0.3))
testIds = rownames(pars.sorted)[(1+N*5):(5+N*5)]
for (simId in testIds){
for (kc in seq(length(compounds))){
compound <- compounds[kc]
print(compound)
id <- paste('PV__', compound, sep="")
print(id)
col <- ccolors[kc]
time <- x[[id]][[simId]]$time
tmp.data <- x[[id]][[simId]][[2]]
points(time, tmp.data, type='l', col=col)
tmp.tmax <- time[which.max(tmp.data)]
abline(v=tmp.tmax, col=col)
}
}
N=54
plot(numeric(0), numeric(0), xlim=c(time.min, 1025), ylim=c(0,0.3))
testIds = rownames(pars.sorted)[(1+N*5):(5+N*5)]
for (simId in testIds){
for (kc in seq(length(compounds))){
compound <- compounds[kc]
print(compound)
id <- paste('PV__', compound, sep="")
print(id)
col <- ccolors[kc]
time <- p$x[[id]][[simId]]$time
tmp.data <- p$x[[id]][[simId]][[2]]
points(time, tmp.data, type='l', col=col)
tmp.tmax <- time[which.max(tmp.data)]
abline(v=tmp.tmax, col=col)
}
}
hist(pars$flow_sin, breaks = 40)
gal_levels
plotMeanCurves <- function(mlist, f.level, compounds, ccolors){
for (kc in seq(length(compounds))){
compound <- compounds[kc]
col <- ccolors[kc]
id <- paste('PV__', compound, sep='')
# different levels
# plot.levels <- levels(as.factor(pars[[f.level]]))
plot.levels = c("0.28", "12.5", "17.5")
for (p.level in plot.levels){
sim_rows <- which(pars[[f.level]]==p.level)
tmp <- mlist[[id]][ ,sim_rows]
w <- pars$Q_sinunit[sim_rows] # weighting with the volume flow F
row.means <- rowMeans(tmp)
row.wmeans <- rowWeightedMeans(tmp, w=w)
row.medians <- rowMedians(tmp)
row.wmedians <- rowWeightedMedians(tmp, w=w)
row.sds <- rowSds(tmp)
time = as.numeric(rownames(tmp))
points(time, row.wmeans, col=col, lwd=2, type='l', lty=1)
#points(time, row.wmeans+row.sds, col='Orange', lwd=2, type='l', lty=1)
#points(time, row.wmedians, col=col, lwd=2, type='l', lty=2)
points(time, row.means, col=col, lwd=0.5, type='l', lty=2)
#points(time, rowMedians(tmp), col=col, lwd=2, type='l', lty=3)
#points(time, rowMins(tmp), col='Red', lwd=2, type='l', lty=2)
#points(time, rowMaxs(tmp), col='Red', lwd=2, type='l', lty=2)
#points(time, rowQuantiles(tmp,probs=c(0.25)), col='Green', lwd=2, type='l', lty=3)
#points(time, rowQuantiles(tmp,probs=c(0.75)), col='Green', lwd=2, type='l', lty=3)
# lines for the max values
tmax.wmeans <- time[which.max(row.wmeans)]
cat("tmax [", id , "] = ", tmax.wmeans, "\n")
tmax.means <- time[which.max(row.means)]
abline(v=tmax.wmeans, col=col)
#abline(v=tmax.means, col=col)
}
}
}
# Dilution curves
t.approx = seq(from=t_peak-5, to=t_peak+50, by=0.2)
time <- t.approx
simIds <- rownames(pars)
compounds = c('gal', 'galM', 'rbcM', 'alb', 'suc', 'h2oM')
ids <- c( paste(rep('PP__', length(compounds)), compounds, sep=''),
paste(rep('PV__', length(compounds)), compounds, sep=''))
ids
t.approx
mlist <- createApproximationMatrix(p$x, ids=ids, simIds=simIds, points=t.approx, reverse=FALSE)
compounds = c('gal', 'galM', 'rbcM', 'alb', 'suc', 'h2oM')
ccolors = c('gray', 'black', 'red', 'darkgreen', 'darkorange', 'darkblue')
f.level <- "PP__gal"
time.min=995
par(mfrow=c(2,1))
plot(numeric(0), numeric(0), log='y', xlim=c(time.min, 1025), ylim=c(1E-2,0.5))
plotMeanCurves(mlist, f.level, compounds, ccolors)
plot(numeric(0), numeric(0), xlim=c(time.min, 1025), ylim=c(0,0.3))
plotMeanCurves(mlist, f.level, compounds, ccolors)
par(mfrow=c(1,1))
