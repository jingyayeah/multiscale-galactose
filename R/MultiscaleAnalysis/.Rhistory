test
test <- sub(".*__", "", c('PP__gal', 'PV__gal'))  ## spaces only
test
df.melt$name <- sub(".*__", "", df.melt$series)  ## spaces only
head(df.melt)
ggplot(df.melt, aes(time,value)) + geom_line(aes(colour = factor(name))) + scale_y_continuous(limits=ylimits) + scale_x_continuous(limits=xlimits)
ggplot(df.melt, aes(time,value)) + geom_line(aes(colour = name)) + scale_y_continuous(limits=ylimits) + scale_x_continuous(limits=xlimits)
# do the same with ggplot2
require(ggplot2)
require(reshape)
df.small <- df[,c('time', plot_ids)]
names(df.small)
# melt the data
df.melt <- melt(df.small, id.vars='time', variable_name = 'series')
# create additional column for name
# test <- sub(".*__", "", 'PP__gal')
df.melt$name <- sub(".*__", "", df.melt$series)
# plot on same grid, each series colored differently --
# good if the series have same scale
ggplot(df.melt, aes(time,value)) + geom_line(aes(colour = name)) + scale_y_continuous(limits=ylimits) + scale_x_continuous(limits=xlimits)
head(df.melt)
head(df.melt, n=40)
## makePlot.R
# Rscript makePlot.R sid
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
args <- commandArgs(trailingOnly = TRUE)
sim_id <- 'Sim479'
sim_file <- args[1]
out_dir <- args[2]
sim_file = '/home/mkoenig/multiscale-galactose-results/django/timecourse/T3/Galactose_v12_Nc20_dilution_Sim497_roadrunner.csv'
out_dir = '/home/mkoenig/multiscale-galactose-results/tmp_plot'
print(sim_file)
print(out_dir)
# create model dataframe for simulation
if (is.na(sim_file)){
print('No simulation file given')
}
# plot some components via ids
plotTimecourse <- function(df, ids, cols='Black'){
for (id in ids){
lines(df$time, df[[id]], col=cols)
}
}
df = readDataForSimulationFile(sim_file)
ids = names(df)
# subsets for plotting
pp_ids = ids[grep('PP__', names(df))]
pv_ids = ids[grep('PV__', names(df))]
H01_ids = ids[grep('H01__', names(df))]
gal_ids = ids[grep('__gal$', names(df))]
galM_ids = ids[grep('__galM$', names(df))]
adp_ids = ids[grep('__a[d,t]p', names(df))]
audp_ids = ids[grep('__[a,u][d,t]p$', names(df))]
# get the variables to plot & calculate the plot limits
names(df)
plot_ids <- c(pp_ids, pv_ids)
plot_cols <- c(rep('Black', length(pp_ids)),
rep('Blue', length(pv_ids)))
xlimits = c(min(df$time), max(df$time))
xlimits = c(0,100)
ylimits = c(min(df[,plot_ids]), max(df[,plot_ids]))
# create plot standard
do_file_plots = F
if (do_file_plots){
plot_file <- paste(out_dir, '/', task, "_", sim_id, '_plot1.png' , sep="")
print(plot_file)
png(filename=plot_file,
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
plot(numeric(0), numeric(), xlim=xlimits, ylim=ylimits, type='l')
plotTimecourse(df, plot_ids, cols=plot_cols)
if (do_file_plots){
dev.off()
}
# do the same with ggplot2
require(ggplot2)
require(reshape)
df.small <- df[,c('time', plot_ids)]
names(df.small)
# melt the data
df.melt <- melt(df.small, id.vars='time', variable_name = 'series')
# create additional column for name
# test <- sub(".*__", "", 'PP__gal')
#df.melt$name <- sub(".*__", "", df.melt$series)
#head(df.melt, n=40)
# plot on same grid, each series colored differently --
# good if the series have same scale
ggplot(df.melt, aes(time,value)) + geom_line(aes(colour = name)) + scale_y_continuous(limits=ylimits) + scale_x_continuous(limits=xlimits)
rm(list=ls())
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
args <- commandArgs(trailingOnly = TRUE)
sim_id <- 'Sim479'
sim_file <- args[1]
out_dir <- args[2]
sim_file = '/home/mkoenig/multiscale-galactose-results/django/timecourse/T3/Galactose_v12_Nc20_dilution_Sim497_roadrunner.csv'
out_dir = '/home/mkoenig/multiscale-galactose-results/tmp_plot'
print(sim_file)
print(out_dir)
# create model dataframe for simulation
if (is.na(sim_file)){
print('No simulation file given')
}
# plot some components via ids
plotTimecourse <- function(df, ids, cols='Black'){
for (id in ids){
lines(df$time, df[[id]], col=cols)
}
}
df = readDataForSimulationFile(sim_file)
ids = names(df)
# subsets for plotting
pp_ids = ids[grep('PP__', names(df))]
pv_ids = ids[grep('PV__', names(df))]
H01_ids = ids[grep('H01__', names(df))]
gal_ids = ids[grep('__gal$', names(df))]
galM_ids = ids[grep('__galM$', names(df))]
adp_ids = ids[grep('__a[d,t]p', names(df))]
audp_ids = ids[grep('__[a,u][d,t]p$', names(df))]
# get the variables to plot & calculate the plot limits
names(df)
plot_ids <- c(pp_ids, pv_ids)
plot_cols <- c(rep('Black', length(pp_ids)),
rep('Blue', length(pv_ids)))
xlimits = c(min(df$time), max(df$time))
xlimits = c(0,100)
ylimits = c(min(df[,plot_ids]), max(df[,plot_ids]))
# create plot standard
do_file_plots = F
if (do_file_plots){
plot_file <- paste(out_dir, '/', task, "_", sim_id, '_plot1.png' , sep="")
print(plot_file)
png(filename=plot_file,
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
plot(numeric(0), numeric(), xlim=xlimits, ylim=ylimits, type='l')
plotTimecourse(df, plot_ids, cols=plot_cols)
if (do_file_plots){
dev.off()
}
# do the same with ggplot2
require(ggplot2)
require(reshape)
df.small <- df[,c('time', plot_ids)]
names(df.small)
# melt the data
df.melt <- melt(df.small, id.vars='time', variable_name = 'series')
# create additional column for name
# test <- sub(".*__", "", 'PP__gal')
#df.melt$name <- sub(".*__", "", df.melt$series)
#head(df.melt, n=40)
# plot on same grid, each series colored differently --
# good if the series have same scale
ggplot(df.melt, aes(time,value)) + geom_line(aes(colour = name)) + scale_y_continuous(limits=ylimits) + scale_x_continuous(limits=xlimits)
df.melt$name <- sub(".*__", "", df.melt$series)
head(df.melt, n=40)
ggplot(df.melt, aes(time,value)) + geom_line(aes(colour = name)) + scale_y_continuous(limits=ylimits) + scale_x_continuous(limits=xlimits)
ggplot(df.melt, aes(time,value)) + geom_line(aes(colour=name, group=name)) + scale_y_continuous(limits=ylimits) + scale_x_continuous(limits=xlimits)
ggplot(df.melt, aes(time,value, colour=name, group=name)) + geom_line() + scale_y_continuous(limits=ylimits) + scale_x_continuous(limits=xlimits)
ggplot(df.melt, aes(x=time,y=value, colour=name, group=name)) + geom_line() + scale_y_continuous(limits=ylimits) + scale_x_continuous(limits=xlimits)
ggplot(df.melt, aes(x=time,y=value, colour=name, group=series)) + geom_line() + scale_y_continuous(limits=ylimits) + scale_x_continuous(limits=xlimits)
ggplot(df.small) + geom_line(aes(x=PP__gal,y=PV__gal))
ggplot(df.small) + geom_line(aes(x=PP__gal,y=PV__gal, col=time))
ggplot(df.small) + geom_line(aes(x=PP__gal,y=PV__gal, col=time))
+ geom_line(aes(x=PP__rbcM,y=PV__rbcM, col=time))
ggplot(df.small) + geom_line(aes(x=PP__gal,y=PV__gal, col=time)) + geom_line(aes(x=PP__rbcM,y=PV__rbcM, col=time))
rm(list=ls())
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
args <- commandArgs(trailingOnly = TRUE)
sim_id <- 'Sim1371'
sim_file <- args[1]
out_dir <- args[2]
sim_file = '/home/mkoenig/multiscale-galactose-results/django/timecourse/T10/Galactose_v15_Nc20_dilution_Sim1371_roadrunner.csv'
out_dir = '/home/mkoenig/multiscale-galactose-results/tmp_plot'
print(sim_file)
print(out_dir)
# create model dataframe for simulation
if (is.na(sim_file)){
print('No simulation file given')
}
# plot some components via ids
plotTimecourse <- function(df, ids, cols='Black'){
for (id in ids){
lines(df$time, df[[id]], col=cols)
}
}
df = readDataForSimulationFile(sim_file)
ids = names(df)
# subsets for plotting
pp_ids = ids[grep('PP__', names(df))]
pv_ids = ids[grep('PV__', names(df))]
H01_ids = ids[grep('H01__', names(df))]
gal_ids = ids[grep('__gal$', names(df))]
galM_ids = ids[grep('__galM$', names(df))]
adp_ids = ids[grep('__a[d,t]p', names(df))]
audp_ids = ids[grep('__[a,u][d,t]p$', names(df))]
# get the variables to plot & calculate the plot limits
names(df)
plot_ids <- c(pp_ids, pv_ids)
plot_cols <- c(rep('Black', length(pp_ids)),
rep('Blue', length(pv_ids)))
xlimits = c(min(df$time), max(df$time))
xlimits = c(0,100)
ylimits = c(min(df[,plot_ids]), max(df[,plot_ids]))
# create plot standard
do_file_plots = F
if (do_file_plots){
plot_file <- paste(out_dir, '/', task, "_", sim_id, '_plot1.png' , sep="")
print(plot_file)
png(filename=plot_file,
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
plot(numeric(0), numeric(), xlim=xlimits, ylim=ylimits, type='l')
plotTimecourse(df, plot_ids, cols=plot_cols)
if (do_file_plots){
dev.off()
}
xlimits = c(0,1200)
ylimits = c(min(df[,plot_ids]), max(df[,plot_ids]))
# create plot standard
do_file_plots = F
if (do_file_plots){
plot_file <- paste(out_dir, '/', task, "_", sim_id, '_plot1.png' , sep="")
print(plot_file)
png(filename=plot_file,
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
plot(numeric(0), numeric(), xlim=xlimits, ylim=ylimits, type='l')
plotTimecourse(df, plot_ids, cols=plot_cols)
if (do_file_plots){
dev.off()
}
names(df)
plot_ids <- c(pp_ids, pv_ids)
plot_cols <- c(rep('Black', length(pp_ids)),
rep('Blue', length(pv_ids)))
xlimits = c(min(df$time), max(df$time))
xlimits = c(1000,1200)
ylimits = c(min(df[,plot_ids]), max(df[,plot_ids]))
# create plot standard
do_file_plots = F
if (do_file_plots){
plot_file <- paste(out_dir, '/', task, "_", sim_id, '_plot1.png' , sep="")
print(plot_file)
png(filename=plot_file,
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
plot(numeric(0), numeric(), xlim=xlimits, ylim=ylimits, type='l')
plotTimecourse(df, plot_ids, cols=plot_cols)
if (do_file_plots){
dev.off()
}
xlimits = c(1000,1200)
ylimits = c(0,1)
# create plot standard
do_file_plots = F
if (do_file_plots){
plot_file <- paste(out_dir, '/', task, "_", sim_id, '_plot1.png' , sep="")
print(plot_file)
png(filename=plot_file,
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
plot(numeric(0), numeric(), xlim=xlimits, ylim=ylimits, type='l')
plotTimecourse(df, plot_ids, cols=plot_cols)
if (do_file_plots){
dev.off()
}
plotTimecourse(df, c('PV__galM'), cols=c('BLUE'))
library(MultiscaleAnalysis)
rm(list=ls())
library(data.table)
library(MultiscaleAnalysis)
library(libSBML)
library(matrixStats)
setwd(ma.settings$dir.results)
rm(list=ls())
library(data.table)
library(MultiscaleAnalysis)
library(libSBML)
library(matrixStats)
setwd(ma.settings$dir.results)
library(MultiscaleAnalysis)
folder <- '2014-08-27_T1'  # normal flow
source(file=file.path(ma.settings$dir.code, 'analysis', 'Preprocess.R'),
echo=TRUE, local=FALSE)
head(pars)
plot(pars$f_flow, flow_sin)
plot(pars$f_flow, pars$flow_sin)
boxplot(pars$f_flow, pars$flow_sin)
boxplot(pars$flow_sin, pars$f_flow)
library('ggplot2')
ggplot(pars, aes(factor(f_flow), flow_sin)) + geom_boxplot()
ps <- getParameterTypes(pars=pars)
f.sbml <- file.path(ma.settings$dir.results, folder, paste(modelId, '.xml', sep=''))
model <- loadSBMLModel(f.sbml)
pars <- extendParameterStructure(pars=pars, fixed_ps=ps$fixed, model=model)
head(pars)
# calculate the clearance parameters:
parscl <- createClearanceDataFrame(t_peak=2000, t_end=10000)
parscl <- parscl[parscl$c_in>0.0, ]
summary(parscl)
max(parscl$c_in)
parscl.max <- parscl[parscl$c_in == max(parscl$c_in), ]
head(parscl.max)
plot(parscl$flow_sin, parscl$R)
plot(parscl$f_flow, parscl$flow_sin)
parscl.max <- parscl[parscl$c_in == max(parscl$c_in) && parscl$f_flow==f_flow, ]
f_flow = 0.5
parscl.max <- parscl[parscl$c_in == max(parscl$c_in) && parscl$f_flow==f_flow, ]
head(parscl.max)
parscl$f_flow
parscl.max <- parscl[(parscl$c_in==max(parscl$c_in) && parscl$f_flow==f_flow), ]
head(parscl.max)
parscl.max <- parscl[parscl$f_flow==f_flow, ]
head(parscl.max)
f_flow = 0.5
# parscl.max <- parscl[(parscl$c_in==max(parscl$c_in) && parscl$f_flow==f_flow), ]
parscl.max <- parscl[parscl$f_flow==f_flow, ]
head(parscl.max)
# Part of the liver is large vessels. This has to be corrected for.
f_tissue <- 0.80;
Vol_liv <- parscl$Vol_liv[1]
# total flow samples
test <- list()
test$sum.Q_sinunit <- sum(parscl.max$Q_sinunit)     # [m^3/sec]
test$sum.Vol_sinunit <- sum(parscl.max$Vol_sinunit) # [m^3]
test$sum.R <- sum(parscl.max$R)                     # [mole/sec]
test$Q_sinunit_per_vol <- sum(parscl.max$Q_sinunit)/sum(parscl.max$Vol_sinunit) # [m^3/sec/m^3(liv)] = [ml/sec/ml(liv)]
test$R_per_vol <- sum(parscl.max$R)/sum(parscl.max$Vol_sinunit)                 # [mole/sec/m^3(liv)]
test$Q_sinunit_per_vol_units <- test$Q_sinunit_per_vol*60  # [ml/min/ml(liv)]
test$R_per_vol_units <- test$R_per_vol*60/1000             # [mmole/min/ml(liv)]
test$Q_sinunit_per_liv_units <- test$Q_sinunit_per_vol_units * Vol_liv*1E6     # [L/min]
test$R_per_liv_units <- test$R_per_vol*60/1000 * Vol_liv*1E6                   # [mmole/min]
test$Q_sinunit_tissue_per_liv_units <- test$Q_sinunit_per_vol_units * Vol_liv*1E6 *f_tissue     # [L/min]
test$R_tissue_per_liv_units <- test$R_per_vol*60/1000 * Vol_liv*1E6              *f_tissue     # [mmole/min]
test
f_flow = 0.1
# parscl.max <- parscl[(parscl$c_in==max(parscl$c_in) && parscl$f_flow==f_flow), ]
parscl.max <- parscl[parscl$f_flow==f_flow, ]
head(parscl.max)
# Part of the liver is large vessels. This has to be corrected for.
f_tissue <- 0.80;
Vol_liv <- parscl$Vol_liv[1]
# total flow samples
test <- list()
test$sum.Q_sinunit <- sum(parscl.max$Q_sinunit)     # [m^3/sec]
test$sum.Vol_sinunit <- sum(parscl.max$Vol_sinunit) # [m^3]
test$sum.R <- sum(parscl.max$R)                     # [mole/sec]
test$Q_sinunit_per_vol <- sum(parscl.max$Q_sinunit)/sum(parscl.max$Vol_sinunit) # [m^3/sec/m^3(liv)] = [ml/sec/ml(liv)]
test$R_per_vol <- sum(parscl.max$R)/sum(parscl.max$Vol_sinunit)                 # [mole/sec/m^3(liv)]
test$Q_sinunit_per_vol_units <- test$Q_sinunit_per_vol*60  # [ml/min/ml(liv)]
test$R_per_vol_units <- test$R_per_vol*60/1000             # [mmole/min/ml(liv)]
test$Q_sinunit_per_liv_units <- test$Q_sinunit_per_vol_units * Vol_liv*1E6     # [L/min]
test$R_per_liv_units <- test$R_per_vol*60/1000 * Vol_liv*1E6                   # [mmole/min]
test$Q_sinunit_tissue_per_liv_units <- test$Q_sinunit_per_vol_units * Vol_liv*1E6 *f_tissue     # [L/min]
test$R_tissue_per_liv_units <- test$R_per_vol*60/1000 * Vol_liv*1E6              *f_tissue     # [mmole/min]
test
f_flow = 0.1
# parscl.max <- parscl[(parscl$c_in==max(parscl$c_in) && parscl$f_flow==f_flow), ]
parscl.max <- parscl[parscl$f_flow==f_flow, ]
head(parscl.max)
# Part of the liver is large vessels. This has to be corrected for.
f_tissue <- 0.80;
Vol_liv <- parscl$Vol_liv[1]
# total flow samples
test <- list()
test$sum.Q_sinunit <- sum(parscl.max$Q_sinunit)     # [m^3/sec]
test$sum.Vol_sinunit <- sum(parscl.max$Vol_sinunit) # [m^3]
test$sum.R <- sum(parscl.max$R)                     # [mole/sec]
test$Q_sinunit_per_vol <- sum(parscl.max$Q_sinunit)/sum(parscl.max$Vol_sinunit) # [m^3/sec/m^3(liv)] = [ml/sec/ml(liv)]
test$R_per_vol <- sum(parscl.max$R)/sum(parscl.max$Vol_sinunit)                 # [mole/sec/m^3(liv)]
test$Q_sinunit_per_vol_units <- test$Q_sinunit_per_vol*60  # [ml/min/ml(liv)]
test$R_per_vol_units <- test$R_per_vol*60/1000             # [mmole/min/ml(liv)]
test$Q_sinunit_per_liv_units <- test$Q_sinunit_per_vol_units * Vol_liv*1E3     # [L/min]
test$R_per_liv_units <- test$R_per_vol*60 * Vol_liv*1E3                   # [mmole/min]
test$Q_sinunit_tissue_per_liv_units <- test$Q_sinunit_per_vol_units * Vol_liv*1E3 *f_tissue     # [L/min]
test$R_tissue_per_liv_units <- test$R_per_vol*60 * Vol_liv*1E3              *f_tissue     # [mmole/min]
test
f_flow = 0.1
# parscl.max <- parscl[(parscl$c_in==max(parscl$c_in) && parscl$f_flow==f_flow), ]
parscl.max <- parscl[parscl$f_flow==f_flow, ]
head(parscl.max)
# Part of the liver is large vessels. This has to be corrected for.
f_tissue <- 0.80;
Vol_liv <- parscl$Vol_liv[1]
# total flow samples
test <- list()
test$sum.Q_sinunit <- sum(parscl.max$Q_sinunit)     # [m^3/sec]
test$sum.Vol_sinunit <- sum(parscl.max$Vol_sinunit) # [m^3]
test$sum.R <- sum(parscl.max$R)                     # [mole/sec]
test$Q_sinunit_per_vol <- sum(parscl.max$Q_sinunit)/sum(parscl.max$Vol_sinunit) # [m^3/sec/m^3(liv)] = [ml/sec/ml(liv)]
test$R_per_vol <- sum(parscl.max$R)/sum(parscl.max$Vol_sinunit)                 # [mole/sec/m^3(liv)]
test$Q_sinunit_per_vol_units <- test$Q_sinunit_per_vol*60  # [ml/min/ml(liv)]
test$R_per_vol_units <- test$R_per_vol*60/1000             # [mmole/min/ml(liv)]
test$Q_sinunit_per_liv_units <- test$Q_sinunit_per_vol_units * Vol_liv*1E3     # [L/min]
test$R_per_liv_units <- test$R_per_vol*60 * Vol_liv*1E3                   # [mmole/min]
test$Q_sinunit_tissue_per_liv_units <- test$Q_sinunit_per_vol_units * Vol_liv*1E3 *f_tissue     # [L/min]
test$R_tissue_per_liv_units <- test$R_per_vol*60 * Vol_liv*1E3              *f_tissue     # [mmole/min]
test
f_flow = 0.1
# parscl.max <- parscl[(parscl$c_in==max(parscl$c_in) && parscl$f_flow==f_flow), ]
parscl.max <- parscl[parscl$f_flow==f_flow, ]
head(parscl.max)
# Part of the liver is large vessels. This has to be corrected for.
f_tissue <- 0.80;
Vol_liv <- parscl$Vol_liv[1]
# total flow samples
test <- list()
test$sum.Q_sinunit <- sum(parscl.max$Q_sinunit)     # [m^3/sec]
test$sum.Vol_sinunit <- sum(parscl.max$Vol_sinunit) # [m^3]
test$sum.R <- sum(parscl.max$R)                     # [mole/sec]
test$Q_sinunit_per_vol <- sum(parscl.max$Q_sinunit)/sum(parscl.max$Vol_sinunit) # [m^3/sec/m^3(liv)] = [ml/sec/ml(liv)]
test$R_per_vol <- sum(parscl.max$R)/sum(parscl.max$Vol_sinunit)                 # [mole/sec/m^3(liv)]
test$Q_sinunit_per_vol_units <- test$Q_sinunit_per_vol*60  # [ml/min/ml(liv)]
test$R_per_vol_units <- test$R_per_vol*60/1000             # [mmole/min/ml(liv)]
test$Q_sinunit_per_liv_units <- test$Q_sinunit_per_vol_units * Vol_liv*1E6     # [ml/min]
test$R_per_liv_units <- test$R_per_vol*60 * Vol_liv*1E3                        # [mmole/min]
test$Q_sinunit_tissue_per_liv_units <- test$Q_sinunit_per_vol_units * Vol_liv*1E6 *f_tissue     # [ml/min]
test$R_tissue_per_liv_units <- test$R_per_vol*60 * Vol_liv*1E3              *f_tissue     # [mmole/min]
test
Vol_liv <- parscl$Vol_liv[1]
Vol_liv
f_flow = 0.5
# parscl.max <- parscl[(parscl$c_in==max(parscl$c_in) && parscl$f_flow==f_flow), ]
parscl.max <- parscl[parscl$f_flow==f_flow, ]
head(parscl.max)
# Part of the liver is large vessels. This has to be corrected for.
f_tissue <- 0.80;
Vol_liv <- parscl$Vol_liv[1]
Vol_liv
# total flow samples
test <- list()
test$sum.Q_sinunit <- sum(parscl.max$Q_sinunit)     # [m^3/sec]
test$sum.Vol_sinunit <- sum(parscl.max$Vol_sinunit) # [m^3]
test$sum.R <- sum(parscl.max$R)                     # [mole/sec]
test$Q_sinunit_per_vol <- sum(parscl.max$Q_sinunit)/sum(parscl.max$Vol_sinunit) # [m^3/sec/m^3(liv)] = [ml/sec/ml(liv)]
test$R_per_vol <- sum(parscl.max$R)/sum(parscl.max$Vol_sinunit)                 # [mole/sec/m^3(liv)]
test$Q_sinunit_per_vol_units <- test$Q_sinunit_per_vol*60  # [ml/min/ml(liv)]
test$R_per_vol_units <- test$R_per_vol*60/1000             # [mmole/min/ml(liv)]
test$Q_sinunit_per_liv_units <- test$Q_sinunit_per_vol_units * Vol_liv*1E6     # [ml/min]
test$R_per_liv_units <- test$R_per_vol*60 * Vol_liv*1E3                        # [mmole/min]
test$Q_sinunit_tissue_per_liv_units <- test$Q_sinunit_per_vol_units * Vol_liv*1E6 *f_tissue     # [ml/min]
test$R_tissue_per_liv_units <- test$R_per_vol*60 * Vol_liv*1E3              *f_tissue     # [mmole/min]
test
f_flow = 0.4
# parscl.max <- parscl[(parscl$c_in==max(parscl$c_in) && parscl$f_flow==f_flow), ]
parscl.max <- parscl[parscl$f_flow==f_flow, ]
head(parscl.max)
# Part of the liver is large vessels. This has to be corrected for.
f_tissue <- 0.80;
Vol_liv <- parscl$Vol_liv[1]
Vol_liv
# total flow samples
test <- list()
test$sum.Q_sinunit <- sum(parscl.max$Q_sinunit)     # [m^3/sec]
test$sum.Vol_sinunit <- sum(parscl.max$Vol_sinunit) # [m^3]
test$sum.R <- sum(parscl.max$R)                     # [mole/sec]
test$Q_sinunit_per_vol <- sum(parscl.max$Q_sinunit)/sum(parscl.max$Vol_sinunit) # [m^3/sec/m^3(liv)] = [ml/sec/ml(liv)]
test$R_per_vol <- sum(parscl.max$R)/sum(parscl.max$Vol_sinunit)                 # [mole/sec/m^3(liv)]
test$Q_sinunit_per_vol_units <- test$Q_sinunit_per_vol*60  # [ml/min/ml(liv)]
test$R_per_vol_units <- test$R_per_vol*60/1000             # [mmole/min/ml(liv)]
test$Q_sinunit_per_liv_units <- test$Q_sinunit_per_vol_units * Vol_liv*1E6     # [ml/min]
test$R_per_liv_units <- test$R_per_vol*60 * Vol_liv*1E3                        # [mmole/min]
test$Q_sinunit_tissue_per_liv_units <- test$Q_sinunit_per_vol_units * Vol_liv*1E6 *f_tissue     # [ml/min]
test$R_tissue_per_liv_units <- test$R_per_vol*60 * Vol_liv*1E3              *f_tissue     # [mmole/min]
test
f_flow = 0.3
# parscl.max <- parscl[(parscl$c_in==max(parscl$c_in) && parscl$f_flow==f_flow), ]
parscl.max <- parscl[parscl$f_flow==f_flow, ]
head(parscl.max)
# Part of the liver is large vessels. This has to be corrected for.
f_tissue <- 0.80;
Vol_liv <- parscl$Vol_liv[1]
Vol_liv
# total flow samples
test <- list()
test$sum.Q_sinunit <- sum(parscl.max$Q_sinunit)     # [m^3/sec]
test$sum.Vol_sinunit <- sum(parscl.max$Vol_sinunit) # [m^3]
test$sum.R <- sum(parscl.max$R)                     # [mole/sec]
test$Q_sinunit_per_vol <- sum(parscl.max$Q_sinunit)/sum(parscl.max$Vol_sinunit) # [m^3/sec/m^3(liv)] = [ml/sec/ml(liv)]
test$R_per_vol <- sum(parscl.max$R)/sum(parscl.max$Vol_sinunit)                 # [mole/sec/m^3(liv)]
test$Q_sinunit_per_vol_units <- test$Q_sinunit_per_vol*60  # [ml/min/ml(liv)]
test$R_per_vol_units <- test$R_per_vol*60/1000             # [mmole/min/ml(liv)]
test$Q_sinunit_per_liv_units <- test$Q_sinunit_per_vol_units * Vol_liv*1E6     # [ml/min]
test$R_per_liv_units <- test$R_per_vol*60 * Vol_liv*1E3                        # [mmole/min]
test$Q_sinunit_tissue_per_liv_units <- test$Q_sinunit_per_vol_units * Vol_liv*1E6 *f_tissue     # [ml/min]
test$R_tissue_per_liv_units <- test$R_per_vol*60 * Vol_liv*1E3              *f_tissue     # [mmole/min]
test
f_flow = 0.2
# parscl.max <- parscl[(parscl$c_in==max(parscl$c_in) && parscl$f_flow==f_flow), ]
parscl.max <- parscl[parscl$f_flow==f_flow, ]
head(parscl.max)
# Part of the liver is large vessels. This has to be corrected for.
f_tissue <- 0.80;
Vol_liv <- parscl$Vol_liv[1]
Vol_liv
# total flow samples
test <- list()
test$sum.Q_sinunit <- sum(parscl.max$Q_sinunit)     # [m^3/sec]
test$sum.Vol_sinunit <- sum(parscl.max$Vol_sinunit) # [m^3]
test$sum.R <- sum(parscl.max$R)                     # [mole/sec]
test$Q_sinunit_per_vol <- sum(parscl.max$Q_sinunit)/sum(parscl.max$Vol_sinunit) # [m^3/sec/m^3(liv)] = [ml/sec/ml(liv)]
test$R_per_vol <- sum(parscl.max$R)/sum(parscl.max$Vol_sinunit)                 # [mole/sec/m^3(liv)]
test$Q_sinunit_per_vol_units <- test$Q_sinunit_per_vol*60  # [ml/min/ml(liv)]
test$R_per_vol_units <- test$R_per_vol*60/1000             # [mmole/min/ml(liv)]
test$Q_sinunit_per_liv_units <- test$Q_sinunit_per_vol_units * Vol_liv*1E6     # [ml/min]
test$R_per_liv_units <- test$R_per_vol*60 * Vol_liv*1E3                        # [mmole/min]
test$Q_sinunit_tissue_per_liv_units <- test$Q_sinunit_per_vol_units * Vol_liv*1E6 *f_tissue     # [ml/min]
test$R_tissue_per_liv_units <- test$R_per_vol*60 * Vol_liv*1E3              *f_tissue     # [mmole/min]
test
