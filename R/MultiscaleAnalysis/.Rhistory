parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
# Load the data
load(file=outfileFromParsFile(parsfile))
# Parameter processing
ps <- getParameterTypes(pars=pars)
# Extend the parameters with the SBML parameters and calculated parameters
fsbml <- file.path(ma.settings$dir.results, sname, paste(modelId, '.xml', sep=''))
model <- loadSBMLModel(fsbml)
pars <- extendParameterStructure(pars=pars, fixed_ps=ps$fixed, model=model)
head(pars)
# Standard distributions for normal case
p.gen <- loadStandardDistributions()
print(p.gen)
# ECDFs for standard distributions
ecdf.list <- createListOfStandardECDF(p.gen, ps$var)
# Calculate the probabilites for single variables
pars <- calculateProbabilitiesForVariables(pars, ecdf.list)
# And the overall probability per sample
pars <- calculateSampleProbability(pars, ps$var)
head(pars)
# Color definition based on probabilities
weights <- NULL
# weights = pars$p_sample
if (is.null(weights)){
ccols <- NULL
}else{
ccols <- getColorsForWeights(weights)
}
# Create the plots
print('weigths:')
weights
time = getTimeFromPreprocessMatrix(preprocess.mat)-10.0
plotMultipleIndicatorCurves(time, preprocess.mat, weights=NULL, ccols=ccols, create_plot_files=T)
plotMultipleIndicatorMean(time, preprocess.mat, weights=NULL, create_plot_files=T)
}
name="PV__rbcM"
time <- getTimeFromPreprocessMatrix(preprocess.mat) - 10.0
plotCompound(time, preprocess.mat[[name]], name, col=ccolors[name], ylim=c(0,1.2))
rm(list=ls())
library('MultiscaleAnalysis')
library('matrixStats')
library('RColorBrewer')
library('libSBML')
setwd(ma.settings$dir.results)
#------------------------------------------------------------------------------#
sname <- '2014-05-13_MultipleIndicator'
version <- 'v18'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, 'data')
task.offset <- 31
task.seq <- seq(0,2)
tasks <- paste('T', task.offset+task.seq, sep='')
peaks <- paste('P0', task.seq, sep='')
Ntask = length(tasks)
#------------------------------------------------------------------------------#
compounds = c('gal', 'rbcM', 'alb', 'suc', 'h2oM')
ccolors = c('black', 'red', 'darkgreen', 'darkorange', 'darkblue')
compounds = c('rbcM', 'alb', 'suc', 'h2oM')
ccolors = c('red', 'darkgreen', 'darkorange', 'darkblue')
pv_compounds = paste('PV__', compounds, sep='')
names(ccolors) <- pv_compounds
# Colors for probability weights
col2rgb_alpha <- function(col, alpha){
rgb <- rgb(col2rgb(col)[[1]]/256,col2rgb(col)[[2]]/256,col2rgb(col)[[3]]/256, alpha)
}
# Colors for weights
getColorsForWeights <- function (weights) {
print('getColorsForWeights')
ccol = 'gray'
Nsim = nrow(pars)
Ncol = 7
colpal <- brewer.pal(Ncol+2, 'Greys')
ccols = rep(colpal[1], Nsim)
maxValue = max(weights)
bw = maxValue/Ncol
for (k in seq(Ncol)){
ind <- which( (weights>((k-1)*bw)) & (weights <= (k*bw)))
ccols[ind] = colpal[k+2]
ccols[ind] = col2rgb_alpha(colpal[k+2], 0.7)
}
ccols
}
# Preprocess the parameters for scaling
# for (kt in seq(Ntask)){
for (kt in seq(1)){
task <- tasks[kt]
peak <- peaks[kt]
modelId <- paste('MultipleIndicator_', peak, '_', version, '_Nc20_Nf1', sep='')
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
# Load the data
load(file=outfileFromParsFile(parsfile))
# Parameter processing
ps <- getParameterTypes(pars=pars)
# Extend the parameters with the SBML parameters and calculated parameters
fsbml <- file.path(ma.settings$dir.results, sname, paste(modelId, '.xml', sep=''))
model <- loadSBMLModel(fsbml)
pars <- extendParameterStructure(pars=pars, fixed_ps=ps$fixed, model=model)
head(pars)
# Standard distributions for normal case
p.gen <- loadStandardDistributions()
print(p.gen)
# ECDFs for standard distributions
ecdf.list <- createListOfStandardECDF(p.gen, ps$var)
# Calculate the probabilites for single variables
pars <- calculateProbabilitiesForVariables(pars, ecdf.list)
# And the overall probability per sample
pars <- calculateSampleProbability(pars, ps$var)
head(pars)
# Color definition based on probabilities
weights <- NULL
# weights = pars$p_sample
if (is.null(weights)){
ccols <- NULL
}else{
ccols <- getColorsForWeights(weights)
}
# Create the plots
print('weigths:')
weights
time = getTimeFromPreprocessMatrix(preprocess.mat)-10.0
plotMultipleIndicatorCurves(time, preprocess.mat, weights=NULL, ccols=ccols, create_plot_files=T)
plotMultipleIndicatorMean(time, preprocess.mat, weights=NULL, create_plot_files=T)
}
name="PV__alb"
time <- getTimeFromPreprocessMatrix(preprocess.mat) - 10.0
plotCompound(time, preprocess.mat[[name]], name, col=ccolors[name], ylim=c(0,1.2))
name="PV__alb"
if (create_plot_files){
png(filename=paste(ma.settings$dir.results, '/', task, "_test_", name, sep=""),
width = 500, height = 500, units = "px", bg = "white",  res = 150)
}
time <- getTimeFromPreprocessMatrix(preprocess.mat) - 10.0
plotCompound(time, preprocess.mat[[name]], name, col=ccolors[name], ylim=c(0,1.2))
if (create_plot_files){
dev.off()
}
create_plot_files = TRUE
if (create_plot_files){
png(filename=paste(ma.settings$dir.results, '/', task, "_test_", name, sep=""),
width = 500, height = 500, units = "px", bg = "white",  res = 150)
}
time <- getTimeFromPreprocessMatrix(preprocess.mat) - 10.0
plotCompound(time, preprocess.mat[[name]], name, col=ccolors[name], ylim=c(0,1.2))
if (create_plot_files){
dev.off()
}
name="PV__alb"
create_plot_files = TRUE
if (create_plot_files){
png(filename=paste(ma.settings$dir.results, '/', task, "_test_", name, sep=""),
width = 500, height = 500, units = "px", bg = "white",  res = 200)
}
time <- getTimeFromPreprocessMatrix(preprocess.mat) - 10.0
plotCompound(time, preprocess.mat[[name]], name, col=ccolors[name], ylim=c(0,1.2))
if (create_plot_files){
dev.off()
}
# some example plots
name="PV__alb"
create_plot_files = TRUE
if (create_plot_files){
png(filename=paste(ma.settings$dir.results, '/', task, "_test_", name, sep=""),
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
time <- getTimeFromPreprocessMatrix(preprocess.mat) - 10.0
plotCompound(time, preprocess.mat[[name]], name, col=ccolors[name], ylim=c(0,1.2))
if (create_plot_files){
dev.off()
}
# some example plots
name="PP__alb"
create_plot_files = TRUE
if (create_plot_files){
png(filename=paste(ma.settings$dir.results, '/', task, "_test_", name, sep=""),
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
time <- getTimeFromPreprocessMatrix(preprocess.mat) - 10.0
plotCompound(time, preprocess.mat[[name]], name, col=ccolors[name], ylim=c(0,1.2))
if (create_plot_files){
dev.off()
}
max(preprocess.mat[["PP__alb"]]
max(preprocess.mat[["PP__alb"]])
max(preprocess.mat[["PP__alb"]])
max(preprocess.mat[["PP__alb"]])
# some example plots
name="PP__alb"
create_plot_files = TRUE
if (create_plot_files){
png(filename=paste(ma.settings$dir.results, '/', task, "_test_", name, sep=""),
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
time <- getTimeFromPreprocessMatrix(preprocess.mat) - 10.0
plotCompound(time, preprocess.mat[[name]], name, col=ccolors[name], ylim=c(0,2.1))
if (create_plot_files){
dev.off()
}
d800 <- read.table('/home/mkoenig/Desktop/Model-Coupling_Schwen/vascular-tree/transit_times_800')
hist(d800)
head(d800)
d800 <- read.table('/home/mkoenig/Desktop/Model-Coupling_Schwen/vascular-tree/transit_times_800', as.numeric)
d800 <- read.table('/home/mkoenig/Desktop/Model-Coupling_Schwen/vascular-tree/transit_times_800', colClasses=numeric)
d800 <- read.table('/home/mkoenig/Desktop/Model-Coupling_Schwen/vascular-tree/transit_times_800', colClasses=c('numeric'))
head(d800)
hist(d800)
hist(d800$V1)
hist(d800$V1, breaks=20)
hist(d800$V1, breaks=20, xlab=c("time [s]")
hist(d800$V1, breaks=20, xlab=c("time [s]"))
hist(d800$V1, breaks=20, xlab="time [s]")
library(MultiscaleAnalysis)
rm(list=ls())
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
install.packages('matrixStats')
rm(list=ls())
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
sname <- '2014-05-27_Demo'
modelId <- paste('Koenig2014_demo_kinetic_v7')
task <- 'T1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
plotParameterHistogramFull(pars)
pars
head(pars)
plotParameterHistogramFull(pars)
pnames = getParameterNames(pars)
pnames
names(pars)
names(pars)[1]
names(pars)[1][1:3]
sname <- '2014-05-27_Demo'
modelId <- paste('Koenig2014_demo_kinetic_v7')
task <- 'T1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
names(pars)
library(MultiscaleAnalysis)
sname <- '2014-05-11_Demo'
modelVersion <- 'v14_Nc20_Nf1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, 'data')
load_with_sims = FALSE;
task = 'T12'
modelId <- 'Koenig2014_demo_kinetic_v7'
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
sname <- '2014-05-27_Demo'
modelId <- paste('Koenig2014_demo_kinetic_v7')
task <- 'T1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
names(pars)
gsub('X..', '', names(pars))
names(pars) <- gsub('X..', '', names(pars))
names(pars)
library(MultiscaleAnalysis)
rm(list=ls())
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
sname <- '2014-05-27_Demo'
modelId <- paste('Koenig2014_demo_kinetic_v7')
task <- 'T1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
names(pars)
library(MultiscaleAnalysis)
sname <- '2014-05-27_Demo'
modelId <- paste('Koenig2014_demo_kinetic_v7')
task <- 'T1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
names(pars)
plotParameterHistogramFull(pars)
hist(pars$duration)
strptime(pars$duration)
strptime(pars$duration, format="%H:%M:%S")
pars$duration
library(MultiscaleAnalysis)
# install.packages('data.table')
install.packages('matrixStats')
rm(list=ls())
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
sname <- '2014-05-27_Demo'
modelId <- paste('Koenig2014_demo_kinetic_v7')
task <- 'T1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
plotParameterHistogramFull(pars)
# do the preprocessing (here all columns)
# what is written in the CSV?
outFile <- preprocess(parsfile, ma.settings$dir.simdata)
install.packages("matrixStats")
rm(list=ls())
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
sname <- '2014-05-27_Demo'
modelId <- paste('Koenig2014_demo_kinetic_v7')
task <- 'T1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
plotParameterHistogramFull(pars)
# do the preprocessing (here all columns)
# what is written in the CSV?
outFile <- preprocess(parsfile, ma.settings$dir.simdata)
library(MultiscaleAnalysis)
rm(list=ls())
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
sname <- '2014-05-27_Demo'
modelId <- paste('Koenig2014_demo_kinetic_v7')
task <- 'T1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
plotParameterHistogramFull(pars)
# do the preprocessing (here all columns)
# what is written in the CSV?
outFile <- preprocess(parsfile, ma.settings$dir.simdata)
library(MultiscaleAnalysis)
rm(list=ls())
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
sname <- '2014-05-27_Demo'
modelId <- paste('Koenig2014_demo_kinetic_v7')
task <- 'T1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
plotParameterHistogramFull(pars)
# do the preprocessing (here all columns)
# what is written in the CSV?
outFile <- preprocess(parsfile, ma.settings$dir.simdata)
library(MultiscaleAnalysis)
rm(list=ls())
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
sname <- '2014-05-27_Demo'
modelId <- paste('Koenig2014_demo_kinetic_v7')
task <- 'T1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
plotParameterHistogramFull(pars)
# do the preprocessing (here all columns)
# what is written in the CSV?
outFile <- preprocess(parsfile, ma.settings$dir.simdata)
library(MultiscaleAnalysis)
library(MultiscaleAnalysis)
library(MultiscaleAnalysis)
rm(list=ls())
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
sname <- '2014-05-27_Demo'
modelId <- paste('Koenig2014_demo_kinetic_v7')
task <- 'T1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
plotParameterHistogramFull(pars)
# do the preprocessing (here all columns)
# what is written in the CSV?
outFile <- preprocess(parsfile, ma.settings$dir.simdata)
# load the preprocessed data
load(outFile)
preprocess.list[[1]]
head(preprocess.list[[1]])
tmp <- head(preprocess.list[[1]])
plot(tmp$time, tmp$[A_in])
library(MultiscaleAnalysis)
rm(list=ls())
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
sname <- '2014-05-27_Demo'
modelId <- paste('Koenig2014_demo_kinetic_v7')
task <- 'T1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
plotParameterHistogramFull(pars)
# do the preprocessing (here all columns)
# what is written in the CSV?
outFile <- preprocess(parsfile, ma.settings$dir.simdata)
# load the preprocessed data
load(outFile)
tmp <- head(preprocess.list[[1]])
plot(tmp$time, tmp$A_in)
help(gsub)
rm(list=ls())
library(data.table)
library(libSBML)
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
sname <- '2014-05-11_Demo'
modelVersion <- 'v14_Nc20_Nf1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, 'data')
load_with_sims = FALSE;
task = 'T12'
modelId <- 'Koenig2014_demo_kinetic_v7'
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
head(parsfile)
# Load the data
if (load_with_sims == FALSE){
# only load the parameters:
pars <- loadParameterFile(parsfile)
} else {
# preprocessing necessary for loading the data with the parameters
load(file=outfileFromParsFile(parsfile))
}
print(summary(pars))
names(pars)
rm(list=ls())
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
sname <- '2014-05-27_Demo'
modelId <- paste('Koenig2014_demo_kinetic_v7')
task <- 'T1'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, task)
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
head(pars)
plotParameterHistogramFull(pars)
# do the preprocessing (here all columns)
# what is written in the CSV?
outFile <- preprocess(parsfile, ma.settings$dir.simdata)
library(MultiscaleAnalysis)
outFile <- preprocess(parsfile, ma.settings$dir.simdata)
# load the preprocessed data
load(outFile)
tmp <- preprocess.list[1]
head(tmp)
plot(tmp$time, tmp$A_in)
plot(tmp$A_in)
head(tmp)
head(tmp$time)
head(tmp[['time']])
names(tmp)
tmp <- preprocess.list[[1]
head(tmp)
tmp <- preprocess.list[[1]]
head(tmp)
plot(tmp$A_in)
plot(tmp$time, tmp$A_in)
x <- 1:10
y <- rnorm(10)
par(mfrow = c(2,1))
plot(x, y, main = "approx(.) and approxfun(.)")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
plot(tmp$time, tmp$A_in)
x <- 1:10
y <- rnorm(10)
par(mfrow = c(2,1))
plot(x, y, main = "approx(.) and approxfun(.)")
points(approx(x, y), col = 2, pch = "*")
points(approx(x, y, method = "constant"), col = 4, pch = "*")
