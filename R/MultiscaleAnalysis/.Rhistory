plotCompoundScatter(time, MI.mat[[name]][,], name, col=ccolors[name], ylim=c(0,0.8))
install.packages('KernSmooth')
library('KernSmooth')
persp(est$fhat)
data(geyser, package="MASS")
x <- cbind(geyser$duration, geyser$waiting)
est <- bkde2D(x, bandwidth=c(0.7, 7))
contour(est$x1, est$x2, est$fhat)
persp(est$fhat)
contour(est$x1, est$x2, est$fhat)
plot2Ddensity <- function(time, data, name, col="black", ylim=c(0.0, 0.2), xlim=c(0, 30)){
library('KernSmooth')
# prepare data
Nsim <- ncol(data)
Nt <- nrow(data)
x <- matrix(NA, nrow=Nsim*Nt, ncol=2)
for (ks in seq(Nsim)){
indices <- ((ks-1)*Nsim+1):(ks*Nsim)
x[indices,] <- cbind(time, data[, ks])
}
est <- bkde2D(x, bandwidth=c(5, 0.02))
contour(est$x1, est$x2, est$fhat)
}
plot2Ddensity(time, MI.mat[[name]][,], name, col=ccolors[name], ylim=c(0,0.8))
plot2Ddensity <- function(time, data, name, col="black", ylim=c(0.0, 0.2), xlim=c(0, 30)){
library('KernSmooth')
# prepare data
Nsim <- ncol(data)
Nt <- nrow(data)
x <- matrix(NA, nrow=Nsim*Nt, ncol=2)
for (ks in seq(Nsim)){
indices <- ((ks-1)*Nsim+1):(ks*Nsim)
indices
tmp <- cbind(time, data[, ks])
dim(tmp)
x[indices,] <- tmp
}
est <- bkde2D(x, bandwidth=c(5, 0.02))
contour(est$x1, est$x2, est$fhat)
}
plot2Ddensity(time, MI.mat[[name]][,], name, col=ccolors[name], ylim=c(0,0.8))
plot2Ddensity <- function(time, data, name, col="black", ylim=c(0.0, 0.2), xlim=c(0, 30)){
library('KernSmooth')
# prepare data
Nsim <- ncol(data)
Nt <- nrow(data)
x <- matrix(NA, nrow=Nsim*Nt, ncol=2)
for (ks in seq(Nsim)){
indices <- ((ks-1)*Nsim+1):(ks*Nsim)
print(indices)
tmp <- cbind(time, data[, ks])
print(dim(tmp))
x[indices,] <- tmp
}
est <- bkde2D(x, bandwidth=c(5, 0.02))
contour(est$x1, est$x2, est$fhat)
}
plot2Ddensity(time, MI.mat[[name]][,], name, col=ccolors[name], ylim=c(0,0.8))
plot2Ddensity <- function(time, data, name, col="black", ylim=c(0.0, 0.2), xlim=c(0, 30)){
library('KernSmooth')
# prepare data
Nsim <- ncol(data)
Nt <- nrow(data)
x <- matrix(NA, nrow=Nsim*Nt, ncol=2)
for (ks in seq(Nsim)){
indices <- ((ks-1)*Nsim+1):(ks*Nsim)
print(indices)
tmp <- cbind(time, data[, ks])
print(dim(tmp))
print(tmp)
x[indices,] <- tmp
}
est <- bkde2D(x, bandwidth=c(5, 0.02))
contour(est$x1, est$x2, est$fhat)
}
plot2Ddensity(time, MI.mat[[name]][,], name, col=ccolors[name], ylim=c(0,0.8))
plot2Ddensity <- function(time, data, name, col="black", ylim=c(0.0, 0.2), xlim=c(0, 30)){
library('KernSmooth')
# prepare data
Nsim <- ncol(data)
Nt <- nrow(data)
x <- matrix(NA, nrow=Nsim*Nt, ncol=2)
for (ks in seq(Nsim)){
indices <- ((ks-1)*Nsim+1):(ks*Nsim)
print(indices)
tmp <- cbind(time, data[, ks])
print(dim(tmp))
print(length(indices))
x[indices,] <- tmp
}
est <- bkde2D(x, bandwidth=c(5, 0.02))
contour(est$x1, est$x2, est$fhat)
}
plot2Ddensity(time, MI.mat[[name]][,], name, col=ccolors[name], ylim=c(0,0.8))
plot2Ddensity <- function(time, data, name, col="black", ylim=c(0.0, 0.2), xlim=c(0, 30)){
library('KernSmooth')
# prepare data
Nsim <- ncol(data)
Nt <- nrow(data)
print(Nt)
Nt <- length(time)
print(Nt)
x <- matrix(NA, nrow=Nsim*Nt, ncol=2)
for (ks in seq(Nsim)){
indices <- ((ks-1)*Nsim+1):(ks*Nsim)
print(indices)
tmp <- cbind(time, data[, ks])
print(dim(tmp))
print(length(indices))
x[indices,] <- tmp
}
est <- bkde2D(x, bandwidth=c(5, 0.02))
contour(est$x1, est$x2, est$fhat)
}
name="PV__alb"
plot2Ddensity(time, MI.mat[[name]][,], name, col=ccolors[name], ylim=c(0,0.8))
plot2Ddensity <- function(time, data, name, col="black", ylim=c(0.0, 0.2), xlim=c(0, 30)){
library('KernSmooth')
# prepare data
Nsim <- ncol(data)
Nt <- nrow(data)
print(Nt)
Nt <- length(time)
print(Nt)
x <- matrix(NA, nrow=Nsim*Nt, ncol=2)
for (ks in seq(Nsim)){
indices <- ((ks-1)*Nt+1):(ks*Nt)
print(indices)
tmp <- cbind(time, data[, ks])
print(dim(tmp))
print(length(indices))
x[indices,] <- tmp
}
est <- bkde2D(x, bandwidth=c(5, 0.02))
contour(est$x1, est$x2, est$fhat)
}
name="PV__alb"
plot2Ddensity(time, MI.mat[[name]][,], name, col=ccolors[name], ylim=c(0,0.8))
plot2Ddensity <- function(time, data, name, col="black", ylim=c(0.0, 0.2), xlim=c(0, 30)){
library('KernSmooth')
# prepare data
Nsim <- ncol(data)
Nt <- nrow(data)
Nt <- length(time)
x <- matrix(NA, nrow=Nsim*Nt, ncol=2)
for (ks in seq(Nsim)){
indices <- ((ks-1)*Nt+1):(ks*Nt)
tmp <- cbind(time, data[, ks])
x[indices,] <- tmp
}
est <- bkde2D(x, bandwidth=c(5, 0.1))
contour(est$x1, est$x2, est$fhat)
}
name="PV__alb"
plot2Ddensity(time, MI.mat[[name]][,], name, col=ccolors[name], ylim=c(0,0.8))
plot2Ddensity <- function(time, data, name, col="black", ylim=c(0.0, 0.2), xlim=c(0, 30)){
library('KernSmooth')
# prepare data
Nsim <- ncol(data)
Nt <- nrow(data)
Nt <- length(time)
x <- matrix(NA, nrow=Nsim*Nt, ncol=2)
for (ks in seq(Nsim)){
indices <- ((ks-1)*Nt+1):(ks*Nt)
tmp <- cbind(time, data[, ks])
x[indices,] <- tmp
}
est <- bkde2D(x, bandwidth=c(5, 0.1))
contour(est$x1, est$x2, est$fhat, xlim=c(0,100), ylim=c(0, 0.5))
}
name="PV__alb"
plot2Ddensity(time, MI.mat[[name]][,], name, col=ccolors[name], ylim=c(0,0.8))
time
find(time<100)
find(time<100)
which(time<100)
which(time<100)[-1]
length(which(time<100))
plot2Ddensity <- function(time, data, name, col="black", ylim=c(0.0, 0.2), xlim=c(0, 30)){
library('KernSmooth')
# prepare data
Nsim <- ncol(data)
tmax_ind <- length(which(time<100))
Nt <- length(time[1,tmax_ind])
x <- matrix(NA, nrow=Nsim*Nt, ncol=2)
for (ks in seq(Nsim)){
indices <- ((ks-1)*Nt+1):(ks*Nt)
tmp <- cbind(time[1:tmax_ind], data[1:tmax_ind, ks])
x[indices,] <- tmp
}
est <- bkde2D(x, bandwidth=c(5, 0.1))
contour(est$x1, est$x2, est$fhat, xlim=c(0,100), ylim=c(0, 0.5))
}
name="PV__alb"
plot2Ddensity(time, MI.mat[[name]][,], name, col=ccolors[name], ylim=c(0,0.8))
plot2Ddensity <- function(time, data, name, col="black", ylim=c(0.0, 0.2), xlim=c(0, 30)){
library('KernSmooth')
# prepare data
Nsim <- ncol(data)
tmax_ind <- length(which(time<100))
Nt <- length(time[1:tmax_ind])
x <- matrix(NA, nrow=Nsim*Nt, ncol=2)
for (ks in seq(Nsim)){
indices <- ((ks-1)*Nt+1):(ks*Nt)
tmp <- cbind(time[1:tmax_ind], data[1:tmax_ind, ks])
x[indices,] <- tmp
}
est <- bkde2D(x, bandwidth=c(5, 0.1))
contour(est$x1, est$x2, est$fhat, xlim=c(0,100), ylim=c(0, 0.5))
}
name="PV__alb"
plot2Ddensity(time, MI.mat[[name]][,], name, col=ccolors[name], ylim=c(0,0.8))
plot2Ddensity <- function(time, data, name, col="black", ylim=c(0.0, 0.2), xlim=c(0, 30)){
library('KernSmooth')
# prepare data
Nsim <- ncol(data)
tmax_ind <- length(which(time<100))
Nt <- length(time[1:tmax_ind])
x <- matrix(NA, nrow=Nsim*Nt, ncol=2)
for (ks in seq(Nsim)){
indices <- ((ks-1)*Nt+1):(ks*Nt)
tmp <- cbind(time[1:tmax_ind], data[1:tmax_ind, ks])
x[indices,] <- tmp
}
est <- bkde2D(x, bandwidth=c(5, 0.1))
contour(est$x1, est$x2, est$fhat)
}
name="PV__alb"
plot2Ddensity(time, MI.mat[[name]][,], name, col=ccolors[name], ylim=c(0,0.8))
plot2Ddensity <- function(time, data, name, col="black", ylim=c(0.0, 0.2), xlim=c(0, 30)){
library('KernSmooth')
# prepare data
Nsim <- ncol(data)
tmax_ind <- length(which(time<100))
Nt <- length(time[1:tmax_ind])
x <- matrix(NA, nrow=Nsim*Nt, ncol=2)
for (ks in seq(Nsim)){
indices <- ((ks-1)*Nt+1):(ks*Nt)
tmp <- cbind(time[1:tmax_ind], data[1:tmax_ind, ks])
x[indices,] <- tmp
}
est <- bkde2D(x, bandwidth=c(5, 0.1), gridsize=c(100,100), range.x=list(c(0,100), c(0,0.5)) )
contour(est$x1, est$x2, est$fhat)
}
name="PV__alb"
plot2Ddensity(time, MI.mat[[name]][,], name, col=ccolors[name], ylim=c(0,0.8))
plot2Ddensity <- function(time, data, name, col="black", ylim=c(0.0, 0.2), xlim=c(0, 30)){
library('KernSmooth')
# prepare data
Nsim <- ncol(data)
tmax_ind <- length(which(time<100))
Nt <- length(time[1:tmax_ind])
x <- matrix(NA, nrow=Nsim*Nt, ncol=2)
for (ks in seq(Nsim)){
indices <- ((ks-1)*Nt+1):(ks*Nt)
tmp <- cbind(time[1:tmax_ind], data[1:tmax_ind, ks])
x[indices,] <- tmp
}
est <- bkde2D(x, bandwidth=c(1, 0.05), gridsize=c(200,200), range.x=list(c(0,100), c(0,0.5)) )
contour(est$x1, est$x2, est$fhat)
}
name="PV__alb"
plot2Ddensity(time, MI.mat[[name]][,], name, col=ccolors[name], ylim=c(0,0.8))
plot2Ddensity <- function(time, data, name, col="black", ylim=c(0.0, 0.2), xlim=c(0, 30)){
library('KernSmooth')
# prepare data
Nsim <- ncol(data)
tmax_ind <- length(which(time<100))
Nt <- length(time[1:tmax_ind])
x <- matrix(NA, nrow=Nsim*Nt, ncol=2)
for (ks in seq(Nsim)){
indices <- ((ks-1)*Nt+1):(ks*Nt)
tmp <- cbind(time[1:tmax_ind], data[1:tmax_ind, ks])
x[indices,] <- tmp
}
est <- bkde2D(x, bandwidth=c(1, 0.1), gridsize=c(200,200), range.x=list(c(0,100), c(0,0.5)) )
contour(est$x1, est$x2, est$fhat)
}
name="PV__alb"
plot2Ddensity(time, MI.mat[[name]][,], name, col=ccolors[name], ylim=c(0,0.8))
plot2Ddensity <- function(time, data, name, col="black", ylim=c(0.0, 0.2), xlim=c(0, 30)){
library('KernSmooth')
# prepare data
Nsim <- ncol(data)
tmax_ind <- length(which(time<100))
Nt <- length(time[1:tmax_ind])
x <- matrix(NA, nrow=Nsim*Nt, ncol=2)
for (ks in seq(Nsim)){
indices <- ((ks-1)*Nt+1):(ks*Nt)
tmp <- cbind(time[1:tmax_ind], data[1:tmax_ind, ks])
x[indices,] <- tmp
}
est <- bkde2D(x, bandwidth=c(1, 0.05), gridsize=c(100,100), range.x=list(c(0,100), c(0,0.5)) )
contour(est$x1, est$x2, est$fhat)
}
name="PV__alb"
plot2Ddensity(time, MI.mat[[name]][,], name, col=ccolors[name], ylim=c(0,0.8))
plot2Ddensity <- function(time, data, name, col="black", ylim=c(0.0, 0.2), xlim=c(0, 30)){
library('KernSmooth')
# prepare data
Nsim <- ncol(data)
tmax_ind <- length(which(time<100))
Nt <- length(time[1:tmax_ind])
x <- matrix(NA, nrow=Nsim*Nt, ncol=2)
for (ks in seq(Nsim)){
indices <- ((ks-1)*Nt+1):(ks*Nt)
tmp <- cbind(time[1:tmax_ind], data[1:tmax_ind, ks])
x[indices,] <- tmp
}
est <- bkde2D(x, bandwidth=c(5, 0.05), gridsize=c(100,100), range.x=list(c(0,100), c(0,0.5)) )
contour(est$x1, est$x2, est$fhat)
}
name="PV__alb"
plot2Ddensity(time, MI.mat[[name]][,], name, col=ccolors[name], ylim=c(0,0.8))
plot2Ddensity <- function(time, data, name, col="black", ylim=c(0.0, 0.2), xlim=c(0, 30)){
library('KernSmooth')
# prepare data
Nsim <- ncol(data)
tmax_ind <- length(which(time<100))
Nt <- length(time[1:tmax_ind])
x <- matrix(NA, nrow=Nsim*Nt, ncol=2)
for (ks in seq(Nsim)){
indices <- ((ks-1)*Nt+1):(ks*Nt)
tmp <- cbind(time[1:tmax_ind], data[1:tmax_ind, ks])
x[indices,] <- tmp
}
est <- bkde2D(x, bandwidth=c(2, 0.05), gridsize=c(100,100), range.x=list(c(0,100), c(0,0.5)) )
contour(est$x1, est$x2, est$fhat)
}
name="PV__alb"
plot2Ddensity(time, MI.mat[[name]][,], name, col=ccolors[name], ylim=c(0,0.8))
plot2Ddensity <- function(time, data, name, col="black", ylim=c(0.0, 0.2), xlim=c(0, 30)){
library('KernSmooth')
# prepare data
Nsim <- ncol(data)
tmax_ind <- length(which(time<100))
Nt <- length(time[1:tmax_ind])
x <- matrix(NA, nrow=Nsim*Nt, ncol=2)
for (ks in seq(Nsim)){
indices <- ((ks-1)*Nt+1):(ks*Nt)
tmp <- cbind(time[1:tmax_ind], data[1:tmax_ind, ks])
x[indices,] <- tmp
}
est <- bkde2D(x, bandwidth=c(2, 0.05), gridsize=c(100,100), range.x=list(c(0,100), c(0,0.5)) )
contour(est$x1, est$x2, est$fhat)
# plot the mean and variance for time courses
# TODO how to better calculate -> what error measurment to use
rmean <- rowMeans(data)
rstd <- rowSds(data)
lines(time, rmean, col=col, lwd=2)
lines(time, rmean+rstd, col=col, lwd=2, lty=2)
lines(time, rmean-rstd, col=col, lwd=2, lty=2)
}
name="PV__alb"
plot2Ddensity(time, MI.mat[[name]][,], name, col=ccolors[name], ylim=c(0,0.8))
plot2Ddensity <- function(time, data, name, col="black", ylim=c(0.0, 0.2), xlim=c(0, 30)){
library('KernSmooth')
# prepare data
Nsim <- ncol(data)
tmax_ind <- length(which(time<100))
Nt <- length(time[1:tmax_ind])
x <- matrix(NA, nrow=Nsim*Nt, ncol=2)
for (ks in seq(Nsim)){
indices <- ((ks-1)*Nt+1):(ks*Nt)
tmp <- cbind(time[1:tmax_ind], data[1:tmax_ind, ks])
x[indices,] <- tmp
}
est <- bkde2D(x, bandwidth=c(2, 0.01), gridsize=c(100,100), range.x=list(c(0,100), c(0,0.5)) )
contour(est$x1, est$x2, est$fhat)
# plot the mean and variance for time courses
# TODO how to better calculate -> what error measurment to use
rmean <- rowMeans(data)
rstd <- rowSds(data)
lines(time, rmean, col=col, lwd=2)
lines(time, rmean+rstd, col=col, lwd=2, lty=2)
lines(time, rmean-rstd, col=col, lwd=2, lty=2)
}
name="PV__alb"
plot2Ddensity(time, MI.mat[[name]][,], name, col=ccolors[name], ylim=c(0,0.8))
plot2Ddensity <- function(time, data, name, col="black", ylim=c(0.0, 0.2), xlim=c(0, 30)){
library('KernSmooth')
# prepare data
Nsim <- ncol(data)
tmax_ind <- length(which(time<100))
Nt <- length(time[1:tmax_ind])
x <- matrix(NA, nrow=Nsim*Nt, ncol=2)
for (ks in seq(Nsim)){
indices <- ((ks-1)*Nt+1):(ks*Nt)
tmp <- cbind(time[1:tmax_ind], data[1:tmax_ind, ks])
x[indices,] <- tmp
}
est <- bkde2D(x, bandwidth=c(2, 0.1), gridsize=c(100,100), range.x=list(c(0,100), c(0,0.5)) )
contour(est$x1, est$x2, est$fhat)
# plot the mean and variance for time courses
# TODO how to better calculate -> what error measurment to use
rmean <- rowMeans(data)
rstd <- rowSds(data)
lines(time, rmean, col=col, lwd=2)
lines(time, rmean+rstd, col=col, lwd=2, lty=2)
lines(time, rmean-rstd, col=col, lwd=2, lty=2)
}
name="PV__alb"
plot2Ddensity(time, MI.mat[[name]][,], name, col=ccolors[name], ylim=c(0,0.8))
plot2Ddensity <- function(time, data, name, col="black", ylim=c(0.0, 0.2), xlim=c(0, 30)){
library('KernSmooth')
# prepare data
Nsim <- ncol(data)
tmax_ind <- length(which(time<100))
Nt <- length(time[1:tmax_ind])
x <- matrix(NA, nrow=Nsim*Nt, ncol=2)
for (ks in seq(Nsim)){
indices <- ((ks-1)*Nt+1):(ks*Nt)
tmp <- cbind(time[1:tmax_ind], data[1:tmax_ind, ks])
x[indices,] <- tmp
}
est <- bkde2D(x, bandwidth=c(2, 0.02), gridsize=c(100,200), range.x=list(c(0,100), c(0,0.5)) )
contour(est$x1, est$x2, est$fhat)
# plot the mean and variance for time courses
# TODO how to better calculate -> what error measurment to use
rmean <- rowMeans(data)
rstd <- rowSds(data)
lines(time, rmean, col=col, lwd=2)
lines(time, rmean+rstd, col=col, lwd=2, lty=2)
lines(time, rmean-rstd, col=col, lwd=2, lty=2)
}
name="PV__alb"
plot2Ddensity(time, MI.mat[[name]][,], name, col=ccolors[name], ylim=c(0,0.8))
plot2Ddensity <- function(time, data, name, col="black", ylim=c(0.0, 0.2), xlim=c(0, 30)){
for (ks in seq(Nsim)){
points(time,data[,ks], col=rgb(0,100,0,20,maxColorValue=255), pch=16)
#lines(time, data[,ks], col="gray")
}
library('KernSmooth')
# prepare data
Nsim <- ncol(data)
tmax_ind <- length(which(time<100))
Nt <- length(time[1:tmax_ind])
x <- matrix(NA, nrow=Nsim*Nt, ncol=2)
for (ks in seq(Nsim)){
indices <- ((ks-1)*Nt+1):(ks*Nt)
tmp <- cbind(time[1:tmax_ind], data[1:tmax_ind, ks])
x[indices,] <- tmp
}
est <- bkde2D(x, bandwidth=c(2, 0.02), gridsize=c(100,200), range.x=list(c(0,100), c(0,0.5)) )
contour(est$x1, est$x2, est$fhat)
# plot the mean and variance for time courses
# TODO how to better calculate -> what error measurment to use
rmean <- rowMeans(data)
rstd <- rowSds(data)
lines(time, rmean, col=col, lwd=2)
lines(time, rmean+rstd, col=col, lwd=2, lty=2)
lines(time, rmean-rstd, col=col, lwd=2, lty=2)
}
name="PV__alb"
plot2Ddensity(time, MI.mat[[name]][,], name, col=ccolors[name], ylim=c(0,0.8))
plot2Ddensity <- function(time, data, name, col="black", ylim=c(0.0, 0.2), xlim=c(0, 30)){
Nsim <- ncol(data)
for (ks in seq(Nsim)){
points(time,data[,ks], col=rgb(0,100,0,20,maxColorValue=255), pch=16)
#lines(time, data[,ks], col="gray")
}
library('KernSmooth')
# prepare data
Nsim <- ncol(data)
tmax_ind <- length(which(time<100))
Nt <- length(time[1:tmax_ind])
x <- matrix(NA, nrow=Nsim*Nt, ncol=2)
for (ks in seq(Nsim)){
indices <- ((ks-1)*Nt+1):(ks*Nt)
tmp <- cbind(time[1:tmax_ind], data[1:tmax_ind, ks])
x[indices,] <- tmp
}
est <- bkde2D(x, bandwidth=c(2, 0.02), gridsize=c(100,200), range.x=list(c(0,100), c(0,0.5)) )
contour(est$x1, est$x2, est$fhat)
# plot the mean and variance for time courses
# TODO how to better calculate -> what error measurment to use
rmean <- rowMeans(data)
rstd <- rowSds(data)
lines(time, rmean, col=col, lwd=2)
lines(time, rmean+rstd, col=col, lwd=2, lty=2)
lines(time, rmean-rstd, col=col, lwd=2, lty=2)
}
name="PV__alb"
plot2Ddensity(time, MI.mat[[name]][,], name, col=ccolors[name], ylim=c(0,0.8))
plot2Ddensity <- function(time, data, name, col="black", ylim=c(0.0, 0.2), xlim=c(0, 30)){
library('KernSmooth')
# prepare data
Nsim <- ncol(data)
tmax_ind <- length(which(time<100))
Nt <- length(time[1:tmax_ind])
x <- matrix(NA, nrow=Nsim*Nt, ncol=2)
for (ks in seq(Nsim)){
indices <- ((ks-1)*Nt+1):(ks*Nt)
tmp <- cbind(time[1:tmax_ind], data[1:tmax_ind, ks])
x[indices,] <- tmp
}
est <- bkde2D(x, bandwidth=c(2, 0.02), gridsize=c(100,200), range.x=list(c(0,100), c(0,0.5)) )
contour(est$x1, est$x2, est$fhat)
# plot the mean and variance for time courses
# TODO how to better calculate -> what error measurment to use
for (ks in seq(Nsim)){
points(time,data[,ks], col=rgb(0,100,0,20,maxColorValue=255), pch=16)
#lines(time, data[,ks], col="gray")
}
rmean <- rowMeans(data)
rstd <- rowSds(data)
lines(time, rmean, col=col, lwd=2)
lines(time, rmean+rstd, col=col, lwd=2, lty=2)
lines(time, rmean-rstd, col=col, lwd=2, lty=2)
}
name="PV__alb"
plot2Ddensity(time, MI.mat[[name]][,], name, col=ccolors[name], ylim=c(0,0.8))
