plotCurve <- function(preprocess.mat, name, sim.indices=NULL){
Nsim <- nrow(data)
time <- preprocess.mat[['time']][,1]
print(time)
data <- preprocess.mat[[name]]
if (!is.null(sim.indices)){
data <- data[,sim.indices]
}
xlim=c(0,100)
ylim=c(min(data), max(data))
plotCompound(time, data, name=name, xlim=xlim, ylim=ylim, weights=NULL, col=rgb(1,1,1, 0.2))
plotCompoundMean(time, data, weights=NULL, col="red")
}
# Varied parameters
pnames <- getParameterNames(pars=pars)
# Available columns
cnames <- names(preprocess.mat)
print(cnames)
sim.indices = seq(1, nrow(pars))
sim.indices = which(rownames(pars)=="Sim568")
sim.indices
# Create the plot
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', 'Demo_' , name, ".png", sep=""),
width = 800, height = 800, units = "px", bg = "white",  res = 200)
}
Np = ceiling(sqrt(length(cnames)))
par(mfrow=c(Np,Np))
for (name in cnames){
print(name)
if (name != 'time'){
plotCurve(preprocess.mat, name, sim.indices)
}
}
par(mfrow=c(1,1))
if (create_plot_files == TRUE){
dev.off()
}
create_plot_files = FALSE
# Plot all the single curves with mean and std
# They have to be weighted with the actual probability assicociated with the samples.
plotCurve <- function(preprocess.mat, name, sim.indices=NULL){
Nsim <- nrow(data)
time <- preprocess.mat[['time']][,1]
print(time)
data <- preprocess.mat[[name]]
if (!is.null(sim.indices)){
data <- as.matrix(data[,sim.indices])
}
xlim=c(0,100)
ylim=c(min(data), max(data))
plotCompound(time, data, name=name, xlim=xlim, ylim=ylim, weights=NULL, col=rgb(1,1,1, 0.2))
plotCompoundMean(time, data, weights=NULL, col="red")
}
# Varied parameters
pnames <- getParameterNames(pars=pars)
# Available columns
cnames <- names(preprocess.mat)
print(cnames)
sim.indices = seq(1, nrow(pars))
sim.indices = which(rownames(pars)=="Sim568")
sim.indices
# Create the plot
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', 'Demo_' , name, ".png", sep=""),
width = 800, height = 800, units = "px", bg = "white",  res = 200)
}
Np = ceiling(sqrt(length(cnames)))
par(mfrow=c(Np,Np))
for (name in cnames){
print(name)
if (name != 'time'){
plotCurve(preprocess.mat, name, sim.indices)
}
}
par(mfrow=c(1,1))
if (create_plot_files == TRUE){
dev.off()
}
# Varied parameters
pnames <- getParameterNames(pars=pars)
# Available columns
cnames <- names(preprocess.mat)
print(cnames)
sim.indices = seq(1, nrow(pars))
sim.indices = which(rownames(pars)=="Sim568")
sim.indices
# Create the plot
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', 'Demo_' , name, ".png", sep=""),
width = 800, height = 800, units = "px", bg = "white",  res = 200)
}
Np = ceiling(sqrt(length(cnames)))
par(mfrow=c(Np,Np))
for (name in cnames){
print(name)
if (name != 'time'){
plotCurve(preprocess.mat, name, sim.indices)
}
}
par(mfrow=c(1,1))
if (create_plot_files == TRUE){
dev.off()
}
create_plot_files = TRUE
# Plot all the single curves with mean and std
# They have to be weighted with the actual probability assicociated with the samples.
plotCurve <- function(preprocess.mat, name, sim.indices=NULL){
Nsim <- nrow(data)
time <- preprocess.mat[['time']][,1]
print(time)
data <- preprocess.mat[[name]]
if (!is.null(sim.indices)){
data <- as.matrix(data[,sim.indices])
}
xlim=c(0,100)
ylim=c(min(data), max(data))
plotCompound(time, data, name=name, xlim=xlim, ylim=ylim, weights=NULL, col=rgb(1,1,1, 0.2))
plotCompoundMean(time, data, weights=NULL, col="red")
}
# Varied parameters
pnames <- getParameterNames(pars=pars)
# Available columns
cnames <- names(preprocess.mat)
print(cnames)
sim.indices = seq(1, nrow(pars))
sim.indices = which(rownames(pars)=="Sim568")
sim.indices
# Create the plot
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', 'Demo_' , name, ".png", sep=""),
width = 800, height = 800, units = "px", bg = "white",  res = 200)
}
Np = ceiling(sqrt(length(cnames)))
par(mfrow=c(Np,Np))
for (name in cnames){
print(name)
if (name != 'time'){
plotCurve(preprocess.mat, name, sim.indices)
}
}
par(mfrow=c(1,1))
if (create_plot_files == TRUE){
dev.off()
}
# Create the plot
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', 'Demo_' , name, ".png", sep=""),
width = 800, height = 800, units = "px", bg = "white",  res = 200)
}
Np = ceiling(sqrt(length(cnames)))
par(mfrow=c(Np,Np))
for (name in cnames){
print(name)
if (name != 'time'){
plotCurve(preprocess.mat, name, sim.indices)
}
}
par(mfrow=c(1,1))
if (create_plot_files == TRUE){
dev.off()
}
# Create the plot
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', 'Demo_' , ".png", sep=""),
width = 800, height = 800, units = "px", bg = "white",  res = 200)
}
Np = ceiling(sqrt(length(cnames)))
par(mfrow=c(Np,Np))
for (name in cnames){
print(name)
if (name != 'time'){
plotCurve(preprocess.mat, name, sim.indices)
}
}
par(mfrow=c(1,1))
if (create_plot_files == TRUE){
dev.off()
}
library(MultiscaleAnalysis)
rm(list=ls())   # Clear all objects
library(data.table)
library('matrixStats')
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
sname <- '2014-05-12_Demo'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, 'data')
task <- 'T12'
modelId <- paste('Koenig2014_demo_kinetic_v7')
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(file=parsfile)
plotParameterHistogramFull(pars)
# do the preprocessing (here all columns)
# what is written in the CSV?
outFile <- preprocess(parsfile, ma.settings$dir.simdata)
# load the preprocessed data
load(outFile)
################################################################
# do the plots
# TODO: problems with the units
create_plot_files = TRUE
# Plot all the single curves with mean and std
# They have to be weighted with the actual probability assicociated with the samples.
plotCurve <- function(preprocess.mat, name, sim.indices=NULL){
Nsim <- nrow(data)
time <- preprocess.mat[['time']][,1]
print(time)
data <- preprocess.mat[[name]]
if (!is.null(sim.indices)){
data <- as.matrix(data[,sim.indices])
}
xlim=c(0,100)
ylim=c(min(data), max(data))
plotCompound(time, data, name=name, xlim=xlim, ylim=ylim, weights=NULL, col=rgb(1,1,1, 0.2))
plotCompoundMean(time, data, weights=NULL, col="red")
}
# Varied parameters
pnames <- getParameterNames(pars=pars)
# Available columns
cnames <- names(preprocess.mat)
print(cnames)
# plot single simulation
# sim.indices = seq(1, nrow(pars))
# sim.indices = which(rownames(pars)=="Sim568")
# sim.indices
# Create the plot
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', 'Demo_results' , ".png", sep=""),
width = 1200, height = 1200, units = "px", bg = "white",  res = 200)
}
Np = ceiling(sqrt(length(cnames)))
par(mfrow=c(Np,Np))
for (name in cnames){
print(name)
if (name != 'time'){
plotCurve(preprocess.mat, name, sim.indices)
}
}
par(mfrow=c(1,1))
if (create_plot_files == TRUE){
dev.off()
}
# Create the plot
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', 'Demo_results' , ".png", sep=""),
width = 1200, height = 1200, units = "px", bg = "white",  res = 200)
}
Np = ceiling(sqrt(length(cnames)))
par(mfrow=c(Np,Np))
for (name in cnames){
print(name)
if (name != 'time'){
plotCurve(preprocess.mat, name, sim.indices=NULL)
}
}
par(mfrow=c(1,1))
if (create_plot_files == TRUE){
dev.off()
}
# Create the plot
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', 'Demo_results' , ".png", sep=""),
width = 1200, height = 1200, units = "px", bg = "white",  res = 72)
}
Np = ceiling(sqrt(length(cnames)))
par(mfrow=c(Np,Np))
for (name in cnames){
print(name)
if (name != 'time'){
plotCurve(preprocess.mat, name, sim.indices=NULL)
}
}
par(mfrow=c(1,1))
if (create_plot_files == TRUE){
dev.off()
}
# Create the plot
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', 'Demo_results' , ".png", sep=""),
width = 1000, height = 1000, units = "px", bg = "white",  res = 100)
}
Np = ceiling(sqrt(length(cnames)))
par(mfrow=c(Np,Np))
for (name in cnames){
print(name)
if (name != 'time'){
plotCurve(preprocess.mat, name, sim.indices=NULL)
}
}
par(mfrow=c(1,1))
if (create_plot_files == TRUE){
dev.off()
}
library(MultiscaleAnalysis)
create_plot_files = F
# Plot all the single curves with mean and std
# They have to be weighted with the actual probability assicociated with the samples.
plotCurve <- function(preprocess.mat, name, sim.indices=NULL){
Nsim <- nrow(data)
time <- preprocess.mat[['time']][,1]
print(time)
data <- preprocess.mat[[name]]
if (!is.null(sim.indices)){
data <- as.matrix(data[,sim.indices])
}
xlim=c(0,100)
ylim=c(min(data), max(data))
plotCompound(time, data, name=name, xlim=xlim, ylim=ylim, weights=NULL, col=rgb(1,1,1, 0.2))
plotCompoundMean(time, data, weights=NULL, col="red")
}
# Varied parameters
pnames <- getParameterNames(pars=pars)
# Available columns
cnames <- names(preprocess.mat)
print(cnames)
# plot single simulation
# sim.indices = seq(1, nrow(pars))
# sim.indices = which(rownames(pars)=="Sim568")
# sim.indices
# Create the plot
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', 'Demo_results' , ".png", sep=""),
width = 1200, height = 1200, units = "px", bg = "white",  res = 100)
}
Np = ceiling(sqrt(length(cnames)))
par(mfrow=c(Np,Np))
for (name in cnames){
print(name)
if (name != 'time'){
plotCurve(preprocess.mat, name, sim.indices=NULL)
}
}
par(mfrow=c(1,1))
if (create_plot_files == TRUE){
dev.off()
}
library(MultiscaleAnalysis)
create_plot_files = F
# Plot all the single curves with mean and std
# They have to be weighted with the actual probability assicociated with the samples.
plotCurve <- function(preprocess.mat, name, sim.indices=NULL){
Nsim <- nrow(data)
time <- preprocess.mat[['time']][,1]
print(time)
data <- preprocess.mat[[name]]
if (!is.null(sim.indices)){
data <- as.matrix(data[,sim.indices])
}
xlim=c(0,100)
ylim=c(min(data), max(data))
plotCompound(time, data, name=name, xlim=xlim, ylim=ylim, weights=NULL, col=rgb(1,1,1, 0.2))
plotCompoundMean(time, data, weights=NULL, col="red")
}
# Varied parameters
pnames <- getParameterNames(pars=pars)
# Available columns
cnames <- names(preprocess.mat)
print(cnames)
# plot single simulation
# sim.indices = seq(1, nrow(pars))
# sim.indices = which(rownames(pars)=="Sim568")
# sim.indices
# Create the plot
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', 'Demo_results' , ".png", sep=""),
width = 1200, height = 1200, units = "px", bg = "white",  res = 100)
}
Np = ceiling(sqrt(length(cnames)))
par(mfrow=c(Np,Np))
for (name in cnames){
print(name)
if (name != 'time'){
plotCurve(preprocess.mat, name, sim.indices=NULL)
}
}
par(mfrow=c(1,1))
if (create_plot_files == TRUE){
dev.off()
}
plotCurve(preprocess.mat, "A_in")
# Plot all the single curves with mean and std
# They have to be weighted with the actual probability assicociated with the samples.
plotCurve <- function(preprocess.mat, name, sim.indices=NULL){
Nsim <- nrow(data)
time <- preprocess.mat[['time']][,1]
print(time)
data <- preprocess.mat[[name]]
if (!is.null(sim.indices)){
data <- as.matrix(data[,sim.indices])
}
xlim=c(0,50)
ylim=c(min(data), max(data))
plotCompound(time, data, name=name, xlim=xlim, ylim=ylim, weights=NULL, col=rgb(1,1,1, 0.2))
plotCompoundMean(time, data, weights=NULL, col="red")
}
plotCurve(preprocess.mat, "A_in")
# They have to be weighted with the actual probability assicociated with the samples.
plotCurve <- function(preprocess.mat, name, sim.indices=NULL){
Nsim <- nrow(data)
time <- preprocess.mat[['time']][,1]
print(time)
data <- preprocess.mat[[name]]
if (!is.null(sim.indices)){
data <- as.matrix(data[,sim.indices])
}
xlim=c(0,40)
ylim=c(min(data), max(data))
plotCompound(time, data, name=name, xlim=xlim, ylim=ylim, weights=NULL, col=rgb(1,1,1, 0.2))
plotCompoundMean(time, data, weights=NULL, col="red")
}
library(MultiscaleAnalysis)
plotCurve(preprocess.mat, "A_in")
library(MultiscaleAnalysis)
plotCurve(preprocess.mat, "A_in")
plotCurve(preprocess.mat, "A_in")
# Plot all the single curves with mean and std
# They have to be weighted with the actual probability assicociated with the samples.
plotCurve <- function(preprocess.mat, name, sim.indices=NULL){
Nsim <- nrow(data)
time <- preprocess.mat[['time']][,1]
print(time)
data <- preprocess.mat[[name]]
if (!is.null(sim.indices)){
data <- as.matrix(data[,sim.indices])
}
xlim=c(0,40)
ylim=c(min(data), max(data))
plotCompound(time, data, name=name, xlim=xlim, ylim=ylim, weights=NULL, col="gray")
plotCompoundMean(time, data, weights=NULL, col="red")
}
plotCurve(preprocess.mat, "A_in")
library(MultiscaleAnalysis)
# Varied parameters
pnames <- getParameterNames(pars=pars)
# Available columns
cnames <- names(preprocess.mat)
print(cnames)
# plot single simulation
# sim.indices = seq(1, nrow(pars))
# sim.indices = which(rownames(pars)=="Sim568")
# sim.indices
# Create the plot
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', 'Demo_results' , ".png", sep=""),
width = 1200, height = 1200, units = "px", bg = "white",  res = 100)
}
Np = ceiling(sqrt(length(cnames)))
par(mfrow=c(Np,Np))
for (name in cnames){
print(name)
if (name != 'time'){
plotCurve(preprocess.mat, name, sim.indices=NULL)
}
}
par(mfrow=c(1,1))
if (create_plot_files == TRUE){
dev.off()
}
plotCurve(preprocess.mat, "A_in")
library(MultiscaleAnalysis)
plotCurve(preprocess.mat, "A_in")
library(MultiscaleAnalysis)
plotCurve(preprocess.mat, "A_in")
# Create the plot
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', 'Demo_results' , ".png", sep=""),
width = 1200, height = 1200, units = "px", bg = "white",  res = 100)
}
Np = ceiling(sqrt(length(cnames)))
par(mfrow=c(Np,Np))
for (name in cnames){
print(name)
if (name != 'time'){
plotCurve(preprocess.mat, name, sim.indices=NULL)
}
}
par(mfrow=c(1,1))
if (create_plot_files == TRUE){
dev.off()
}
plotCurve <- function(preprocess.mat, name, sim.indices=NULL){
Nsim <- nrow(data)
time <- preprocess.mat[['time']][,1]
print(time)
data <- preprocess.mat[[name]]
if (!is.null(sim.indices)){
data <- as.matrix(data[,sim.indices])
}
xlim=c(0,25)
ylim=c(min(data), max(data))
plotCompound(time, data, name=name, xlim=xlim, ylim=ylim, weights=NULL, col="black")
plotCompoundMean(time, data, weights=NULL, col="red")
}
create_plot_files = T
# Create the plot
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', 'Demo_results' , ".png", sep=""),
width = 1200, height = 1200, units = "px", bg = "white",  res = 100)
}
Np = ceiling(sqrt(length(cnames)))
par(mfrow=c(Np,Np))
for (name in cnames){
print(name)
if (name != 'time'){
plotCurve(preprocess.mat, name, sim.indices=NULL)
}
}
par(mfrow=c(1,1))
if (create_plot_files == TRUE){
dev.off()
}
