# Here the unweighted simulation results are obtained
plotMultipleIndicatorCurves(time, weights=pars$p_sample, ccols=ccols, create_plot_files=T)
# createMeanPlot(time, create_plot_files=TRUE)
}
## Combined Dilution Curves in one plot ##
plotMultipleIndicatorMean <- function(time, create_plot_files=F){
Nc <- length(pv_compounds)
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', task, "_Dilution_Curves_Combined.png", sep=""),
width = 1000, height = 1000, units = "px", bg = "white")
}
par(mfrow=c(1,1))
xlim=c(0,20)
ylim=c(0,1.5)
plot(numeric(0), numeric(0), 'l',
xlab="time [s]", ylab="c [mM]", xlim=xlim, ylim=ylim)
for (kc in seq(1, length(compounds)) ){
for (name in pv_compounds){
inds <- which((time<=xlim[2]))
data <- MI.mat[[name]]
plotCompoundMean(time[inds], data[inds,:], weights, col=ccolors[name])
}
}
par(mfrow=c(1,1))
dev.off()
}
## Combined Dilution Curves in one plot ##
plotMultipleIndicatorMean <- function(time, create_plot_files=F){
Nc <- length(pv_compounds)
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', task, "_Dilution_Curves_Combined.png", sep=""),
width = 1000, height = 1000, units = "px", bg = "white")
}
par(mfrow=c(1,1))
xlim=c(0,20)
ylim=c(0,1.5)
plot(numeric(0), numeric(0), 'l',
xlab="time [s]", ylab="c [mM]", xlim=xlim, ylim=ylim)
for (kc in seq(1, length(compounds)) ){
for (name in pv_compounds){
inds <- which((time<=xlim[2]))
data <- MI.mat[[name]]
plotCompoundMean(time[inds], data[inds, ], weights, col=ccolors[name])
}
}
par(mfrow=c(1,1))
dev.off()
}
plotMultipleIndicatorMean(time, weights=pars$p_sample, create_plot_files=TRUE)
## Combined Dilution Curves in one plot ##
plotMultipleIndicatorMean <- function(time, weights, create_plot_files=F){
Nc <- length(pv_compounds)
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', task, "_Dilution_Curves_Combined.png", sep=""),
width = 1000, height = 1000, units = "px", bg = "white")
}
par(mfrow=c(1,1))
xlim=c(0,20)
ylim=c(0,1.5)
plot(numeric(0), numeric(0), 'l',
xlab="time [s]", ylab="c [mM]", xlim=xlim, ylim=ylim)
for (kc in seq(1, length(compounds)) ){
for (name in pv_compounds){
inds <- which((time<=xlim[2]))
data <- MI.mat[[name]]
plotCompoundMean(time[inds], data[inds, ], weights, col=ccolors[name])
}
}
par(mfrow=c(1,1))
dev.off()
}
plotMultipleIndicatorMean(time, weights=pars$p_sample, create_plot_files=TRUE)
## Combined Dilution Curves in one plot ##
plotMultipleIndicatorMean <- function(time, weights, create_plot_files=F){
Nc <- length(pv_compounds)
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', task, "_Dilution_Curves_Combined.png", sep=""),
width = 800, height = 800, units = "px", bg = "white")
}
par(mfrow=c(1,1))
xlim=c(0,20)
ylim=c(0,1.5)
plot(numeric(0), numeric(0), 'l',
xlab="time [s]", ylab="c [mM]", xlim=xlim, ylim=ylim)
for (kc in seq(1, length(compounds)) ){
for (name in pv_compounds){
inds <- which((time<=xlim[2]))
data <- MI.mat[[name]]
plotCompoundMean(time[inds], data[inds, ], weights, col=ccolors[name])
}
}
par(mfrow=c(1,1))
dev.off()
}
for (kt in seq(length(tasks))){
#for (kt in seq(1)){
task <- tasks[kt]
peak <- peaks[kt]
modelId <- paste('MultipleIndicator_', peak, '_', version, '_Nc20_Nf1', sep='')
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
# Load the data
load(file=outfileFromParsFile(parsfile))
# Parameter processing
ps <- getParameterTypes(pars=pars)
# Extend the parameters with the SBML parameters and calculated parameters
fsbml <- file.path(ma.settings$dir.results, sname, paste(modelId, '.xml', sep=''))
model <- loadSBMLModel(fsbml)
pars <- extendParameterStructure(pars=pars, fixed_ps=ps$fixed, model=model)
head(pars)
# Standard distributions for normal case
p.gen <- loadStandardDistributions()
print(p.gen)
# ECDFs for standard distributions
ecdf.list <- createListOfStandardECDF(p.gen, ps$var)
# Calculate the probabilites for single variables
pars <- calculateProbabilitiesForVariables(pars, ecdf.list)
# And the overall probability per sample
pars <- calculateSampleProbability(pars, ps$var)
head(pars)
# Color definition based on probabilities
ccol = 'gray'
Nsim = nrow(pars)
Ncol = 7
colpal <- brewer.pal(Ncol+2, 'Greys')
ccols = rep(colpal[1], Nsim)
maxValue = max(pars$p_sample)
bw = maxValue/Ncol
for (k in seq(Ncol)){
ind <- which( (pars$p_sample>((k-1)*bw)) & (pars$p_sample <= (k*bw)))
ccols[ind] = colpal[k+2]
ccols[ind] = col2rgb_alpha(colpal[k+2], 0.7)
}
# plot(pars$p_sample, col=ccols, pch=15)
# Get the time for the plot
time = getTimeFromMIMAT(MI.mat) -10.0
# Create the plots
# Here the unweighted simulation results are obtained
plotMultipleIndicatorCurves(time, weights=pars$p_sample, ccols=ccols, create_plot_files=T)
plotMultipleIndicatorMean(time, weights=pars$p_sample, create_plot_files=T)
}
################################################################
## Parameter Distributions ##
################################################################
# author: Matthias Koenig
# date: 2014-04-13
#
# Distributions are assumed to be lognormal distributed
# Density, distribution function, quantile function and random generation
# for the log normal distribution whose logarithm has mean equal to meanlog
# and standard deviation equal to sdlog.
# Log-normal distributions are fitted to the experimental histogramm data.
# The plots are generated with the simulated distributions.
#
#   dlnorm(x, meanlog = 0, sdlog = 1, log = FALSE)
#   plnorm(q, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE) (cumulative distribution)
#   qlnorm(p, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE)
#   rlnorm(n, meanlog = 0, sdlog = 1)
#
# TODO: analyse fits with QQplot
################################################################
rm(list=ls())
library(MultiscaleAnalysis)
library(MASS)
setwd(ma.settings$dir.results)
# parameter values used in simulations (before fitting)
p.gen <- generateLogStandardParameters()
p.gen
# lists to store data and the fit parameters
data <- list()
fit <- list()
###############################################################
# flow_sin
###############################################################
Koo1975.names = c('branching', 'interconnecting', 'direct')
for (name in Koo1975.names){
varname <- paste("Koo1975.", name, sep="");
csvname <- file.path(ma.settings$dir.expdata, 'parameter_distributions', paste('Koo1975_Fig1_', name,'.csv', sep=''))
assign(varname, read.csv(csvname, sep= '\t'))
}
Koo1975.all = rbind(t(Koo1975.branching$count), t(Koo1975.interconnecting$count), t(Koo1975.direct$count))
colnames(Koo1975.all) <- Koo1975.branching$velocity
rownames(Koo1975.all)<-Koo1975.names
Koo1975.all
rm(name, varname)
# R stacked bar plot
#png(filename=paste("Koo1975_velocity_distribution.png", sep=""),
#    width = 800, height = 800, units = "px", bg = "white",  res = 150)
barcol <- gray.colors(length(Koo1975.names))
barplot(Koo1975.all, main="RBC velocity distribution", xlab="vRBC [µm/s]", ylab="count", col=barcol)
legend("topright",  legend = Koo1975.names, fill=barcol)
#dev.off()
barcol <- gray.colors(length(Koo1975.names))
barplot(Koo1975.all, main="RBC velocity distribution", xlab="vRBC [µm/s]", ylab="count", col=barcol)
legend("topright",  legend = Koo1975.names, fill=barcol)
barcol <- gray.colors(length(Koo1975.names))
barplot(Koo1975.all, main="RBC velocity distribution", xlab="vRBC [µm/s]", ylab="count", col=barcol)
legend("topright",  legend = Koo1975.names, fill=barcol)
dev.off()
barcol <- gray.colors(length(Koo1975.names))
barplot(Koo1975.all, main="RBC velocity distribution", xlab="vRBC [µm/s]", ylab="count", col=barcol)
legend("topright",  legend = Koo1975.names, fill=barcol)
# R stacked bar plot
png(filename=paste("Koo1975_velocity_distribution.png", sep=""),
width = 800, height = 800, units = "px", bg = "white",  res = 150)
barcol <- gray.colors(length(Koo1975.names))
barplot(Koo1975.all, main="RBC velocity distribution", xlab="vRBC [µm/s]", ylab="count", col=barcol)
legend("topright",  legend = Koo1975.names, fill=barcol)
dev.off()
################################################################
rm(list=ls())
library('MultiscaleAnalysis')
library('matrixStats')
setwd(ma.settings$dir.results)
# Plot all the single curves with mean and std
# They have to be weighted with the actual probability assicociated with the samples.
plotMultipleIndicatorCurves <- function(time, weights, ccols, create_plot_files=F){
Nc <- length(pv_compounds)
# Create the plot
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', task, "_Dilution_Curves.png", sep=""),
width = 4000, height = 1000, units = "px", bg = "white",  res = 200)
}
par(mfrow=c(1,Nc))
xlim=c(0,20)
ylim=c(0,2.5)
for (name in pv_compounds){
inds <- which((time<=xlim[2]))
data <- MI.mat[[name]]
plotCompound(time[inds], data[inds, ] , name, col=ccolors[name],
xlim=xlim, ylim=ylim, weights, ccols)
}
par(mfrow=c(1,1))
if (create_plot_files == TRUE){
dev.off()
}
}
## Combined Dilution Curves in one plot ##
plotMultipleIndicatorMean <- function(time, weights, create_plot_files=F){
Nc <- length(pv_compounds)
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', task, "_Dilution_Curves_Combined.png", sep=""),
width = 800, height = 800, units = "px", bg = "white")
}
par(mfrow=c(1,1))
xlim=c(0,20)
ylim=c(0,1.5)
plot(numeric(0), numeric(0), 'l',
xlab="time [s]", ylab="c [mM]", xlim=xlim, ylim=ylim)
for (kc in seq(1, length(compounds)) ){
for (name in pv_compounds){
inds <- which((time<=xlim[2]))
data <- MI.mat[[name]]
plotCompoundMean(time[inds], data[inds, ], weights, col=ccolors[name])
}
}
par(mfrow=c(1,1))
dev.off()
}
# calculate the maximum values
maxTimes <- function(data){
Nsim = ncol(data)
maxtime <- data.frame(tmp=numeric(Nsim))
for (kc in seq(1, length(compounds)) ){
name = paste("PV__", compounds[kc], sep="")
print(name)
maxtime[[name]] <- numeric(Nsim)
# find the max values for all simulations
for (k in seq(1, Nsim)){
maxtime[[name]][k] = time[ which.max(dilmat[[name]][,k]) ]
}
}
}
####################################################################
library(RColorBrewer)
# display.brewer.all(n=NULL, type="all", select=NULL, exact.n=TRUE)
compounds = c('gal', 'rbcM', 'alb', 'suc', 'h2oM')
ccolors = c('black', 'red', 'darkgreen', 'darkorange', 'darkblue')
pv_compounds = paste('PV__', compounds, sep='')
names(ccolors) <- pv_compounds
## Load the preprocessed data ##
sname <- '2014-05-04_MultipleIndicator'
version <- 'v14'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, 'data')
tasks <- paste('T', seq(21,25), sep='')
peaks <- c('P00', 'P01', 'P02', 'P03', 'P04')
# Get colors for probability weights
library(RColorBrewer)
col2rgb_alpha <- function(col, alpha){
rgb <- rgb(col2rgb(col)[[1]]/256,col2rgb(col)[[2]]/256,col2rgb(col)[[3]]/256, alpha)
}
#display.brewer.all(n=NULL, type="all", select=NULL, exact.n=TRUE)
for (kt in seq(length(tasks))){
#for (kt in seq(1)){
task <- tasks[kt]
peak <- peaks[kt]
modelId <- paste('MultipleIndicator_', peak, '_', version, '_Nc20_Nf1', sep='')
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
# Load the data
load(file=outfileFromParsFile(parsfile))
# Parameter processing
ps <- getParameterTypes(pars=pars)
# Extend the parameters with the SBML parameters and calculated parameters
fsbml <- file.path(ma.settings$dir.results, sname, paste(modelId, '.xml', sep=''))
model <- loadSBMLModel(fsbml)
pars <- extendParameterStructure(pars=pars, fixed_ps=ps$fixed, model=model)
head(pars)
# Standard distributions for normal case
p.gen <- loadStandardDistributions()
print(p.gen)
# ECDFs for standard distributions
ecdf.list <- createListOfStandardECDF(p.gen, ps$var)
# Calculate the probabilites for single variables
pars <- calculateProbabilitiesForVariables(pars, ecdf.list)
# And the overall probability per sample
pars <- calculateSampleProbability(pars, ps$var)
head(pars)
# Color definition based on probabilities
ccol = 'gray'
Nsim = nrow(pars)
Ncol = 7
colpal <- brewer.pal(Ncol+2, 'Greys')
ccols = rep(colpal[1], Nsim)
maxValue = max(pars$p_sample)
bw = maxValue/Ncol
for (k in seq(Ncol)){
ind <- which( (pars$p_sample>((k-1)*bw)) & (pars$p_sample <= (k*bw)))
ccols[ind] = colpal[k+2]
ccols[ind] = col2rgb_alpha(colpal[k+2], 0.7)
}
# plot(pars$p_sample, col=ccols, pch=15)
# Get the time for the plot
time = getTimeFromMIMAT(MI.mat) -10.0
# Create the plots
# Here the unweighted simulation results are obtained
plotMultipleIndicatorCurves(time, weights=pars$p_sample, ccols=ccols, create_plot_files=T)
plotMultipleIndicatorMean(time, weights=pars$p_sample, create_plot_files=T)
}
library('matrixStats')
library('MultiscaleAnalysis')
# Load the experimental data
gor1973 <- read.csv(file.path(ma.settings$dir.expdata, "dilution_indicator", "Goresky1973_Fig1.csv"), sep="\t")
summary(gor1973)
# Units: time [s], compound: 1000*outflow fraction/ml
gor1983 <- read.csv(file.path(ma.settings$dir.expdata, "dilution_indicator", "Goresky1983_Fig1.csv"), sep="\t")
summary(gor1983)
# Load the preprocessed simulations data
sname <- '2014-05-05_MultipleIndicator'
version <- 'v14'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, 'data')
tasks <- paste('T', seq(21,25), sep='')
peaks <- c('P00', 'P01', 'P02', 'P03', 'P04')
for (kt in seq(length(tasks))){
task <- tasks[kt]
peak <- peaks[kt]
modelId <- paste('MultipleIndicator_', peak, '_', version, '_Nc20_Nf1', sep='')
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
# Load the data
load(file=outfileFromParsFile(parsfile))
summary(pars)
# Create the plots
createExpPlot(create_plot_files=TRUE)
}
rm(list=ls())
library(data.table)
library(libSBML)
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
# Settings for plots
create_plot_files = FALSE
plot.width = 800
plot.height = 800
plot.units= "px"
plot.bg = "white"
plot.res = 150
###########################################################################
# Load parameters for samples
###########################################################################
# definition of changing parameters, with a single sample
# corresponding to a sinusoidal unit configuration
# samples are based on random sampling of multidimensional parameter space
sname <- '2014-05-04_MultipleIndicator'
modelVersion <- 'v14_Nc20_Nf1'
tasks <- paste('T', seq(21,25), sep='')
peaks <- c('P00', 'P01', 'P02', 'P03', 'P04')
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, 'data')
load_with_sims = FALSE;
# for (kt in seq(length(tasks))){
for (kt in seq(1)){
task <- tasks[kt]
peak <- peaks[kt]
modelId <- paste('MultipleIndicator_', peak, '_', modelVersion, sep='')
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
# Load the data
if (load_with_sims == FALSE){
# only load the parameters:
pars <- loadParameterFile(parsfile)
} else {
# preprocessing necessary for loading the data with the parameters
load(file=outfileFromParsFile(parsfile))
}
print(summary(pars))
}
rm(kt)
names(pars)
if (create_plot_files == TRUE){
fname <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_plotParameterHistogramFull.png', sep=""))
png(filename=fname, width=1400, height=400, units=plot.units, bg=plot.bg, res=plot.res)
}
plotParameterHistogramFull(pars=pars)
if (create_plot_files == TRUE){
dev.off()
}
library(RColorBrewer)
colpal <- brewer.pal(9, 'YlOrRd')
Nsim = nrow(pars)
ccols <- colorRampPalette(colpal)(Nsim) # exend the color palette
pnames <- getParameterNames(pars)
if (create_plot_files == TRUE){
fname <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_plotParameterScatterFull.png', sep=""))
png(filename=fname, width=1200, height=1200, units=plot.units, bg=plot.bg, res=plot.res)
}
plot(pars[, pnames], col=ccols, pch=15)
if (create_plot_files == TRUE){
dev.off()
}
create_plot_files = TRUE;
library(RColorBrewer)
colpal <- brewer.pal(9, 'YlOrRd')
Nsim = nrow(pars)
ccols <- colorRampPalette(colpal)(Nsim) # exend the color palette
pnames <- getParameterNames(pars)
if (create_plot_files == TRUE){
fname <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_plotParameterScatterFull.png', sep=""))
png(filename=fname, width=1200, height=1200, units=plot.units, bg=plot.bg, res=plot.res)
}
plot(pars[, pnames], col=ccols, pch=15)
if (create_plot_files == TRUE){
dev.off()
}
setwd(ma.settings$dir.results)
library(RColorBrewer)
colpal <- brewer.pal(9, 'YlOrRd')
Nsim = nrow(pars)
ccols <- colorRampPalette(colpal)(Nsim) # exend the color palette
pnames <- getParameterNames(pars)
if (create_plot_files == TRUE){
fname <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_plotParameterScatterFull.png', sep=""))
png(filename=fname, width=1200, height=1200, units=plot.units, bg=plot.bg, res=plot.res)
}
plot(pars[, pnames], col=ccols, pch=15)
if (create_plot_files == TRUE){
dev.off()
}
if (create_plot_files == TRUE){
fname <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_plotParameterScatterFull.png', sep=""))
png(filename=fname, width=1200, height=1200, units=plot.units, bg=plot.bg, res=200)
}
plot(pars[, pnames], col=ccols, pch=15)
if (create_plot_files == TRUE){
dev.off()
}
library(RColorBrewer)
colpal <- brewer.pal(9, 'YlOrRd')
Nsim = nrow(pars)
ccols <- colorRampPalette(colpal)(Nsim) # exend the color palette
pnames <- getParameterNames(pars)
if (create_plot_files == TRUE){
fname <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_plotParameterScatterFull.png', sep=""))
png(filename=fname, width=1400, height=1400, units=plot.units, bg=plot.bg, res=70)
}
plot(pars[, pnames], col=ccols, pch=15)
if (create_plot_files == TRUE){
dev.off()
}
# display.brewer.pal(n, name)
#display.brewer.all(n=NULL, type="all", select=NULL, exact.n=TRUE)
library(RColorBrewer)
colpal <- brewer.pal(9, 'YlOrRd')
Nsim = nrow(pars)
ccols <- colorRampPalette(colpal)(Nsim) # exend the color palette
pnames <- getParameterNames(pars)
if (create_plot_files == TRUE){
fname <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_plotParameterScatterFull.png', sep=""))
png(filename=fname, width=1400, height=1400, units=plot.units, bg=plot.bg, res=120)
}
plot(pars[, pnames], col=ccols, pch=15)
if (create_plot_files == TRUE){
dev.off()
}
xlim=c(0,20)
ylim=c(0,2.5)
inds <- which((time<=xlim[2]))
data <- MI.mat[["PV__rbcM"]]
plotCompound(time[inds], data[inds, ] , name, col=ccolors[name],
xlim=xlim, ylim=ylim, weights, ccols)
xlim=c(0,20)
ylim=c(0,2.5)
inds <- which((time<=xlim[2]))
data <- MI.mat[["PV__rbcM"]]
plotCompound(time[inds], data[inds, ], "PV_rbcM", col=ccolors[name],
xlim=xlim, ylim=ylim, weights, ccols)
