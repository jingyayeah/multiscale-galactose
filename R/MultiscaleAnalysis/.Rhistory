plotCompoundMean(time, MI.mat[[name]], col=ccolors[name])
}
}
par(mfrow=c(1,1))
dev.off()
}
## Load the preprocessed data ##
sname <- '2014-04-20_MultipleIndicator'
version <- 'v11'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, 'data')
tasks <- paste('T', seq(6,10), sep='')
peaks <- c('P00', 'P01', 'P02', 'P03', 'P04')
for (kt in seq(length(tasks))){
task <- tasks[kt]
peak <- peaks[kt]
modelId <- paste('MultipleIndicator_', peak, '_', version, '_Nc20_Nf1', sep='')
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
# Load the data
load(file=outfileFromParsFile(parsfile))
summary(pars)
# Create the plots
# createAllPlot(create_plot_files=TRUE)
createMeanPlot(create_plot_files=TRUE)
}
## Combined Dilution Curves in one plot ##
createMeanPlot <- function(create_plot_files=F){
time <- readTimeForSimulation(ma.settings$dir.simdata, rownames(pars)[1])-10.0
Nc <- length(pv_compounds)
if (create_plot_files == TRUE){
png(filename=paste(ma.settings$dir.results, '/', task, "_Dilution_Curves_Combined.png", sep=""),
width = 1000, height = 1000, units = "px", bg = "white")
}
par(mfrow=c(1,1))
plot(numeric(0), numeric(0), 'l',
xlab="time [s]", ylab="c [mM]", xlim=c(0,30), ylim=c(0,1.5))
for (kc in seq(1, length(compounds)) ){
for (name in pv_compounds){
plotCompoundMean(time, MI.mat[[name]], col=ccolors[name])
}
}
par(mfrow=c(1,1))
dev.off()
}
## Load the preprocessed data ##
sname <- '2014-04-20_MultipleIndicator'
version <- 'v11'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, 'data')
tasks <- paste('T', seq(6,10), sep='')
peaks <- c('P00', 'P01', 'P02', 'P03', 'P04')
for (kt in seq(length(tasks))){
task <- tasks[kt]
peak <- peaks[kt]
modelId <- paste('MultipleIndicator_', peak, '_', version, '_Nc20_Nf1', sep='')
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
# Load the data
load(file=outfileFromParsFile(parsfile))
summary(pars)
# Create the plots
# createAllPlot(create_plot_files=TRUE)
createMeanPlot(create_plot_files=TRUE)
}
rm(list=ls())   # Clear all objects
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
sname <- '2014-04-30_MultipleIndicator'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, 'data')
tasks <- paste('T', seq(11,15), sep='')
peaks <- c('P00', 'P01', 'P02', 'P03', 'P04')
for (kt in seq(length(tasks))){
task <- tasks[kt]
peak <- peaks[kt]
modelId <- paste('MultipleIndicator_', peak, '_v13_Nc20_Nf1', sep='')
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
# Do the preprocessing
# preprocess(parsfile=parsfile, sim.dir=ma.settings$dir.simdata,
#            outFile='test.out', max_index=2)
preprocess(parsfile, ma.settings$dir.simdata)
}
rm(list=ls())   # Clear all objects
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
sname <- '2014-04-30_MultipleIndicator'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, 'data')
tasks <- paste('T', seq(11,15), sep='')
peaks <- c('P00', 'P01', 'P02', 'P03', 'P04')
for (kt in seq(length(tasks))){
task <- tasks[kt]
peak <- peaks[kt]
modelId <- paste('MultipleIndicator_', peak, '_v13_Nc20_Nf1', sep='')
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
# Do the preprocessing
# preprocess(parsfile=parsfile, sim.dir=ma.settings$dir.simdata,
#            outFile='test.out', max_index=2)
preprocess(parsfile, ma.settings$dir.simdata)
}
install.packages('data.table')
install.packages(data.table)
install.packages('data.table)
)
''
'##'
install.packages('data.table')
library(MultiscaleAnalysis)
library(MultiscaleAnalysis)
name='flow_sin'
wmean <- wt.mean(pars[[name]], pars$p_sample)
wvar <- wt.var(pars[[name]], pars$p_sample)
wsd <- wt.sd(pars[[name]], pars$p_sample)
plotWeighted(pars, p.gen, name)
rm(list=ls())   # Clear all objects
library(data.table)
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
# TODO : only define the settings once here
sname <- '2014-04-30_MultipleIndicator'
tasks <- paste('T', seq(11,15), sep='')
peaks <- c('P00', 'P01', 'P02', 'P03', 'P04')
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, 'data')
# for (kt in seq(length(tasks))){
for (kt in seq(1)){
task <- tasks[kt]
peak <- peaks[kt]
modelId <- paste('MultipleIndicator_', peak, '_', 'v13_Nc20_Nf1', sep='')
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
# Load the data
print(parsfile)
load(file=outfileFromParsFile(parsfile))
print(summary(pars))
}
rm(kt, peak, task)
names(pars)
# - sample results for the given parameter samples
#   (for every sample configuration results are calculated, consisting of
#    derived geometrical parameters, and simulation results like timecourse
#    simulations)
# Get additional information from the SBML file
# showClass("_p_Parameter")
# showMethods("_p_Parameter")
library('libSBML')
filename = filename <- '/home/mkoenig/multiscale-galactose-results/tmp_sbml/Galactose_v14_Nc20_Nf1.xml'
doc        = readSBML(filename);
errors   = SBMLDocument_getNumErrors(doc);
SBMLDocument_printErrors(doc);
model = SBMLDocument_getModel(doc);
rm(errors)
# Get all parameter names from model
lofp <- Model_getListOfParameters(model)
Np <- ListOf_size(lofp)
model_pids <- character(Np)
for (kp in seq(0, (Np-1))){
p <- ListOfParameters_get(lofp, kp)
model_pids[kp+1] <- Parameter_getId(p)
}
rm(lofp, Np, p, kp)
# Get the following parameters from SBML or the parameters file to calculate
# the derived variables.
names = c('Nc', 'Nf', 'L', 'y_sin', 'y_dis', 'y_cell', 'flow_sin', 'f_fen',
'rho_liv', 'Q_liv', 'Vol_liv')
# All parameters which are fixed in the model
fixed_ps = setdiff(names, getParsNames(pars))
print(fixed_ps)
# All parameters which are varied, i.e. depend on sample
var_ps = setdiff(names, fixed_ps)
print(var_ps)
# Create extended data frame with the calculated values
extendPars <- function(pars, fixed_ps){
X <- pars
Nsim <- nrow(pars)
# the fixed parameters in model
for (pid in fixed_ps){
if (pid %in% model_pids){
p <- Model_getParameter(model, pid)
value <- Parameter_getValue(p)
# create a variable with the name
X[[pid]] <- rep(value, Nsim)
} else {
cat('parameter not in model:', name, '\n')
}
}
attach(X)
Nb   =     Nf*Nc
x_cell 	= 	L/Nc
x_sin 	= 	x_cell/Nf
A_sin 	= 	pi*y_sin^2
A_dis 	= 	pi*(y_sin+y_dis)^2-A_sin
A_sindis 	= 	2*pi*y_sin*x_sin
Vol_sin 	= 	A_sin*x_sin
Vol_dis 	= 	A_dis*x_sin
Vol_cell 	= 	pi*(y_sin+y_dis+y_cell)^2*x_cell-pi*(y_sin+y_dis)^2*x_cell
Vol_pp 	= 	Vol_sin
Vol_pv 	= 	Vol_sin
f_sin   = 	Vol_sin/(Vol_sin+Vol_dis+Vol_cell)
f_dis 	= 	Vol_dis/(Vol_sin+Vol_dis+Vol_cell)
f_cell 	= 	Vol_cell/(Vol_sin+Vol_dis+Vol_cell)
Vol_sinunit 	= 	L*pi*(y_sin+y_dis+y_cell)^2
Q_sinunit 	= 	pi*y_sin^2*flow_sin
m_liv 	= 	rho_liv*Vol_liv
q_liv 	= 	Q_liv/m_liv
X$Nb = Nb
X$x_cell = x_cell
X$x_sin = x_sin
X$A_sin = A_sin
X$A_dis = A_dis
X$A_sindis = A_sindis
X$Vol_sin = Vol_sin
X$Vol_dis = Vol_dis
X$Vol_cell = Vol_cell
X$Vol_pp = Vol_pp
X$Vol_pv = Vol_pv
X$f_sin = f_sin
X$f_dis = f_dis
X$f_cell = f_cell
X$Vol_sinunit = Vol_sinunit
X$Q_sinunit = Q_sinunit
X$m_liv = m_liv
X$q_liv = q_liv
detach(X)
X
}
pars <- extendPars(pars, fixed_ps)
head(pars)
hist(pars$Vol_sinunit, xlim=c(0, 6E-13), breaks=20)
# Distributions are loaded via
fname <- file.path(ma.settings$dir.results, 'distribution_fit_data.csv')
p.gen <- read.csv(file=fname)
rownames(p.gen) <- p.gen$name
p.gen
# For every var_ps a distribution has to exist
# !Make sure that over all the probabilities is integrated
# !This
print(var_ps)
Nsim <- nrow(pars)
p_sample <- rep(1, Nsim)
for (name in var_ps){
print(name)
p_name = paste('p_', name, sep='')
p_data <- getProbabilitiesForSamples(pars, p.gen, name)
pars[[p_name]] <- p_data
# statistical independence assumed (multiply the probabilities)
# ??? this is strange - make sure it is valid
p_sample = p_sample * p_data
}
# Normalize p_sample
pars$p_sample <- p_sample/sum(p_sample)
sum(pars$p_sample)
plot(pars$p_sample)
plot(pars$p_y_cell)
plot(pars$y_cell, pars$p_y_cell)
name='flow_sin'
wmean <- wt.mean(pars[[name]], pars$p_sample)
wvar <- wt.var(pars[[name]], pars$p_sample)
wsd <- wt.sd(pars[[name]], pars$p_sample)
plotWeighted(pars, p.gen, name)
head(pars)
name='Q_sinunit'
wmean <- wt.mean(pars[[name]], pars$p_sample)
wvar <- wt.var(pars[[name]], pars$p_sample)
wsd <- wt.sd(pars[[name]], pars$p_sample)
plotWeighted(pars, p.gen, name)
y1 <- rlnorm(10000, meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(10000, meanlog=0.5*p.gen[name, 'meanlog'], sdlog=4*p.gen[name, 'sdlog'])
ytest <- c(y1, y2)
plot(ytest)
name = 'flow_sin'
y1 <- rlnorm(10000, meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(10000, meanlog=0.5*p.gen[name, 'meanlog'], sdlog=4*p.gen[name, 'sdlog'])
ytest <- c(y1, y2)
y1 <- rlnorm(10000, meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(10000, meanlog=0.5*p.gen[name, 'meanlog'], sdlog=4*p.gen[name, 'sdlog'])
ytest <- c(y1, y2)
plot(ytest)
ytest
dtest <- density(ytest, from=0, to=max(ytest), bw=20)
summary(ytest)
plot(dtest)
plot(dtest, xlim(0, 4*mean(ytest)))
plot(dtest, xlim=c(0, 4*mean(ytest)))
name = 'flow_sin'
y1 <- rlnorm(10000, meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(10000, meanlog=0.5*p.gen[name, 'meanlog'], sdlog=4*p.gen[name, 'sdlog'])
ytest <- c(y1, y2)
plot(ytest)
hist(ytest, breaks=40)
ytest
dtest <- density(ytest, from=0, to=max(ytest), bw=20)
summary(ytest)
plot(dtest, xlim=c(0, 4*mean(ytest)))
y1 <- rlnorm(10000, meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(10000, meanlog=0.5*p.gen[name, 'meanlog'], sdlog=4*p.gen[name, 'sdlog'])
ytest <- c(y1, y2)
plot(ytest)
hist(ytest, breaks=40)
name = 'flow_sin'
y1 <- rlnorm(10000, meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(10000, meanlog=0.5*p.gen[name, 'meanlog'], sdlog=4*p.gen[name, 'sdlog'])
name = 'flow_sin'
y1 <- rlnorm(10000, meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(10000, meanlog=0.5*p.gen[name, 'meanlog'], sdlog=4*p.gen[name, 'sdlog'])
plot(ytest)
dtest <- density(ytest, from=0, to=max(ytest), bw=20)
plot(dtest, xlim=c(0, 4*mean(ytest)))
plot(dtest)
plot(dtest, xlim(0,1000))
plot(dtest, xlim=c(0,1000))
plot(dtest, xlim=c(0,3000))
dtest <- density(ytest, from=0, to=max(ytest), bw=1)
summary(ytest)
plot(dtest, xlim=c(0,3000))
dtest <- density(ytest, from=0, to=max(ytest), bw=100)
summary(ytest)
plot(dtest, xlim=c(0,3000))
dtest <- density(ytest, from=0, to=4*mean(ytest), bw=100)
summary(ytest)
plot(dtest, xlim=c(0,3000))
liers in density estimation
name = 'flow_sin'
y1 <- rlnorm(10000, meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(10000, meanlog=10*p.gen[name, 'meanlog'], sdlog=4*p.gen[name, 'sdlog'])
ytest <- c(y1, y2)
plot(ytest)
hist(ytest, breaks=40,)
ytest
dtest <- density(ytest, from=0, to=4*mean(ytest), bw=100)
summary(ytest)
plot(dtest, xlim=c(0,3000))
summary(ytest)
name = 'flow_sin'
y1 <- rlnorm(10000, meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(10000, meanlog=1.2*p.gen[name, 'meanlog'], sdlog=4*p.gen[name, 'sdlog'])
ytest <- c(y1, y2)
plot(ytest)
hist(ytest, breaks=40,)
ytest
dtest <- density(ytest, from=0, to=4*mean(ytest), bw=100)
summary(ytest)
plot(dtest, xlim=c(0,3000))
name = 'flow_sin'
y1 <- rlnorm(10000, meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(10000, meanlog=1.1*p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
ytest <- c(y1, y2)
plot(ytest)
hist(ytest, breaks=40,)
ytest
dtest <- density(ytest, from=0, to=10*mean(ytest), bw=100)
summary(ytest)
plot(dtest, xlim=c(0,6000))
hist(ytest, breaks=40,)
eanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(10000, meanlog=1.4*p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
ytest <- c(y1, y2)
plot(ytest)
hist(ytest, breaks=40
hist(ytest, breaks=40)
hist(ytest, breaks=40)
y1 <- rlnorm(10000, meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(10000, meanlog=2.0*p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
ytest <- c(y1, y2)
plot(ytest)
hist(ytest, breaks=40)
name = 'flow_sin'
y1 <- rlnorm(10000, meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(10000, meanlog=10.0*p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
ytest <- c(y1, y2)
plot(ytest)
hist(ytest, breaks=40)
y1 <- rlnorm(10000, meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(10000, meanlog=10.0*p.gen[name, 'meanlog'], 0.4*sdlog=p.gen[name, 'sdlog'])
ytest <- c(y1, y2)
plot(ytest)
hist(ytest, breaks=40)
name = 'flow_sin'
y1 <- rlnorm(10000, meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(10000, meanlog=10.0*p.gen[name, 'meanlog'], sdlog=0.4*p.gen[name, 'sdlog'])
ytest <- c(y1, y2)
plot(ytest)
hist(ytest, breaks=40)
name = 'flow_sin'
y1 <- rlnorm(10000, meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(10000, meanlog=10.0*p.gen[name, 'meanlog'], sdlog=0.4*p.gen[name, 'sdlog'])
ytest <- c(y1, y2)
plot(ytest)
hist(ytest, breaks=80)
name = 'flow_sin'
y1 <- rlnorm(10000, meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(10000, meanlog=5.0*p.gen[name, 'meanlog'], sdlog=0.4*p.gen[name, 'sdlog'])
ytest <- c(y1, y2)
plot(ytest)
hist(ytest, breaks=80)
name = 'flow_sin'
y1 <- rlnorm(10000, meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(10000, meanlog=3.0*p.gen[name, 'meanlog'], sdlog=0.7*p.gen[name, 'sdlog'])
ytest <- c(y1, y2)
plot(ytest)
hist(ytest, breaks=80)
y1 <- rlnorm(10000, meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(10000, meanlog=2.0*p.gen[name, 'meanlog'], sdlog=0.9*p.gen[name, 'sdlog'])
ytest <- c(y1, y2)
plot(ytest)
hist(ytest, breaks=80)
y1 <- rlnorm(10000, meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(10000, meanlog=2.0*p.gen[name, 'meanlog'], sdlog=0.99*p.gen[name, 'sdlog'])
ytest <- c(y1, y2)
plot(ytest)
hist(ytest, breaks=80)
name = 'flow_sin'
y1 <- rlnorm(10000, meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(10000, meanlog=2.0*p.gen[name, 'meanlog'], sdlog=0.99*p.gen[name, 'sdlog'])
ytest <- c(y1, y2)
lb = 0.0;
ub = 10 * mean(ytest);
plot(ytest)
hist(ytest, breaks=80, xlim=c(lw, ub))
ytest
dtest <- density(ytest, from=lb, to=ub, bw=100)
summary(ytest)
plot(dtest, xlim=c(lb, ub))
y1 <- rlnorm(10000, meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(10000, meanlog=2.0*p.gen[name, 'meanlog'], sdlog=0.99*p.gen[name, 'sdlog'])
ytest <- c(y1, y2)
lb = 0.0;
ub = 10 * mean(ytest);
plot(ytest)
hist(ytest, breaks=80, xlim=c(lw, ub))
hist(ytest, breaks=80, xlim=c(lb, ub))
y1 <- rlnorm(10000, meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(10000, meanlog=1.2*p.gen[name, 'meanlog'], sdlog=0.99*p.gen[name, 'sdlog'])
ytest <- c(y1, y2)
lb = 0.0;
ub = 10 * mean(ytest);
plot(ytest)
hist(ytest, breaks=80, xlim=c(lb, ub))
y1 <- rlnorm(10000, meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(10000, meanlog=1.3*p.gen[name, 'meanlog'], sdlog=0.99*p.gen[name, 'sdlog'])
ytest <- c(y1, y2)
lb = 0.0;
ub = 10 * mean(ytest);
plot(ytest)
hist(ytest, breaks=80, xlim=c(l
hist(ytest, breaks=80, xlim=c(lb, ub))
hist(ytest, breaks=80, xlim=c(lb, ub))
y1 <- rlnorm(10000, meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(10000, meanlog=1.3*p.gen[name, 'meanlog'], sdlog=0.95*p.gen[name, 'sdlog'])
ytest <- c(y1, y2)
lb = 0.0;
ub = 10 * mean(ytest);
plot(ytest)
hist(ytest, breaks=80, xlim=c(lb, ub))
y1 <- rlnorm(10000, meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(10000, meanlog=1.3*p.gen[name, 'meanlog'], sdlog=0.9*p.gen[name, 'sdlog'])
ytest <- c(y1, y2)
lb = 0.0;
ub = 10 * mean(ytest);
plot(ytest)
hist(ytest, breaks=80, xlim=c(lb, ub))
y1 <- rlnorm(10000, meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(10000, meanlog=1.3*p.gen[name, 'meanlog'], sdlog=0.4*p.gen[name, 'sdlog'])
ytest <- c(y1, y2)
lb = 0.0;
ub = 10 * mean(ytest);
plot(ytest)
hist(ytest, breaks=80, xlim=c(lb, ub))
dtest <- density(ytest, from=lb, to=ub, bw=100)
summary(ytest)
plot(dtest, xlim=c(lb, ub))
library(MultiscaleAnalysis)
ecdf(ytest)
ecdf.tmp <- ecdf(ytest)
plot(ecdf.tmp)
name = 'flow_sin'
Npoints = 100
y1 <- rlnorm(Npoints, meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'])
y2 <- rlnorm(Npoints, meanlog=1.3*p.gen[name, 'meanlog'], sdlog=0.4*p.gen[name, 'sdlog'])
ytest <- c(y1, y2)
lb = 0.0;
ub = 10 * mean(ytest);
plot(ytest)
hist(ytest, breaks=80, xlim=c(lb, ub))
ytest
dtest <- density(ytest, from=lb, to=ub, bw=100)
hist(ytest, breaks=20, xlim=c(lb, ub))
hist(ytest, breaks=30, xlim=c(lb, ub))
ytest
dtest <- density(ytest, from=lb, to=ub, bw=100)
summary(ytest)
plot(dtest, xlim=c(lb, ub))
dtest <- density(ytest, from=lb, to=ub, bw=200)
plot(dtest, xlim=c(lb, ub))
plot(ytest)
hist(ytest, breaks=30, xlim=c(lb, ub))
dtest <- density(ytest, from=lb, to=ub, bw=100)
plot(dtest, xlim=c(lb, ub))
ecdf.tmp <- ecdf(ytest)
plot(ecdf.tmp)
ecdf
ecdf.tmp
ecdf.tmp(10)
ecdf.tmp(100)
ecdf.tmp(200)
c_sample <- plnorm(mpoints*p.gen[name, 'scale_fac'],
meanlog=p.gen[name, 'meanlog'], sdlog=p.gen[name, 'sdlog'],
log = FALSE)
library(MultiscaleAnalysis)
p_test <- getProbabilitiesForSamples(pars=pars, p.gen=p.gen, name=name)
library(MultiscaleAnalysis)
p_test <- getProbabilitiesForSamples(pars=pars, p.gen=p.gen, name=name)
library(MultiscaleAnalysis)
p_test <- getProbabilitiesForSamples(pars=pars, p.gen=p.gen, name=name)
