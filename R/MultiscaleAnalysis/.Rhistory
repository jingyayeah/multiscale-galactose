+ s(Mean_household_size_owners) + s(Mean_household_size_renters)
+ s(LATITUDE) + s(LONGITUDE), data=calif))
system.time(calif.gam <- gam(log(Median_house_value)
~ s(Median_household_income) + s(Mean_household_income) + s(POPULATION)
+ s(Total_units) + s(Vacant_units) + s(Owners) + s(Median_rooms)
+ s(Mean_household_size_owners) + s(Mean_household_size_renters)
+ s(LATITUDE) + s(LONGITUDE), data=calif))
calif.gam2 <- gam(log(Median_house_value)
~ s(Median_household_income) + s(Mean_household_income) + s(POPULATION)
+ s(Total_units) + s(Vacant_units) + s(Owners) + s(Median_rooms)
+ s(Mean_household_size_owners) + s(Mean_household_size_renters)
+ s(LONGITUDE,LATITUDE), data=calif)
preds.gam <- predict(calif.gam,se.fit=TRUE)
predlims.gam <- predlims(preds.gam,sigma=sqrt(calif.gam$sig2))
plot(calif$Median_house_value,exp(preds.gam$fit),type="n",
xlab="Actual price ($)",ylab="Predicted ($)", main="First additive model")
segments(calif$Median_house_value,exp(predlims.gam[,"lower"]),
calif$Median_house_value,exp(predlims.gam[,"upper"]), col="grey")
abline(a=0,b=1,lty="dashed")
points(calif$Median_house_value,exp(preds.gam$fit),pch=16,cex=0.1)
plot(calif.gam2,scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
plot(calif.gam,scale=0,se=2,shade=TRUE,pages=1)
require(mgcv)
fit.gam <- gam(y~ s(x))
setwd('/home/mkoenig/multiscale-galactose/experimental_data/NHANES')
load(file='data/nhanes_data.dat')
head(data)
# General spline fitting
x <- data$RIDAGEYR
y <- data$BMXWT
fit.gam <- gam(y ~ s(x))
plot(fit.gam,scale=0,se=2,shade=TRUE,pages=1)
plot(fit.gam,scale=0,se=2,shade=TRUE,pages=1)
plot(fit.gam2,scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
plot(fit.gam,scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
fit.gam <- gam(y ~ s(x), knots=10)
plot(fit.gam,scale=0,se=2,shade=TRUE,pages=1)
plot(fit.gam,scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
fit.gam <- gam(y ~ s(x), knots=10)
fit.gam.male <- gam(y ~ s(x), subset=which(data$RIAGENDR=='male')
fit.gam.male <- gam(y ~ s(x), subset=which(data$RIAGENDR=='male'))
fit.gam.male <- gam(y ~ s(x), subset=which(data$RIAGENDR=='male'))
fit.gam.female <- gam(y ~ s(x), subset=which(data$RIAGENDR=='female'))
lines(x, predict(fit.gam.male), col='red')
inds.male <- which(data$RIAGENDR=='male')
inds.female <- which(data$RIAGENDR=='female')
fit.gam <- gam(y ~ s(x))
fit.gam.male <- gam(y ~ s(x), subset=inds.male)
fit.gam.female <- gam(y ~ s(x), subset=inds.female)
plot(fit.gam,scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
lines(x[inds.male], predict(fit.gam.male), col='red')
plot(fit.gam.male,scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
plot(fit.gam.female,scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
plot(fit.gam,scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
plot(fit.gam.male,scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
lines(fit.gam.female,scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
lines(predict(fit.gam.female),scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
fit.gam <- gam(y ~ s(x), df=9)
plot(fit.gam,scale=0,se=2,shade=TRUE,pages=1)
plot(fit.gam,scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
fit.gam <- gam(y ~ s(x, fx=TRUE), k=5)
fit.gam <- gam(y ~ s(x, fx=TRUE))
plot(fit.gam,scale=0,se=2,shade=TRUE,pages=1)
plot(fit.gam,scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
fit.gam <- gam(y ~ s(x))
plot(fit.gam,scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
fit.gam <- gam(y ~ s(x, fx=TRUE))
plot(fit.gam,scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
fit.gam <- gam(y ~ s(x, fx=TRUE), k=2)
fit.gam <- gam(y ~ s(x, fx=TRUE), k=10)
fit.gam <- gam(y ~ s(x, fx=TRUE), knots=5)
fit.gam <- gam(y ~ s(x, fx=TRUE), knots=100)
fit.gam <- gam(y ~ s(x), knots=5)
fit.gam <- gam(y ~ s(x, fx=TRUE, k=4))
plot(fit.gam,scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
fit.gam <- gam(y ~ s(x, fx=TRUE, k=1))
plot(fit.gam,scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
fit.gam <- gam(y ~ s(x, fx=TRUE, k=9))
plot(fit.gam,scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
fit.gam <- gam(y ~ s(x, k=9))
plot(fit.gam,scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
f <- function(x) (0.2 * x^11 * (10 * (1 - x))^6 + 10 *
(10 * x)^3 * (1 - x)^10)/2
x <- runif(200)
fx <- f(x)
x <- runif(200)
fx <- f(x)
Ey <- exp(fx);
scale <- .5 ## mean and GLM scale parameter
## Note that `shape' and `scale' in `rgamma' are almost
## opposite terminology to that used with GLM/GAM...
set.seed(8)
y <- rgamma(Ey*0,shape=1/scale,scale=Ey*scale)
## fit smooth model to x, y data...
b <- gam(y~s(x,k=20),family=Gamma(link=log),method="REML")
## extract parameter estiamtes and cov matrix...
beta <- coef(b);Vb <- vcov(b)
beta
Cv <- chol(Vb)
n.rep=10000;nb <- length(beta)
br <- t(Cv) %*% matrix(rnorm(n.rep*nb),nb,n.rep) + beta
xp <- 0:200/200
Xp <- predict(b,newdata=data.frame(x=xp),type="lpmatrix")
lp <- Xp%*%br
fv <- exp(lp) ## ... finally, replicate expected value vectors
yr <- matrix(rgamma(fv*0,shape=1/b$scale,scale=fv*scale),nrow(fv),ncol(fv))
plot(rep(xp,n.rep),yr,pch=".") ## plotting replicates
points(x,y,pch=19,cex=.5) ## and original data
PI <- apply(yr,1,quantile,prob=c(.025,0.975))
lines(xp,PI[1,],col=2,lwd=2);lines(xp,PI[2,],col=2,lwd=2)
pred <- predict(b,newdata=data.frame(x=xp),se=TRUE)
lines(xp,exp(pred$fit),col=3,lwd=2)
u.ci <- exp(pred$fit + 2*pred$se.fit)
l.ci <- exp(pred$fit - 2*pred$se.fit)
lines(xp,u.ci,col=3,lwd=2);lines(xp,l.ci,col=3,lwd=2)
beta <- coef(fit.gam); Vb <- vcov(fit.gam)
Cv <- chol(Vb)
n.rep=10000; nb <- length(beta)
br <- t(Cv) %*% matrix(rnorm(n.rep*nb),nb,n.rep) + beta
fv <- exp(lp) ## ... finally, replicate expected value vectors
yr <- matrix(rgamma(fv*0,shape=1/fit.gam$scale,scale=fv*scale),nrow(fv),ncol(fv))
plot(rep(xp,n.rep),yr,pch=".") ## plotting replicates
plot(rep(xp,n.rep),yr,pch=".") ## plotting replicates
xp <- 0:80
Xp <- predict(fit.gam, newdata=data.frame(x=xp), type="lpmatrix")
lp <- Xp%*%br
fv <- exp(lp) ## ... finally, replicate expected value vectors
## now simulate from Gamma deviates with mean as in fv
## and estimated scale...
yr <- matrix(rgamma(fv*0,shape=1/fit.gam$scale,scale=fv*scale),nrow(fv),ncol(fv))
plot(rep(xp, n.rep),yr,pch=".") ## plotting replicates
points(x,y,pch=19,cex=.5) ## and original data
fit.gam <- gam(y ~ s(x, k=9))
plot(fit.gam,scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
x <- data$RIDAGEYR
y <- data$BMXWT
fit.gam <- gam(y ~ s(x))
plot(fit.gam,scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
fit.gam <- gam(y ~ s(x, k=9))
fit.gam <- gam(y ~ s(x, fx=TRUE, k=9))
plot(fit.gam,scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
beta <- coef(fit.gam); Vb <- vcov(fit.gam)
Cv <- chol(Vb)
n.rep=10000; nb <- length(beta)
br <- t(Cv) %*% matrix(rnorm(n.rep*nb),nb,n.rep) + beta
## turn these into replicate linear predictors...
xp <- 0:80
Xp <- predict(fit.gam, newdata=data.frame(x=xp), type="lpmatrix")
lp <- Xp%*%br
fv <- exp(lp) ## ... finally, replicate expected value vectors
## now simulate from Gamma deviates with mean as in fv
## and estimated scale...
yr <- matrix(rgamma(fv*0,shape=1/fit.gam$scale,scale=fv*scale),nrow(fv),ncol(fv))
plot(rep(xp, n.rep),yr,pch=".") ## plotting replicates
points(x,y,pch=19,cex=.5) ## and original data
lp <- Xp%*%br
fv <- lp  ## ... finally, replicate expected value vectors
## now simulate from Gamma deviates with mean as in fv
## and estimated scale...
yr <- matrix(rgamma(fv*0,shape=1/fit.gam$scale,scale=fv*scale),nrow(fv),ncol(fv))
plot(rep(xp, n.rep),yr,pch=".") ## plotting replicates
points(x,y,pch=19,cex=.5) ## and original data
PI <- apply(yr,1,quantile,prob=c(.025,0.975))
lines(xp,PI[1,],col=2,lwd=2);lines(xp,PI[2,],col=2,lwd=2)
library(mgcv)
## simulate some data...
f <- function(x) (0.2 * x^11 * (10 * (1 - x))^6 + 10 *
(10 * x)^3 * (1 - x)^10)/2
x <- runif(200)
fx <- f(x)
Ey <- exp(fx);
scale <- .5 ## mean and GLM scale parameter
## Note that `shape' and `scale' in `rgamma' are almost
## opposite terminology to that used with GLM/GAM...
set.seed(8)
y <- rgamma(Ey*0,shape=1/scale,scale=Ey*scale)
## fit smooth model to x, y data...
b <- gam(y~s(x,k=20),family=Gamma(link=log),method="REML")
## extract parameter estiamtes and cov matrix...
beta <- coef(b);Vb <- vcov(b)
beta
## simulate replicate beta vectors from posterior...
Cv <- chol(Vb)
n.rep=10000;nb <- length(beta)
br <- t(Cv) %*% matrix(rnorm(n.rep*nb),nb,n.rep) + beta
## turn these into replicate linear predictors...
xp <- 0:200/200
Xp <- predict(b,newdata=data.frame(x=xp),type="lpmatrix")
lp <- Xp%*%br
fv <- exp(lp) ## ... finally, replicate expected value vectors
## now simulate from Gamma deviates with mean as in fv
## and estimated scale...
yr <- matrix(rgamma(fv*0,shape=1/b$scale,scale=fv*scale),nrow(fv),ncol(fv))
plot(rep(xp,n.rep),yr,pch=".") ## plotting replicates
points(x,y,pch=19,cex=.5) ## and original data
## compute 95% prediction interval...
PI <- apply(yr,1,quantile,prob=c(.025,0.975))
## and plot it...
lines(xp,PI[1,],col=2,lwd=2);lines(xp,PI[2,],col=2,lwd=2)
beta <- coef(fit.gam); Vb <- vcov(fit.gam)
beta
Vb
summary(fit.gam)
xp = seq(1:90)
xp = 1:90)
xp = 1:90
pred <- predict(fit.gam, newdata=data.frame(x=xp), se=TRUE)
plot(fit.gam,scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
lines(xp, pred$fit, col=3, lwd=2)
plot(x, y)
x <- data$RIDAGEYR
y <- data$BMXWT
grid.x <- seq(from=min(x), to=max(x), length.out=length(x))
plot(x, y)
pred <- predict(fit.gam, newdata=data.frame(x=grid.x), se=TRUE)
lines(xp, pred$fit, col=3, lwd=2)
lines(grid.x, pred$fit, col=3, lwd=2)
u.ci <- (pred$fit + 2*pred$se.fit)
l.ci <- (pred$fit - 2*pred$se.fit)
lines(grid.x, u.ci, col=3,lwd=2); lines(grid.x, l.ci, col=3,lwd=2)
plot(x, y, col='grey')
pred <- predict(fit.gam, newdata=data.frame(x=grid.x), se=TRUE)
lines(grid.x, pred$fit, col=blue, lwd=2)
u.ci <- (pred$fit + 2*pred$se.fit)
l.ci <- (pred$fit - 2*pred$se.fit)
lines(grid.x, u.ci, col=blue,lwd=2); lines(grid.x, l.ci, col=blue,lwd=2)
lines(grid.x, pred$fit, col=blue, lwd=2)
u.ci <- (pred$fit + 2*pred$se.fit)
l.ci <- (pred$fit - 2*pred$se.fit)
lines(grid.x, u.ci, col="blue",lwd=2); lines(grid.x, l.ci, col="blue",lwd=2)
plot(x, y, col='grey')
pred <- predict(fit.gam, newdata=data.frame(x=grid.x), se=TRUE)
lines(grid.x, pred$fit, col="blue", lwd=2)
u.ci <- (pred$fit + 2*pred$se.fit)
l.ci <- (pred$fit - 2*pred$se.fit)
lines(grid.x, u.ci, col="blue",lwd=2); lines(grid.x, l.ci, col="blue",lwd=2)
beta <- coef(fit.gam); Vb <- vcov(fit.gam)
Cv <- chol(Vb)   # Choleski Decomposition
print(cv)
print(Cv)
print(Vb)
n.rep=10000; nb <- length(beta)
br <- t(Cv) %*% matrix(rnorm(n.rep*nb),nb,n.rep) + beta
Xp <- predict(fit.gam, newdata=data.frame(x=grid.x), type="lpmatrix")
lp <- Xp%*%br
fv <- lp  ## ... finally, replicate expected value vectors
plot(rep(grid.x, n.rep),yr,pch=".") ## plotting replicates
size(yr)
dim(yr)
Xp <- predict(fit.gam, newdata=data.frame(x=grid.x), type="lpmatrix")
yr <- Xp%*%br
dim(yr)
plot(rep(grid.x, n.rep),yr,pch=".") ## plotting replicates
n.rep=1000; nb <- length(beta)
br <- t(Cv) %*% matrix(rnorm(n.rep*nb),nb,n.rep) + beta
## turn these into replicate linear predictors...
Xp <- predict(fit.gam, newdata=data.frame(x=grid.x), type="lpmatrix")
yr <- Xp%*%br
dim(yr)
plot(rep(grid.x, n.rep), yr, pch=".") ## plotting replicates
plot(rep(grid.x, n.rep), yr, pch=".") ## plotting replicates
dim(grid.x)
points(x,y,pch=19,cex=.5) ## and original data
predvar <- diag(Xp %*% vcov(fit.gam) %*% t(Xp))
SE <- sqrt(predvar)
SE2 <- sqrt(predvar+fit.gam$sig2)
tfrac <- qt(0.975, fit.gam$df.residual)
interval = tfrac*SE2
interval
points(x,y,pch=19,cex=.5) ## and original data
points(x,y,pch=19,cex=.5) ## and original data
plot(x,y,pch=19,cex=.5) ## and original data
lines(grid.x, pred$fit, col='blue', lwd=2)
lines(grid.x, pred$fit + interval, col='red', lwd=2)
lines(grid.x, pred$fit - interval, col='red', lwd=2)
# additional confidence interval
lines(grid.x, u.ci, col="green",lwd=2);
lines(grid.x, l.ci, col="green",lwd=2)
grid.x
fit.gam <- gam(y ~ s(x, fx=TRUE, k=9), family=gaussian())
plot(fit.gam,scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
yp <- predict(fit.gam, newdata=data.frame(x=grid.x))
ysim <- rnorm(mean=yp,sd=sqrt(SE2))
ysim <- rnorm(mean=yp,sd=sqrt(SE2),n=1)
ysim
ysim <- rnorm(mean=yp,sd=sqrt(SE2),n=length(yp))
ysim
points(grid.x, ysim, col='red')
grid.x
plot(grid.x)
plot(x,y,pch=19,cex=.5) ## and original data
lines(grid.x, pred$fit, col='blue', lwd=2)
lines(grid.x, pred$fit + interval, col='red', lwd=2)
lines(grid.x, pred$fit - interval, col='red', lwd=2)
# additional confidence interval
lines(grid.x, u.ci, col="green",lwd=2);
lines(grid.x, l.ci, col="green",lwd=2)
yp <- predict(fit.gam, newdata=data.frame(x=grid.x))
ysim <- rnorm(mean=yp,sd=sqrt(SE2),n=length(yp))
points(grid.x, ysim, col='red')
yp <- predict(fit.gam, newdata=data.frame(x=grid.x))
ysim <- rnorm(mean=yp,sd=SE2,n=length(yp))
points(grid.x, ysim, col='red')
plot(x,y,pch=19,cex=.5) ## and original data
lines(grid.x, pred$fit, col='blue', lwd=2)
lines(grid.x, pred$fit + interval, col='red', lwd=2)
lines(grid.x, pred$fit - interval, col='red', lwd=2)
# additional confidence interval
lines(grid.x, u.ci, col="green",lwd=2);
lines(grid.x, l.ci, col="green",lwd=2)
## Prediction interval example for Gamma GAM
# good example, but not clear what is happening
# https://stat.ethz.ch/pipermail/r-help/2011-April/275632.html
# simulate the model
yp <- predict(fit.gam, newdata=data.frame(x=grid.x))
ysim <- rnorm(mean=yp,sd=SE2,n=length(yp))
points(grid.x, ysim, col='red')
d = read.csv("http://www.nd.edu/~mclark19/learn/data/pisasci2006.csv")
library(psych)
install.packages('psych')
describe(d)[-1, 1:9] #univariate
library(psych)
describe(d)[-1, 1:9] #univariate
library(car)
scatterplotMatrix(d[,-c(1,3:5)],pch=19,cex=.5,reg.line=F, lwd.smooth=1.25,
spread=F,ellipse=T, col=c('gray60','#2957FF','#FF8000'),
col.axis='gray50')
library(ggplot2); library(reshape2)
dmelt = melt(d, id=c('Country','Overall'),
measure=c('Interest','Support','Income','Health','Edu','HDI'))
head(dmelt)
str(dmelt)
rm(list = ls())
d = read.csv("http://www.nd.edu/~mclark19/learn/data/pisasci2006.csv")
install.packages('psych')
install.packages("psych")
library(psych)
describe(d)[-1, 1:9] #univariate
library(car)
scatterplotMatrix(d[,-c(1,3:5)],pch=19,cex=.5,reg.line=F, lwd.smooth=1.25,
spread=F,ellipse=T, col=c('gray60','#2957FF','#FF8000'),
col.axis='gray50')
library(ggplot2); library(reshape2)
#get data into a form to take advantage of ggplot
dmelt = melt(d, id=c('Country','Overall'),
measure=c('Interest','Support','Income','Health','Edu','HDI'))
head(dmelt)
ggplot(aes(x=value,y=Overall), data=dmelt) +
geom_point(color='#FF8000',alpha=.75) +
#geom_smooth(se=F) +
geom_text(aes(label=Country), alpha=.25, size=1,angle=30, hjust=-.2,
vjust=-.2) + facet_wrap(~variable, scales='free_x') + ggtheme
ggplot(aes(x=value,y=Overall), data=dmelt) +
geom_point(color='#FF8000',alpha=.75) +
#geom_smooth(se=F) +
geom_text(aes(label=Country), alpha=.25, size=1,angle=30, hjust=-.2,
vjust=-.2) + facet_wrap(~variable, scales='free_x') + ggtheme()
ggplot(aes(x=value,y=Overall), data=dmelt) +
geom_point(color='#FF8000',alpha=.75) +
#geom_smooth(se=F) +
geom_text(aes(label=Country), alpha=.25, size=1,angle=30, hjust=-.2,
vjust=-.2) + facet_wrap(~variable, scales='free_x')
dmelt = melt(d, id=c('Country','Overall'),
measure=c('Interest','Support','Income','Health','Edu','HDI'))
str(dmelt)
ggplot(aes(x=value,y=Overall), data=dmelt) +
geom_point(color='#FF8000',alpha=.75) +
geom_smooth(se=F, method='gam', formula=y~s(x), color='#2957FF') +
geom_text(aes(label=Country), alpha=.25, size=1,angle=30, hjust=-.2,
vjust=-.2) + facet_wrap(~variable, scales='free_x')
library(mgcv)
ggplot(aes(x=value,y=Overall), data=dmelt) +
geom_point(color='#FF8000',alpha=.75) +
geom_smooth(se=F, method='gam', formula=y~s(x), color='#2957FF') +
geom_text(aes(label=Country), alpha=.25, size=1,angle=30, hjust=-.2,
vjust=-.2) + facet_wrap(~variable, scales='free_x')
warnings()
mod_lm <- gam(Overall ~ Income, data=d)
summary(mod_lm)
mad_gam1 <- gam(Overall ~s(Income, bs="cr"), data=d)
summary(mad_gam1)
plot(Income, Overall, data=d)
plot(d$Income, d$Overall)
lines(d$Income, predict(mad_gam1))
lines(d$Income, predict(mad_gam1, data=Income))
lines(d$Income, predict(mad_gam1))
summary(mad_gam1)
?summary.gam
plot(mod_gam1)
mod_gam1 <- gam(Overall ~ s(Income, bs="cr"), data=d)
summary(mod_gam1)
plot(mod_gam1)
AIC(mod_lm)
summary(mod_lm)$sp.criterion
summary(mod_lm)$r.sq # adjusted R squared
summary(mod_gam)$r.sq # adjusted R squared
summary(mod_gam1)$r.sq # adjusted R squared
summary(mod_gam1)$sp.criterion
AIC(mod_gam1)
?anova.gam
anova(mod_lm, mod_gam1, test = "Chisq")
mod_lm2 <- gam(Overall ~ Income + Edu + Health, data=d)
mod_lm2 <- gam(Overall ~ Income + Edu + Health, data=d)
summary(mod_lm2)
mod_gam2 <- gam(Overall ~s(Income) + s(Edu) + s(Health), data=d)
summary(mod_gam2)
mod_gam2B <- update(mod_gam2, .~. -s(Health) + Health)
summary(mod_gam2B)
plot(mod_gam2, pages=1, residuals=T, pch=19, cex=0.25,
scheme=1, col='#FF8000', shade=T,shade.col='gray90')
ggplot(aes(x=Income,y=fit), data=predicts) +
geom_smooth(aes(ymin = fit - 1.96*se.fit, ymax=fit + 1.96*se.fit),
fill='gray80', size=1,stat='identity')
testdata = data.frame(Income=seq(.4,1, length=100),
Edu=mean(mod_gam2$model$Edu),
Health=mean(mod_gam2$model$Health))
fits = predict(mod_gam2, newdata=testdata, type='response', se=T)
predicts = data.frame(testdata, fits)
ggplot(aes(x=Income,y=fit), data=predicts) +
geom_smooth(aes(ymin = fit - 1.96*se.fit, ymax=fit + 1.96*se.fit),
fill='gray80', size=1,stat='identity')
vis.gam(mod_gam2, type = "response", plot.type = "contour")
mod_gam3 <- gam(Overall ~ te(Income, Edu), data = d)
summary(mod_gam3)
phi=30, theta=30,n.grid=500, border=NA)
vis.gam(mod_gam3, type='response', plot.type='persp',
phi=30, theta=30,n.grid=500, border=NA)
vis.gam(mod_gam3, type='response', plot.type='persp',
phi=30, theta=30,n.grid=500, border=NA)
anova(mod_lm2, mod_gam2, test = "Chisq")
?smooth.terms
fit.gam <- gam(y ~ s(x, fx=TRUE, k=9), family=gaussian())
gam.check(mod_gam2, k.rep=1000)
rm(list = ls())
setwd('/home/mkoenig/multiscale-galactose/experimental_data/NHANES')
load(file='data/nhanes_data.dat')
head(data)
x <- data$RIDAGEYR
y <- data$BMXWT
plot(x, y)
rug(x, side=1, col="grey"); rug(y, side=2, col="grey")
grid.x <- seq(from=min(x), to=max(x), length.out=length(x))
require(mgcv)
inds.male <- which(data$RIAGENDR=='male')
inds.female <- which(data$RIAGENDR=='female')
fit.gam <- gam(y ~ s(x))
plot(fit.gam,scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
fit.gam <- gam(y ~ s(x, k=9))
fit.gam <- gam(y ~ s(x, fx=TRUE, k=9), family=gaussian())
plot(fit.gam,scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
gam.check(fit.gam, k.rep=1000)
fit.gam <- gam(y ~ s(x, fx=TRUE, k=9), family=Gamma())
gam.check(fit.gam, k.rep=1000)
plot(fit.gam,scale=0,se=2,shade=TRUE,pages=1)
plot(exp(fit.gam),scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
plot(fit.gam,scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
fit.gam <- gam(y ~ s(x, fx=TRUE, k=9), family=gaussian())
gam.check(fit.gam, k.rep=1000)
plot(fit.gam,scale=0,se=2,shade=TRUE,resid=TRUE,pages=1)
install.packages('gamlss')
install.packages('lms')
library('gamlss')
rm(list = ls())
setwd('/home/mkoenig/multiscale-galactose/experimental_data/NHANES')
load(file='data/nhanes_data.dat')
head(data)
# Get example data
x <- data$RIDAGEYR
y <- data$BMXWT
plot(x, y)
rug(x, side=1, col="grey"); rug(y, side=2, col="grey")
library('gamlss')
lms()
load(airquality)
require(graphics)
airquality
plot(Ozone ~ Wind, data=airquality)
fit.lm <- model(Ozone ~ Wind, data=airquality)
fit.lm <- lm(Ozone ~ Wind, data=airquality)
summary(fit.lm)
lines(airquality$Wind, predict(fit.lm)
)
abline(fit.lm)
plot(log(Ozone) ~ Wind, data=airquality)
fit.poi <- glm(Ozone ~ Wind, data=airquality, family=poisson)
plot(glm)
plot(fit.poi)
plot(fit.poi)
plot(Ozone ~ Wind, data=airquality)
library(nlme)
fit.gls <- gls(Ozone ~ Wind, airquality)
summary(airquality)
fit.gls <- gls(Ozone~Wind, airquality, na.action=na.exclude)
head(airquality)
as.Date(paste(1973, airquality$Month, airquality$Day, sep='-'))
airquality$Data <- as.Date(paste(1973, airquality$Month, airquality$Day, sep='-'))
xyplot(Ozone~Date, airquality)
library(lattice)
xyplot(Ozone~Date, airquality)
airquality$Date <- as.Date(paste(1973, airquality$Month, airquality$Day, sep='-'))
library(lattice)
xyplot(Ozone~Date, airquality)
fit.gls2 <- gls(Ozone~Wind*Date, airquality, na.action=na.exclude)
plot(ACF(fit.gls2))
air2 <- subset(airquality, complete.cases(Ozone))
fit.gls3 <- gls(Ozone~Wind*Date, air2)
plot(ACF(fit.gls3))
plot(ACF(fit.gls3), form=~Date)
plot(ACF(fit.gls3), form=~Date, alpha=0.05)
fit.gls4<-update(fit.gls4, correlation=corAR1())
fit.gls4<-update(fit.gls3, correlation=corAR1())
library(MuMIn)
