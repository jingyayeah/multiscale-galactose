compounds = c('rbcM', 'alb', 'suc', 'h2oM')
ccolors = c('red', 'darkgreen', 'darkorange', 'darkblue')
pv_compounds = paste('PV__', compounds, sep='')
names(ccolors) <- pv_compounds
# Colors for probability weights
col2rgb_alpha <- function(col, alpha){
rgb <- rgb(col2rgb(col)[[1]]/256,col2rgb(col)[[2]]/256,col2rgb(col)[[3]]/256, alpha)
}
# Colors for weights
getColorsForWeights <- function (weights) {
print('getColorsForWeights')
ccol = 'gray'
Nsim = nrow(pars)
Ncol = 7
colpal <- brewer.pal(Ncol+2, 'Greys')
ccols = rep(colpal[1], Nsim)
maxValue = max(weights)
bw = maxValue/Ncol
for (k in seq(Ncol)){
ind <- which( (weights>((k-1)*bw)) & (weights <= (k*bw)))
ccols[ind] = colpal[k+2]
ccols[ind] = col2rgb_alpha(colpal[k+2], 0.7)
}
ccols
}
# Preprocess the parameters for scaling
for (kt in seq(Ntask)){
task <- tasks[kt]
peak <- peaks[kt]
modelId <- paste('MultipleIndicator_', peak, '_', version, '_Nc20_Nf1', sep='')
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
# Load the data
load(file=outfileFromParsFile(parsfile))
# Parameter processing
ps <- getParameterTypes(pars=pars)
# Extend the parameters with the SBML parameters and calculated parameters
fsbml <- file.path(ma.settings$dir.results, sname, paste(modelId, '.xml', sep=''))
model <- loadSBMLModel(fsbml)
pars <- extendParameterStructure(pars=pars, fixed_ps=ps$fixed, model=model)
head(pars)
# Standard distributions for normal case
p.gen <- loadStandardDistributions()
print(p.gen)
# ECDFs for standard distributions
ecdf.list <- createListOfStandardECDF(p.gen, ps$var)
# Calculate the probabilites for single variables
pars <- calculateProbabilitiesForVariables(pars, ecdf.list)
# And the overall probability per sample
pars <- calculateSampleProbability(pars, ps$var)
head(pars)
# Color definition based on probabilities
weights <- NULL
# weights = pars$p_sample
if (is.null(weights)){
ccols <- NULL
}else{
ccols <- getColorsForWeights(weights)
}
# Create the plots
print('weigths:')
weights
time = getTimeFromPreprocessMatrix(preprocess.mat)-10.0
plotMultipleIndicatorCurves(time, preprocess.mat, weights=NULL, ccols=ccols, create_plot_files=T)
plotMultipleIndicatorMean(time, preprocess.mat, weights=NULL, create_plot_files=T)
}
library(MultiscaleAnalysis)
library(MultiscaleAnalysis)
################################################################
rm(list=ls())
library('MultiscaleAnalysis')
library('matrixStats')
library('RColorBrewer')
library('libSBML')
setwd(ma.settings$dir.results)
#------------------------------------------------------------------------------#
sname <- '2014-05-13_MultipleIndicator'
version <- 'v18'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, 'data')
task.offset <- 31
task.seq <- seq(0,2)
tasks <- paste('T', task.offset+task.seq, sep='')
peaks <- paste('P0', task.seq, sep='')
Ntask = length(tasks)
#------------------------------------------------------------------------------#
compounds = c('gal', 'rbcM', 'alb', 'suc', 'h2oM')
ccolors = c('black', 'red', 'darkgreen', 'darkorange', 'darkblue')
compounds = c('rbcM', 'alb', 'suc', 'h2oM')
ccolors = c('red', 'darkgreen', 'darkorange', 'darkblue')
pv_compounds = paste('PV__', compounds, sep='')
names(ccolors) <- pv_compounds
# Colors for probability weights
col2rgb_alpha <- function(col, alpha){
rgb <- rgb(col2rgb(col)[[1]]/256,col2rgb(col)[[2]]/256,col2rgb(col)[[3]]/256, alpha)
}
# Colors for weights
getColorsForWeights <- function (weights) {
print('getColorsForWeights')
ccol = 'gray'
Nsim = nrow(pars)
Ncol = 7
colpal <- brewer.pal(Ncol+2, 'Greys')
ccols = rep(colpal[1], Nsim)
maxValue = max(weights)
bw = maxValue/Ncol
for (k in seq(Ncol)){
ind <- which( (weights>((k-1)*bw)) & (weights <= (k*bw)))
ccols[ind] = colpal[k+2]
ccols[ind] = col2rgb_alpha(colpal[k+2], 0.7)
}
ccols
}
# Preprocess the parameters for scaling
for (kt in seq(Ntask)){
task <- tasks[kt]
peak <- peaks[kt]
modelId <- paste('MultipleIndicator_', peak, '_', version, '_Nc20_Nf1', sep='')
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
# Load the data
load(file=outfileFromParsFile(parsfile))
# Parameter processing
ps <- getParameterTypes(pars=pars)
# Extend the parameters with the SBML parameters and calculated parameters
fsbml <- file.path(ma.settings$dir.results, sname, paste(modelId, '.xml', sep=''))
model <- loadSBMLModel(fsbml)
pars <- extendParameterStructure(pars=pars, fixed_ps=ps$fixed, model=model)
head(pars)
# Standard distributions for normal case
p.gen <- loadStandardDistributions()
print(p.gen)
# ECDFs for standard distributions
ecdf.list <- createListOfStandardECDF(p.gen, ps$var)
# Calculate the probabilites for single variables
pars <- calculateProbabilitiesForVariables(pars, ecdf.list)
# And the overall probability per sample
pars <- calculateSampleProbability(pars, ps$var)
head(pars)
# Color definition based on probabilities
weights <- NULL
# weights = pars$p_sample
if (is.null(weights)){
ccols <- NULL
}else{
ccols <- getColorsForWeights(weights)
}
# Create the plots
print('weigths:')
weights
time = getTimeFromPreprocessMatrix(preprocess.mat)-10.0
plotMultipleIndicatorCurves(time, preprocess.mat, weights=NULL, ccols=ccols, create_plot_files=T)
plotMultipleIndicatorMean(time, preprocess.mat, weights=NULL, create_plot_files=T)
}
rm(list=ls())
library(data.table)
library(libSBML)
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
###########################################################################
# load parameters
###########################################################################
sname <- '2014-05-13_Galactose'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, 'data')
load_with_sims = FALSE;
task = 'T30'
modelId <- 'Galactose_v18_Nc20_Nf1'
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
pars <- loadParameterFile(parsfile)
print(summary(pars))
names(pars)
summary(pars)
plotParameterHistogramFull(pars)
load(outFile)
outFile <- outfileFromParsFile(parsfile)
load(outFile)
###############################################################
# Calculate the clearance parameters
###############################################################
# F = flow_sin              # [µm/sec]
# c_in = 'PP__gal'[end]     # [mmol/l]
# c_out = 'PV_gal[end]'          # [mmol/l]
# R = F*(c_in - c_out)      # [m/sec * mmol/l]
# ER = (c_in - c_out)/c_in  # [-]
# CL = R/c_in               # [µm/sec]
# GE = (c_in - c_out)
# get the last timepoint of the component
get_last_timepoint <- function(name){
data <- preprocess.mat[[name]]
dims <- dim(data)
res <- data[dims[1],]
}
c_in <- get_last_timepoint('PP__gal')
c_out <- get_last_timepoint('PV__gal')
FL <- pars$flow_sin # TODO: use correct volume flow
parscl <- pars
parscl$FL <- FL
parscl$c_in <- c_in
parscl$c_out <- c_out
parscl$R <- FL * (c_in - c_out)
parscl$ER <- (c_in - c_out)/c_in
parscl$CL <- FL * (c_in - c_out)/c_in
parscl$GE <- (c_in - c_out)
names(parscl)
# Created Figure
par(mfrow=c(2,2))
plot(ptest$c_in, ptest$GE, xlab="periportal galactose [mmol/l]", ylab="Galactose Elimination (GE) [mmol/l]")
plot(ptest$flow_sin, ptest$GE, xlab="sinusoidal blood flow [µm/sec]", ylab="Galactose Elimination (GE) [mmol/l]")
plot(ptest$FL, ptest$ER, xlab="sinusoidal blood flow [µm/sec]", ylab="Extraction Ratio (ER) [-]")
plot(ptest$FL, ptest$CL, xlab="sinusoidal blood flow [µm/sec]", ylab="Clearance (CL) [µm/sec]")
par(mfrow=c(1,1))
# This parameters have to be scaled to the total liver
ptest <- parscl[which(parscl$deficiency==0),]
head(pars)
pars$flow_sin <- factor(pars$flow_sin)
levels(pars$flow_sin)
pars$flow_sin
# Created Figure
par(mfrow=c(2,2))
plot(ptest$c_in, ptest$GE, xlab="periportal galactose [mmol/l]", ylab="Galactose Elimination (GE) [mmol/l]")
plot(ptest$flow_sin, ptest$GE, xlab="sinusoidal blood flow [µm/sec]", ylab="Galactose Elimination (GE) [mmol/l]")
plot(ptest$FL, ptest$ER, xlab="sinusoidal blood flow [µm/sec]", ylab="Extraction Ratio (ER) [-]")
plot(ptest$FL, ptest$CL, xlab="sinusoidal blood flow [µm/sec]", ylab="Clearance (CL) [µm/sec]")
par(mfrow=c(1,1))
install.packages("scatterplot3d", dependencies = TRUE)
library(scatterplot3d)
install.packages("scatterplot3d", dependencies = TRUE)
library(scatterplot3d)
library('scatterplot3d')
install.packages("scatterplot3d")
library('scatterplot3d')
install.packages('lattice')
wireframe(z ~ x * y, data=data)
library(lattice)
wireframe(z ~ x * y, data=data)
data <- data-frame()
data$x = ptest$c_in
data$y = ptest$flow_sin
data$z = ptest$GE
data <- list()
data$x = ptest$c_in
data$y = ptest$flow_sin
data$z = ptest$GE
library(lattice)
wireframe(z ~ x * y, data=data)
p <- wireframe(z ~ x * y, data=data)
npanel <- c(4, 2)
rotx <- c(-50, -80)
rotz <- seq(30, 300, length = npanel[1]+1)
update(p[rep(1, prod(npanel))], layout = npanel,
panel = function(..., screen) {
panel.wireframe(..., screen = list(z = rotz[current.column()],
x = rotx[current.row()]))
})
library(lattice)
wireframe(z ~ x * y, data=data, xlab="PP galactose [mM]", ylab="blood flow",
zlab="GE")
p <- wireframe(z ~ x * y, data=data, xlab="PP galactose [mM]", ylab="blood flow",zlab="GE")
npanel <- c(4, 2)
rotx <- c(-50, -80)
rotz <- seq(30, 300, length = npanel[1]+1)
update(p[rep(1, prod(npanel))], layout = npanel,
panel = function(..., screen) {
panel.wireframe(..., screen = list(z = rotz[current.column()],
x = rotx[current.row()]))
})
rm(list=ls())
library('MultiscaleAnalysis')
library('matrixStats')
library('RColorBrewer')
library('libSBML')
setwd(ma.settings$dir.results)
#------------------------------------------------------------------------------#
sname <- '2014-05-13_MultipleIndicator'
version <- 'v18'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, 'data')
task.offset <- 31
task.seq <- seq(0,2)
tasks <- paste('T', task.offset+task.seq, sep='')
peaks <- paste('P0', task.seq, sep='')
Ntask = length(tasks)
#------------------------------------------------------------------------------#
compounds = c('gal', 'rbcM', 'alb', 'suc', 'h2oM')
ccolors = c('black', 'red', 'darkgreen', 'darkorange', 'darkblue')
compounds = c('rbcM', 'alb', 'suc', 'h2oM')
ccolors = c('red', 'darkgreen', 'darkorange', 'darkblue')
pv_compounds = paste('PV__', compounds, sep='')
names(ccolors) <- pv_compounds
# Colors for probability weights
col2rgb_alpha <- function(col, alpha){
rgb <- rgb(col2rgb(col)[[1]]/256,col2rgb(col)[[2]]/256,col2rgb(col)[[3]]/256, alpha)
}
# Colors for weights
getColorsForWeights <- function (weights) {
print('getColorsForWeights')
ccol = 'gray'
Nsim = nrow(pars)
Ncol = 7
colpal <- brewer.pal(Ncol+2, 'Greys')
ccols = rep(colpal[1], Nsim)
maxValue = max(weights)
bw = maxValue/Ncol
for (k in seq(Ncol)){
ind <- which( (weights>((k-1)*bw)) & (weights <= (k*bw)))
ccols[ind] = colpal[k+2]
ccols[ind] = col2rgb_alpha(colpal[k+2], 0.7)
}
ccols
}
# Preprocess the parameters for scaling
for (kt in seq(Ntask)){
task <- tasks[kt]
peak <- peaks[kt]
modelId <- paste('MultipleIndicator_', peak, '_', version, '_Nc20_Nf1', sep='')
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
# Load the data
load(file=outfileFromParsFile(parsfile))
# Parameter processing
ps <- getParameterTypes(pars=pars)
# Extend the parameters with the SBML parameters and calculated parameters
fsbml <- file.path(ma.settings$dir.results, sname, paste(modelId, '.xml', sep=''))
model <- loadSBMLModel(fsbml)
pars <- extendParameterStructure(pars=pars, fixed_ps=ps$fixed, model=model)
head(pars)
# Standard distributions for normal case
p.gen <- loadStandardDistributions()
print(p.gen)
# ECDFs for standard distributions
ecdf.list <- createListOfStandardECDF(p.gen, ps$var)
# Calculate the probabilites for single variables
pars <- calculateProbabilitiesForVariables(pars, ecdf.list)
# And the overall probability per sample
pars <- calculateSampleProbability(pars, ps$var)
head(pars)
# Color definition based on probabilities
weights <- NULL
# weights = pars$p_sample
if (is.null(weights)){
ccols <- NULL
}else{
ccols <- getColorsForWeights(weights)
}
# Create the plots
print('weigths:')
weights
time = getTimeFromPreprocessMatrix(preprocess.mat)-10.0
plotMultipleIndicatorCurves(time, preprocess.mat, weights=NULL, ccols=ccols, create_plot_files=T)
plotMultipleIndicatorMean(time, preprocess.mat, weights=NULL, create_plot_files=T)
}
name="PV__rbcM"
time <- getTimeFromPreprocessMatrix(preprocess.mat) - 10.0
plotCompound(time, preprocess.mat[[name]], name, col=ccolors[name], ylim=c(0,1.2))
rm(list=ls())
library('MultiscaleAnalysis')
library('matrixStats')
library('RColorBrewer')
library('libSBML')
setwd(ma.settings$dir.results)
#------------------------------------------------------------------------------#
sname <- '2014-05-13_MultipleIndicator'
version <- 'v18'
ma.settings$dir.simdata <- file.path(ma.settings$dir.results, sname, 'data')
task.offset <- 31
task.seq <- seq(0,2)
tasks <- paste('T', task.offset+task.seq, sep='')
peaks <- paste('P0', task.seq, sep='')
Ntask = length(tasks)
#------------------------------------------------------------------------------#
compounds = c('gal', 'rbcM', 'alb', 'suc', 'h2oM')
ccolors = c('black', 'red', 'darkgreen', 'darkorange', 'darkblue')
compounds = c('rbcM', 'alb', 'suc', 'h2oM')
ccolors = c('red', 'darkgreen', 'darkorange', 'darkblue')
pv_compounds = paste('PV__', compounds, sep='')
names(ccolors) <- pv_compounds
# Colors for probability weights
col2rgb_alpha <- function(col, alpha){
rgb <- rgb(col2rgb(col)[[1]]/256,col2rgb(col)[[2]]/256,col2rgb(col)[[3]]/256, alpha)
}
# Colors for weights
getColorsForWeights <- function (weights) {
print('getColorsForWeights')
ccol = 'gray'
Nsim = nrow(pars)
Ncol = 7
colpal <- brewer.pal(Ncol+2, 'Greys')
ccols = rep(colpal[1], Nsim)
maxValue = max(weights)
bw = maxValue/Ncol
for (k in seq(Ncol)){
ind <- which( (weights>((k-1)*bw)) & (weights <= (k*bw)))
ccols[ind] = colpal[k+2]
ccols[ind] = col2rgb_alpha(colpal[k+2], 0.7)
}
ccols
}
# Preprocess the parameters for scaling
# for (kt in seq(Ntask)){
for (kt in seq(1)){
task <- tasks[kt]
peak <- peaks[kt]
modelId <- paste('MultipleIndicator_', peak, '_', version, '_Nc20_Nf1', sep='')
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
# Load the data
load(file=outfileFromParsFile(parsfile))
# Parameter processing
ps <- getParameterTypes(pars=pars)
# Extend the parameters with the SBML parameters and calculated parameters
fsbml <- file.path(ma.settings$dir.results, sname, paste(modelId, '.xml', sep=''))
model <- loadSBMLModel(fsbml)
pars <- extendParameterStructure(pars=pars, fixed_ps=ps$fixed, model=model)
head(pars)
# Standard distributions for normal case
p.gen <- loadStandardDistributions()
print(p.gen)
# ECDFs for standard distributions
ecdf.list <- createListOfStandardECDF(p.gen, ps$var)
# Calculate the probabilites for single variables
pars <- calculateProbabilitiesForVariables(pars, ecdf.list)
# And the overall probability per sample
pars <- calculateSampleProbability(pars, ps$var)
head(pars)
# Color definition based on probabilities
weights <- NULL
# weights = pars$p_sample
if (is.null(weights)){
ccols <- NULL
}else{
ccols <- getColorsForWeights(weights)
}
# Create the plots
print('weigths:')
weights
time = getTimeFromPreprocessMatrix(preprocess.mat)-10.0
plotMultipleIndicatorCurves(time, preprocess.mat, weights=NULL, ccols=ccols, create_plot_files=T)
plotMultipleIndicatorMean(time, preprocess.mat, weights=NULL, create_plot_files=T)
}
name="PV__alb"
time <- getTimeFromPreprocessMatrix(preprocess.mat) - 10.0
plotCompound(time, preprocess.mat[[name]], name, col=ccolors[name], ylim=c(0,1.2))
name="PV__alb"
if (create_plot_files){
png(filename=paste(ma.settings$dir.results, '/', task, "_test_", name, sep=""),
width = 500, height = 500, units = "px", bg = "white",  res = 150)
}
time <- getTimeFromPreprocessMatrix(preprocess.mat) - 10.0
plotCompound(time, preprocess.mat[[name]], name, col=ccolors[name], ylim=c(0,1.2))
if (create_plot_files){
dev.off()
}
create_plot_files = TRUE
if (create_plot_files){
png(filename=paste(ma.settings$dir.results, '/', task, "_test_", name, sep=""),
width = 500, height = 500, units = "px", bg = "white",  res = 150)
}
time <- getTimeFromPreprocessMatrix(preprocess.mat) - 10.0
plotCompound(time, preprocess.mat[[name]], name, col=ccolors[name], ylim=c(0,1.2))
if (create_plot_files){
dev.off()
}
name="PV__alb"
create_plot_files = TRUE
if (create_plot_files){
png(filename=paste(ma.settings$dir.results, '/', task, "_test_", name, sep=""),
width = 500, height = 500, units = "px", bg = "white",  res = 200)
}
time <- getTimeFromPreprocessMatrix(preprocess.mat) - 10.0
plotCompound(time, preprocess.mat[[name]], name, col=ccolors[name], ylim=c(0,1.2))
if (create_plot_files){
dev.off()
}
# some example plots
name="PV__alb"
create_plot_files = TRUE
if (create_plot_files){
png(filename=paste(ma.settings$dir.results, '/', task, "_test_", name, sep=""),
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
time <- getTimeFromPreprocessMatrix(preprocess.mat) - 10.0
plotCompound(time, preprocess.mat[[name]], name, col=ccolors[name], ylim=c(0,1.2))
if (create_plot_files){
dev.off()
}
# some example plots
name="PP__alb"
create_plot_files = TRUE
if (create_plot_files){
png(filename=paste(ma.settings$dir.results, '/', task, "_test_", name, sep=""),
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
time <- getTimeFromPreprocessMatrix(preprocess.mat) - 10.0
plotCompound(time, preprocess.mat[[name]], name, col=ccolors[name], ylim=c(0,1.2))
if (create_plot_files){
dev.off()
}
max(preprocess.mat[["PP__alb"]]
max(preprocess.mat[["PP__alb"]])
max(preprocess.mat[["PP__alb"]])
max(preprocess.mat[["PP__alb"]])
# some example plots
name="PP__alb"
create_plot_files = TRUE
if (create_plot_files){
png(filename=paste(ma.settings$dir.results, '/', task, "_test_", name, sep=""),
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
time <- getTimeFromPreprocessMatrix(preprocess.mat) - 10.0
plotCompound(time, preprocess.mat[[name]], name, col=ccolors[name], ylim=c(0,2.1))
if (create_plot_files){
dev.off()
}
