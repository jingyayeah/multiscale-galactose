head(sch1945)
# sex [m,f], age [years], bodyweight [kg], GEC [mg/min/kg]
sch1986.tab1 <- read.csv(file.path(ma.settings$dir.expdata, "GEC", "Schnegg1986_Tab1.csv"), sep="\t")
sch1986.tab1$dtype <- 'individual'
sch1986.tab1$gender <- getGender(sch1986.tab1)
sch1986.tab1$GECmgkg <- sch1986.tab1$GEC
sch1986.tab1$GEC <- sch1986.tab1$GECmgkg * sch1986.tab1$bodyweight/180; # [mg/min/kg -> mmol/min]
sch1986.tab1$GECkg <- sch1986.tab1$GECmgkg/180
head(sch1986.tab1)
# age [years], GEC [mg/min/kg]
sch1986.fig1 <- read.csv(file.path(ma.settings$dir.expdata, "GEC", "Schnegg1986_Fig1.csv"), sep="\t")
sch1986.fig1$dtype <- 'individual'
sch1986.fig1$gender <- getGender(sch1986.fig1)
sch1986.fig1$GECmgkg <- sch1986.fig1$GEC
sch1986.fig1$GECkg   <- sch1986.fig1$GEC/180
head(sch1986.fig1)
# age [years], bodyweight [kg], volLiver [ml], volLiverkg [ml/kg]
swi1978 <- read.csv(file.path(ma.settings$dir.expdata, "GEC", "Swift1978_Tab1.csv"), sep="\t")
swi1978$dtype <- 'population'
swi1978$gender <- getGender(swi1978)
swi1978$ageRange <- 0.5*(swi1978$ageMax - swi1978$ageMin)
swi1978 <- swi1978[-3, ] # remove hospitalized cases
head(swi1978)
# sex [M], age [years], bodyweight [kg], liverWeight [kg]
tom1965 <- read.csv(file.path(ma.settings$dir.expdata, "liver_volume", "Thompson1965.csv"), sep="\t")
tom1965$dtype <- 'population'
tom1965$gender <- getGender(tom1965)
tom1965$volLiver <- tom1965$liverWeight/f_liver_density * 1000; # [ml]
tom1965$volLiverSd <- tom1965$liverWeightSd/f_liver_density * 1000; # [ml]
tom1965$ageRange <- 0.5*(tom1965$ageMax - tom1965$ageMin)
head(tom1965)
# age [years], bodyweight [kg], GEC [mmol/min]
tyg1962 <- read.csv(file.path(ma.settings$dir.expdata, "GEC", "Tygstrup1962.csv"), sep="\t")
tyg1962$dtype <- 'individual'
tyg1962$gender = getGender(tyg1962)
tyg1962$GECkg <- tyg1962$GEC/tyg1962$bodyweight
tyg1962 <- tyg1962[tyg1962$state=='healthy', ] # filter cirrhosis out
head(tyg1962)
# BSA [m^2], liverVol [ml]
ura1995 <- read.csv(file.path(ma.settings$dir.expdata, "liver_volume", "Urata1995.csv"), sep="\t")
ura1995$dtype <- 'individual'
ura1995$gender <- getGender(ura1995)
ura1995$volLiver <- ura1995$liverVol
head(ura1995)
# BSA [m^2], liverVol [ml]
vau2002.fig1 <- read.csv(file.path(ma.settings$dir.expdata, "liver_volume", "Vauthey2002_Fig1.csv"), sep="\t")
vau2002.fig1$dtype <- 'individual'
vau2002.fig1$gender <- getGender(vau2002.fig1)
vau2002.fig1$volLiver <- vau2002.fig1$liverVol
head(vau2002.fig1)
# bodyweight [kg], liverVol [ml]
vau2002.fig2 <- read.csv(file.path(ma.settings$dir.expdata, "liver_volume", "Vauthey2002_Fig2.csv"), sep="\t")
vau2002.fig2$dtype <- 'individual'
vau2002.fig2$gender <- as.character(vau2002.fig2$sex)
vau2002.fig2$gender[vau2002.fig2$gender=='U'] <- 'all'
vau2002.fig2$volLiver <- vau2002.fig2$liverVol
head(vau2002.fig2)
# sex [male,female], age [years], weight [kg], GEC [mmol/min], bloodFlowM1 [ml/min], bloodFlowM2 [ml/min],
# flowLiver [ml/min]
win1965 <- read.csv(file.path(ma.settings$dir.expdata, "GEC", "Winkler1965.csv"), sep="\t")
win1965$dtype <- 'individual'
win1965$gender <- getGender(win1965)
win1965$flowLiverkg <- win1965$flowLiver/win1965$bodyweight
win1965 <- win1965[!is.na(win1965$GEC), ] # filter cases without GEC
head(win1965)
# gender [male, female], age [years], liver volume [ml], bloodflow, perfusion
wyn1989 <- read.csv(file.path(ma.settings$dir.expdata, "wynne", "Wynne1989_corrected.csv"), sep="\t")
wyn1989$dtype <- 'individual'
wyn1989$gender <- getGender(wyn1989)
wyn1989$volLiver <- wyn1989$livVolume
wyn1989$volLiverkg <- wyn1989$livVolumekg
wyn1989$flowLiver <- wyn1989$livBloodflow
wyn1989$flowLiverkg <- wyn1989$livBloodflowkg
wyn1989$study <- 'wyn1989'
head(wyn1989)
# age [years], liver bloodflow [ml/min]
wyn1990 <- read.csv(file.path(ma.settings$dir.expdata, "liver_bloodflow", "Wynne1990.csv"), sep="\t")
wyn1990$dtype <- 'individual'
wyn1990$gender <- getGender(wyn1990)
wyn1990$flowLiver <- wyn1990$liverBloodflow
head(wyn1990)
# BSA [m^2], liverWeight [g]
yos2003 <- read.csv(file.path(ma.settings$dir.expdata, "liver_volume", "Yoshizumi2003.csv"), sep="\t")
yos2003$dtype <- 'individual'
yos2003$gender <- getGender(yos2003)
yos2003$volLiver <- yos2003$liverWeight/f_liver_density ; # [ml]
head(yos2003)
# age [years], FHF (functional hepatic flow) [ml/min]
zol1993 <- read.csv(file.path(ma.settings$dir.expdata, "liver_bloodflow", "Zoller1993.csv"), sep="\t")
zol1993$dtype <- 'individual'
zol1993$gender <- getGender(zol1993)
zol1993$flowLiverkg <- zol1993$liverBloodflowPerBodyweight
head(zol1993)
# age [years], FHF (functional hepatic flow) [ml/min]
zol1999 <- read.csv(file.path(ma.settings$dir.expdata, "liver_bloodflow", "Zoli1999.csv"), sep="\t")
zol1999$dtype <- 'individual'
zol1999$gender <- getGender(zol1999)
zol1999$flowLiver <- zol1999$FHF
head(zol1999)
############################################################################################
# Linear regression template
############################################################################################
linear_regression <- function(data, xname, yname){
# do linear regression
formula <- as.formula(paste(yname, '~', xname))
m1 <- lm(formula, data=data)
# Create output file with log information
name = paste(yname, 'vs', xname)
log.file <- file.path(ma.settings$dir.results, 'regression',
paste(name, '.txt', sep=""))
sink.file <- file(log.file, open = "wt")
sink(sink.file)
sink(sink.file, type="message")
# TODO better logging
print('### Data ###')
print(summary(data))
print('### Linear Regression Model ###')
print(summary(m1))
sink(type="message")
sink()
return(m1)
}
############################################################################################
# Helper functions
############################################################################################
makeFigureFull <- function(data, m1, xname, yname, create_plots=F){
xlab <- lab[[xname]]; ylab <- lab[[yname]]
xlim <- lim[[xname]]; ylim <- lim[[yname]]
main <- sprintf('%s vs. %s', yname, xname)
makeFigure(data, m1, main, xname, yname, xlab, ylab, xlim, ylim, create_plots)
}
makeFigure <- function(data, m1, main, xname, yname,
xlab, ylab,
xlim, ylim, create_plots=F){
name = paste(yname, 'vs', xname)
if (create_plots == TRUE){
plot.file <- file.path(ma.settings$dir.results, 'regression',
paste(name, '.png', sep=""))
print(plot.file)
png(filename=plot.file,
width = 1000, height = 1000, units = "px", bg = "white",  res = 150)
}
plot(numeric(0), numeric(0), xlim=xlim, ylim=ylim,
main=main, xlab=xlab, ylab=ylab)
# plot the individual gender data
for (k in 1:length(gender.levels)){
# better plot
inds.in <- which(data$gender == gender.levels[k] & data$dtype == 'individual')
points(data[inds.in, xname], data[inds.in, yname], col=gender.cols[k], bg=gender.cols[k],
pch=gender.symbols[k], cex=0.8)
inds.po <- which(data$gender == gender.levels[k] & data$dtype == 'population')
points(data[inds.po, xname], data[inds.po, yname], col=gender.cols[k],
pch=gender.symbols[k], cex=0.8)
}
legend("topright",  legend=gender.levels, fill=gender.cols)
# legend("topleft",  legend=gender.levels, fill=gender.cols)
# Plot linear regression information
if (!is.null(m1)){
# plot regression line
abline(m1)
# get the confidence intervals for the betas
newx <- seq(min(data[[xname]]), max(data[[xname]]), length.out = 100)
newx.df <- as.data.frame(newx)
names(newx.df) <- c(xname)
# conf.interval <- predict(m1, interval="confidence")
conf.interval <- predict(m1, newdata=newx.df, interval="confidence")
lines(newx, conf.interval[,2], lty=2)
lines(newx, conf.interval[,3], lty=2)
# get prediction intervals
for (level in c(0.682, 0.95)){
pred.interval <- predict(m1, newdata=newx.df, interval="prediction", level=level)
lines(newx, pred.interval[,2], lty=3, col='blue')
lines(newx, pred.interval[,3], lty=3, col='blue')
}
# residual standard error
RSE <- sqrt(deviance(m1)/df.residual(m1))
# plot equation
info <- sprintf('y = %3.4f * x %+3.4f\n RSE = %3.4f\n n = %d', m1$coefficients[2], m1$coefficients[1], RSE, length(m1$residuals))
text(x=0.5*(xlim[2]+xlim[1]),
y=(ylim[1] + 0.05*(ylim[2]-ylim[1])), labels = info)
}
if (create_plots==TRUE){ dev.off() }
# makeQualityFigure(m1, xname, yname, create_plots=T)
}
# check if Sd or Range for x and y based on which fields are available
# in the dataset
getRangeType <- function(dat, xname, yname){
xtype <- NULL
ytype <- NULL
if (paste(xname, 'Sd', sep="") %in% names(dat)){
xtype <- 'Sd'
} else if (paste(xname, 'Range', sep="") %in% names(dat)){
xtype <- 'Range'
}
if (paste(yname, 'Sd', sep="") %in% names(dat)){
ytype <- 'Sd'
} else if (paste(yname, 'Range', sep="") %in% names(dat)){
ytype <- 'Range'
}
return(list(xtype=xtype, ytype=ytype))
}
# Add the population data segments to the plot
addPopulationSegments <- function(dat, xname, yname){
types <- getRangeType(dat, xname, yname)
for (k in 1:nrow(dat)){
sex <- dat$gender[k]
col <- gender.cols[which(gender.levels == sex)]
xmean <- dat[k, xname]
ymean <- dat[k, yname]
xrange <- dat[k, paste(xname, types$xtype, sep="")]
yrange <- dat[k, paste(yname, types$ytype, sep="")]
# horizontal
segments(xmean-xrange, ymean, xmean+xrange, ymean, col=col)
# vertical
segments(xmean, ymean-yrange, xmean, ymean+yrange, col=col)
}
}
################################
# Population data
################################
# Takes data from population studies, i.e. multiple individuals put together
# providing n (number subjects), mean (mean value) and Sd (standard deviation)
# or range (distance to upper/lower limit of group).
# Add n measurements of mean data
addMeanPopulationData <- function(data, newdata){
xname <- names(data)[3]
yname <- names(data)[4]
freq <- newdata$n
sds <- newdata[, paste(yname, 'Sd', sep="")]
for (k in 1:nrow(newdata)){
n <- freq[k]
study <- rep(newdata$study[k], n)
gender <- rep(newdata$gender[k], n)
dtype <- rep(newdata$dtype[k], n)
# replicate mean data point n times
x <- rep(newdata[k, xname], n)
assign(xname, x)
y <- rep(newdata[k, yname], n)
assign(yname, y)
df <- data.frame(study, gender, get(xname), get(yname), dtype)
names(df) <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind(data, df)
}
return(data)
}
# Generate randomized data points within the given measurement
# interval for the data, i.e. use mean and sd/range for x and y
# to create n data points.
# The data is weighted only a fraction of the individual data in
# the regression but the information is provided for the fit curves.
addRandomizedPopulationData <- function(data, newdata){
xname <- names(data)[3]
yname <- names(data)[4]
types <- getRangeType(newdata, xname, yname)
print(types)
for (k in 1:nrow(newdata)){
n <- newdata$n[k]
study <- rep(newdata$study[k], n)
gender <- rep(newdata$gender[k], n)
dtype <- rep(newdata$dtype[k], n)
# generate x points
xmean <- newdata[k, xname]
xrange <- newdata[k, paste(xname, types$xtype, sep="")]
if (types$xtype == 'Sd'){
x <- rnorm(n, mean=xmean, sd=xrange)
} else if (types$xtype == 'Range'){
x <- runif(n, min=xmean-xrange, max=xmean+xrange)
}
x[x<0] <- NA
assign(xname, x)
cat(xname, ':', xmean, '+-', xrange, '\n')
# generate y points
ymean <- newdata[k, yname]
yrange <- newdata[k, paste(yname, types$ytype, sep="")]
if (types$ytype == 'Sd'){
y <- rnorm(n, mean=ymean, sd=yrange)
} else if (types$ytype == 'Range'){
y <- runif(n, min=ymean-yrange, max=ymean+yrange)
}
y[y<0] <- NA
assign(yname, y)
cat(yname, ':', ymean, '+-', yrange, '\n')
df <- data.frame(study, gender, get(xname), get(yname), dtype)
names(df) <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind(data, df)
}
return(data)
}
# Saves data.frame as csv and R data
saveData <- function(data, dir=NULL){
if (is.null(dir)){
dir <- file.path(ma.settings$dir.expdata, "processed")
}
xname <- names(data)[3]
yname <- names(data)[4]
r_fname <- file.path(dir, sprintf('%s_%s.Rdata', yname, xname))
csv_fname <- file.path(dir, sprintf('%s_%s.csv', yname, xname))
print( sprintf('%s vs. %s -> %s', yname, xname, r_fname) )
print( sprintf('%s vs. %s -> %s', yname, xname, csv_fname) )
save('data', file=r_fname)
write.table(file=csv_fname, x=data, na="NA", row.names=FALSE, quote=FALSE,
sep="\t", col.names=TRUE)
}
########################################################################################
############################################
# GEC [mmol/min] vs. age [years]
############################################
xname <- 'age'; yname <- 'GEC'
selection <- c('study', 'gender', xname, yname, 'dtype')
# individual subject data
data <- rbind( mar1988[, selection],
tyg1962[, selection],
sch1986.tab1[, selection],
win1965[, selection],
duc1979[, selection])
data <- data[complete.cases(data), ]  # remove NA
saveData(data)
m1 <- linear_regression(data, xname, yname)
makeFigureFull(data, m1, xname, yname)
############################################
# GECkg [mmol/min/kgbw] vs. age [years]
############################################
xname <- 'age'; yname <- 'GECkg'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind( lan2011[, selection],
duc1979[, selection],
tyg1962[, selection],
sch1986.fig1[, selection],
# sch1986.tab1[, c('study', 'gender', 'age', 'GECkg')], # already ploted via sch1986.fig1
duf2005[, selection])
data <- data[complete.cases(data), ]  # remove NA
saveData(data)
m1 <- linear_regression(data, xname, yname)
makeFigureFull(data, m1, xname, yname)
############################################
# GEC [mmol/min] vs. volLiver [ml]
############################################
xname <- 'volLiver'; yname <- 'GEC'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind( mar1988[, selection])
saveData(data)
m1 <- linear_regression(data, xname, yname)
makeFigureFull(data, m1, xname, yname)
############################################
# GEC [mmol/min] vs. flowLiver [ml/min]
############################################
xname <- 'flowLiver'; yname <- 'GEC'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind( win1965[, selection])
saveData(data)
m1 <- linear_regression(data, xname, yname)
makeFigureFull(data, m1, xname, yname)
############################################
# volLiver [ml] vs. age [years]
############################################
xname <- 'age'; yname <- 'volLiver'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind( mar1988[, selection],
wyn1989[, selection],
naw1998[, selection],
boy1933[, selection],
hei1999[, selection])
# data <- addRandomizedPopulationData(data, alt1962) # no range/Sd for volLiver
data <- addRandomizedPopulationData(data, tom1965)
data <- addRandomizedPopulationData(data, kay1987)
saveData(data)
makeFigureFull(data, NULL, xname, yname)
addPopulationSegments(tom1965, xname, yname)
addPopulationSegments(kay1987, xname, yname)
############################################
# volLiver [ml] vs. age [years] and bodyweight [kg]
############################################
x1name <- 'age'; x2name <- 'bodyweight'; yname <- 'volLiver'
selection <- c('study', 'gender', x1name, x2name, yname, 'dtype')
data <- rbind(wyn1989[, selection] ,
naw1998[, selection],
hei1999[, selection])
head(data)
require("rgl")
require("RColorBrewer")
colors <- rep(NA, nrow(data))
colors[data$gender=='male'] <- rgb(0,0,1, alpha=0.5)
colors[data$gender=='female'] <- rgb(1,0,0, alpha=0.5)
plot3d(data$age, data$bodyweight, data$volLiver,
col=colors, pch=symbols, size=5)
data1 <- data[data$gender=="male", ]
data2 <- data[data$gender=="female", ]
plot3d(data1$age, data1$bodyweight, data1$volLiver,
pch=symbols, size=5, col='blue')
plot3d(data2$age, data2$bodyweight, data2$volLiver,
pch=symbols, size=5, col='red')
decorate3d()
# saveData(data)
############################################
# volLiverkg [ml/kg] vs. age [years]
############################################
xname <- 'age'; yname <- 'volLiverkg'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind(wyn1989[, selection] ,
naw1998[, selection],
hei1999[, selection])
saveData(data)
makeFigureFull(data, NULL, xname, yname)
#inds <- which(hei1999$bodyweight<3.5)
#inds <- which(hei1999$volLiverkg>60)
#points(hei1999$age[inds], hei1999$volLiverkg[inds], col='black', lwd = 3)
#hei1999[inds,]
############################################
# volLiver [ml] vs. BSA [m^2]
############################################
xname <- 'BSA'; yname <- 'volLiver'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind(naw1998[, selection],
hei1999[, selection],
ura1995[, selection],
vau2002.fig1[, selection],
yos2003[,selection])
data <- addRandomizedPopulationData(data, del1968.fig4)
saveData(data)
makeFigureFull(data, NULL, xname, yname)
addPopulationSegments(del1968.fig4, xname, yname)
############################################
# volLiver [ml] vs. bodyweight [kg]
############################################
xname <- 'bodyweight'; yname <- 'volLiver'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind(naw1998[, selection],
vau2002.fig2[, selection],
wyn1989[, selection],
hei1999[, selection])
# data <- addRandomizedPopulationData(data, del1968.fig1)
# data <- addRandomizedPopulationData(data, tom1965)
saveData(data)
# m1 <- linear_regression(data, xname, yname)
makeFigureFull(data, NULL, xname, yname)
# addPopulationSegments(del1968.fig4, xname, yname)
# addPopulationSegments(tom1965, xname, yname)
############################################
# volLiver [ml] vs. height [cm]
############################################
xname <- 'height'; yname <- 'volLiver'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind(naw1998[, selection],
hei1999[, selection])
data <- addRandomizedPopulationData(data, del1968.fig3)
data <- addRandomizedPopulationData(data, gra2000.tab1)
saveData(data)
makeFigureFull(data, NULL, xname, yname)
addPopulationSegments(del1968.fig3, xname, yname)
addPopulationSegments(gra2000.tab1, xname, yname)
############################################
# flowLiver [ml/min] vs. age [years]
############################################
xname <- 'age'; yname <- 'flowLiver'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind( win1965[, selection],
wyn1989[, selection],
bra1945[, selection],
zol1999[, selection],
sch1945[, selection],
wyn1990[, selection],
ircp2001.co[, selection]) # only estimate via cardiac output
saveData(data)
data <- addRandomizedPopulationData(data, cat2010)
head(cat2010)
saveData(data)
makeFigureFull(data, NULL, xname, yname)
addPopulationSegments(cat2010, xname, yname)
# grid()
############################################
# flowLiverkg [ml/min/kg] vs. age [years]
############################################
xname <- 'age'; yname <- 'flowLiverkg'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind( win1965[, selection],
wyn1989[, selection],
sch1945[, selection],
zol1993[, selection])
saveData(data)
m1 <- linear_regression(data, xname, yname)
makeFigureFull(data, m1, xname, yname)
############################################
# flowLiver [ml/min] vs. bodyweight [kg]
############################################
xname <- 'bodyweight'; yname <- 'flowLiver'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind( wyn1989[, selection])
saveData(data)
m1 <- linear_regression(data, xname, yname)
makeFigureFull(data, m1, xname, yname)
xname <- 'bodyweight'; yname <- 'flowLiverkg'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind( wyn1989[, selection])
saveData(data)
m1 <- linear_regression(data, xname, yname)
makeFigureFull(data, m1, xname, yname)
############################################
xname <- 'BSA'
yname <- 'flowLiver'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind(bra1945[, selection],
sch1945[, selection])
saveData(data)
m1 <- linear_regression(data, xname, yname)
makeFigureFull(data, m1, xname, yname)
xname <- 'volLiver'
yname <- 'flowLiverkg'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind(wyn1989[, selection])
saveData(data)
m1 <- linear_regression(data, xname, yname)
makeFigureFull(data, m1, xname, yname)
