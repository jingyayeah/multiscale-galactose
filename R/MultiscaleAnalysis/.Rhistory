}
df = readDataForSimulationFile(sim_file)
ids = names(df)
# subsets for plotting
pp_ids = ids[grep('PP__', names(df))]
pv_ids = ids[grep('PV__', names(df))]
H01_ids = ids[grep('H01__', names(df))]
gal_ids = ids[grep('__gal$', names(df))]
galM_ids = ids[grep('__galM$', names(df))]
adp_ids = ids[grep('__a[d,t]p', names(df))]
audp_ids = ids[grep('__[a,u][d,t]p$', names(df))]
# create some plots
create_plot_files = FALSE
if (create_plot_files){
png(filename=paste(out_dir, '/', task, "_test_", name, sep=""),
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
time <- getTimeFromPreprocessMatrix(preprocess.mat) - 10.0
plotCompound(time, preprocess.mat[[name]], name, col=ccolors[name], ylim=c(0,2.1))
if (create_plot_files){
dev.off()
}
# Rscript makePlot.R sid
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
args <- commandArgs(trailingOnly = TRUE)
sim_file <- args[1]
out_dir <- args[2]
sim_file = '/home/mkoenig/multiscale-galactose-results/django/timecourse/T3/Galactose_v12_Nc20_dilution_Sim497_roadrunner.csv'
out_dir = '/home/mkoenig/multiscale-galactose-results/tmp_plot'
print(sim_file)
print(out_dir)
# create model dataframe for simulation
if (is.na(sim_file)){
print('No simulation file given')
}
# plot some components via ids
plotTimecourse <- function(df, ids, cols='Black'){
for (id in ids){
lines(df$time, df[[id]], col=cols)
}
}
df = readDataForSimulationFile(sim_file)
ids = names(df)
# subsets for plotting
pp_ids = ids[grep('PP__', names(df))]
pv_ids = ids[grep('PV__', names(df))]
H01_ids = ids[grep('H01__', names(df))]
gal_ids = ids[grep('__gal$', names(df))]
galM_ids = ids[grep('__galM$', names(df))]
adp_ids = ids[grep('__a[d,t]p', names(df))]
audp_ids = ids[grep('__[a,u][d,t]p$', names(df))]
# create some plots
create_plot_files = FALSE
if (create_plot_files){
png(filename=paste(out_dir, '/', task, "_test_", name, sep=""),
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,2.3), type='l')
plotTimecourse(df, pp_ids, col='Black')
plotTimecourse(df, pv_ids, col='Blue')
if (create_plot_files){
dev.off()
}
# create some plots
create_plot_files = TRUE
if (create_plot_files){
plot_file <- paste(out_dir, '/', task, "_test_", name, sep="")
png(filename=plotfile,
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,2.3), type='l')
plotTimecourse(df, pp_ids, col='Black')
plotTimecourse(df, pv_ids, col='Blue')
if (create_plot_files){
dev.off()
}
# create some plots
create_plot_files = TRUE
if (create_plot_files){
plot_file <- paste(out_dir, '/', task, "_test_", name, sep="")
print plot_file
png(filename=plot_file,
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,2.3), type='l')
plotTimecourse(df, pp_ids, col='Black')
plotTimecourse(df, pv_ids, col='Blue')
if (create_plot_files){
dev.off()
}
ts
do_file_plots = TRUE
if (do_file_plots){
plot_file <- paste(out_dir, '/', task, "_test_", name, sep="")
print(plot_file)
png(filename=plot_file,
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,2.3), type='l')
plotTimecourse(df, pp_ids, col='Black')
plotTimecourse(df, pv_ids, col='Blue')
if (do_file_plots){
dev.off()
}
# create some plots
do_file_plots = TRUE
if (do_file_plots){
plot_file <- paste(out_dir, '/', task, "_", sim_id, '_plot1.png' , sep="")
print(plot_file)
png(filename=plot_file,
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,2.3), type='l')
plotTimecourse(df, pp_ids, col='Black')
plotTimecourse(df, pv_ids, col='Blue')
if (do_file_plots){
dev.off()
}
sim_id <- 'Sim479'
# create some plots
do_file_plots = TRUE
if (do_file_plots){
plot_file <- paste(out_dir, '/', task, "_", sim_id, '_plot1.png' , sep="")
print(plot_file)
png(filename=plot_file,
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,2.3), type='l')
plotTimecourse(df, pp_ids, col='Black')
plotTimecourse(df, pv_ids, col='Blue')
if (do_file_plots){
dev.off()
}
names(df)
head(df$time)
xlimits = c(min(df$time), max(df$time))
xlimits
c(pp_ids, pv_ids)
rep('green', 5)
min(df[,plot_ids])
plot_ids <- c(pp_ids, pv_ids)
plot_cols <- c(rep('Black', length(pp_ids)),
rep('Blue', length(pv_ids)))
plot_cols
min(df[,plot_ids])
max(df[,plot_ids])
ylimits = c(min(df[,plot_ids]), max(df[,plot_ids]))
ylimits
# subsets for plotting
pp_ids = ids[grep('PP__', names(df))]
pv_ids = ids[grep('PV__', names(df))]
H01_ids = ids[grep('H01__', names(df))]
gal_ids = ids[grep('__gal$', names(df))]
galM_ids = ids[grep('__galM$', names(df))]
adp_ids = ids[grep('__a[d,t]p', names(df))]
audp_ids = ids[grep('__[a,u][d,t]p$', names(df))]
# get the variables to plot & calculate the plot limits
names(df)
plot_ids <- c(pp_ids, pv_ids)
plot_cols <- c(rep('Black', length(pp_ids)),
rep('Blue', length(pv_ids)))
xlimits = c(min(df$time), max(df$time))
ylimits = c(min(df[,plot_ids]), max(df[,plot_ids]))
# create plot
do_file_plots = F
if (do_file_plots){
plot_file <- paste(out_dir, '/', task, "_", sim_id, '_plot1.png' , sep="")
print(plot_file)
png(filename=plot_file,
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
plot(numeric(0), numeric(), xlim=xlimits, ylim=ylimits, type='l')
plotTimecourse(df, plot_ids, col=plot_cols)
if (do_file_plots){
dev.off()
}
xlimits = c(0,100)
do_file_plots = F
if (do_file_plots){
plot_file <- paste(out_dir, '/', task, "_", sim_id, '_plot1.png' , sep="")
print(plot_file)
png(filename=plot_file,
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
plot(numeric(0), numeric(), xlim=xlimits, ylim=ylimits, type='l')
plotTimecourse(df, plot_ids, col=plot_cols)
if (do_file_plots){
dev.off()
}
plotTimecourse(df, plot_ids, cols=plot_cols)
plot(numeric(0), numeric(), xlim=xlimits, ylim=ylimits, type='l')
plotTimecourse(df, plot_ids, cols=plot_cols)
plot_cols
require(ggplot2)
require(reshape)
df.melt <- melt(df[,plot_ids], id = 'time', variable_name = 'series')
df$time
df.test <- data.frame(time = 1:10,
a = cumsum(rnorm(10)),
b = cumsum(rnorm(10)),
c = cumsum(rnorm(10)))
df.test <- data.frame(time = 1:10,
a = cumsum(rnorm(10)),
b = cumsum(rnorm(10)),
c = cumsum(rnorm(10)))
df.test
head(df[,1:10])
df.melt <- melt(df.test, id = 'time', variable_name = 'series')
df.melt
ggplot(df, aes(time,value)) + geom_line(aes(colour = series))
ggplot(df.melt, aes(time,value)) + geom_line(aes(colour = series))
df.small <- df[,plot_ids]
df.melt <- melt(df.small, id='time', variable_name = 'series')
df.melt <- melt(df.test, id.vars='time', variable_name = 'series')
df.melt
df.melt <- melt(df.small, id.vars='time', variable_name = 'series')
df.small <- df[,plot_ids]
names(df.small)
df.small <- df[,c('time', plot_ids)]
names(df.small)
df.melt <- melt(df.small, id.vars='time', variable_name = 'series')
# plot on same grid, each series colored differently --
# good if the series have same scale
ggplot(df.melt, aes(time,value)) + geom_line(aes(colour = series))
ggplot(df.melt, aes(time,value)) + geom_line(aes(colour = series)) + scale_y_continuous(limits=ylimits) + scale_x_continuous(limits=xlimits)
+ scale_y_continuous(limits=ylimits) + scale_x_continuous(limits=xlimits)
ggplot(df.melt, aes(time,value)) + geom_line(aes(colour = factor(series))) + scale_y_continuous(limits=ylimits) + scale_x_continuous(limits=xlimits)
head(df.melt)
sub(".*__ +$", "", 'PP__gal')  ## spaces only
test <- sub(".*__ +$", "", 'PP__gal')  ## spaces only
test
test <- sub(".*__+$", "", 'PP__gal')  ## spaces only
test
test <- sub(".*__$", "", 'PP__gal')  ## spaces only
test
test <- sub(".*__", "", 'PP__gal')  ## spaces only
test
df.melt$name <- character(0)
df.melt$name <- character(length(df.melt))
df.melt$name
test <- sub(".*__", "", c('PP_gal', 'PV__gal'))  ## spaces only
test
test <- sub(".*__", "", c('PP__gal', 'PV__gal'))  ## spaces only
test
df.melt$name <- sub(".*__", "", df.melt$series)  ## spaces only
head(df.melt)
ggplot(df.melt, aes(time,value)) + geom_line(aes(colour = factor(name))) + scale_y_continuous(limits=ylimits) + scale_x_continuous(limits=xlimits)
ggplot(df.melt, aes(time,value)) + geom_line(aes(colour = name)) + scale_y_continuous(limits=ylimits) + scale_x_continuous(limits=xlimits)
# do the same with ggplot2
require(ggplot2)
require(reshape)
df.small <- df[,c('time', plot_ids)]
names(df.small)
# melt the data
df.melt <- melt(df.small, id.vars='time', variable_name = 'series')
# create additional column for name
# test <- sub(".*__", "", 'PP__gal')
df.melt$name <- sub(".*__", "", df.melt$series)
# plot on same grid, each series colored differently --
# good if the series have same scale
ggplot(df.melt, aes(time,value)) + geom_line(aes(colour = name)) + scale_y_continuous(limits=ylimits) + scale_x_continuous(limits=xlimits)
head(df.melt)
head(df.melt, n=40)
## makePlot.R
# Rscript makePlot.R sid
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
args <- commandArgs(trailingOnly = TRUE)
sim_id <- 'Sim479'
sim_file <- args[1]
out_dir <- args[2]
sim_file = '/home/mkoenig/multiscale-galactose-results/django/timecourse/T3/Galactose_v12_Nc20_dilution_Sim497_roadrunner.csv'
out_dir = '/home/mkoenig/multiscale-galactose-results/tmp_plot'
print(sim_file)
print(out_dir)
# create model dataframe for simulation
if (is.na(sim_file)){
print('No simulation file given')
}
# plot some components via ids
plotTimecourse <- function(df, ids, cols='Black'){
for (id in ids){
lines(df$time, df[[id]], col=cols)
}
}
df = readDataForSimulationFile(sim_file)
ids = names(df)
# subsets for plotting
pp_ids = ids[grep('PP__', names(df))]
pv_ids = ids[grep('PV__', names(df))]
H01_ids = ids[grep('H01__', names(df))]
gal_ids = ids[grep('__gal$', names(df))]
galM_ids = ids[grep('__galM$', names(df))]
adp_ids = ids[grep('__a[d,t]p', names(df))]
audp_ids = ids[grep('__[a,u][d,t]p$', names(df))]
# get the variables to plot & calculate the plot limits
names(df)
plot_ids <- c(pp_ids, pv_ids)
plot_cols <- c(rep('Black', length(pp_ids)),
rep('Blue', length(pv_ids)))
xlimits = c(min(df$time), max(df$time))
xlimits = c(0,100)
ylimits = c(min(df[,plot_ids]), max(df[,plot_ids]))
# create plot standard
do_file_plots = F
if (do_file_plots){
plot_file <- paste(out_dir, '/', task, "_", sim_id, '_plot1.png' , sep="")
print(plot_file)
png(filename=plot_file,
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
plot(numeric(0), numeric(), xlim=xlimits, ylim=ylimits, type='l')
plotTimecourse(df, plot_ids, cols=plot_cols)
if (do_file_plots){
dev.off()
}
# do the same with ggplot2
require(ggplot2)
require(reshape)
df.small <- df[,c('time', plot_ids)]
names(df.small)
# melt the data
df.melt <- melt(df.small, id.vars='time', variable_name = 'series')
# create additional column for name
# test <- sub(".*__", "", 'PP__gal')
#df.melt$name <- sub(".*__", "", df.melt$series)
#head(df.melt, n=40)
# plot on same grid, each series colored differently --
# good if the series have same scale
ggplot(df.melt, aes(time,value)) + geom_line(aes(colour = name)) + scale_y_continuous(limits=ylimits) + scale_x_continuous(limits=xlimits)
rm(list=ls())
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
args <- commandArgs(trailingOnly = TRUE)
sim_id <- 'Sim479'
sim_file <- args[1]
out_dir <- args[2]
sim_file = '/home/mkoenig/multiscale-galactose-results/django/timecourse/T3/Galactose_v12_Nc20_dilution_Sim497_roadrunner.csv'
out_dir = '/home/mkoenig/multiscale-galactose-results/tmp_plot'
print(sim_file)
print(out_dir)
# create model dataframe for simulation
if (is.na(sim_file)){
print('No simulation file given')
}
# plot some components via ids
plotTimecourse <- function(df, ids, cols='Black'){
for (id in ids){
lines(df$time, df[[id]], col=cols)
}
}
df = readDataForSimulationFile(sim_file)
ids = names(df)
# subsets for plotting
pp_ids = ids[grep('PP__', names(df))]
pv_ids = ids[grep('PV__', names(df))]
H01_ids = ids[grep('H01__', names(df))]
gal_ids = ids[grep('__gal$', names(df))]
galM_ids = ids[grep('__galM$', names(df))]
adp_ids = ids[grep('__a[d,t]p', names(df))]
audp_ids = ids[grep('__[a,u][d,t]p$', names(df))]
# get the variables to plot & calculate the plot limits
names(df)
plot_ids <- c(pp_ids, pv_ids)
plot_cols <- c(rep('Black', length(pp_ids)),
rep('Blue', length(pv_ids)))
xlimits = c(min(df$time), max(df$time))
xlimits = c(0,100)
ylimits = c(min(df[,plot_ids]), max(df[,plot_ids]))
# create plot standard
do_file_plots = F
if (do_file_plots){
plot_file <- paste(out_dir, '/', task, "_", sim_id, '_plot1.png' , sep="")
print(plot_file)
png(filename=plot_file,
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
plot(numeric(0), numeric(), xlim=xlimits, ylim=ylimits, type='l')
plotTimecourse(df, plot_ids, cols=plot_cols)
if (do_file_plots){
dev.off()
}
# do the same with ggplot2
require(ggplot2)
require(reshape)
df.small <- df[,c('time', plot_ids)]
names(df.small)
# melt the data
df.melt <- melt(df.small, id.vars='time', variable_name = 'series')
# create additional column for name
# test <- sub(".*__", "", 'PP__gal')
#df.melt$name <- sub(".*__", "", df.melt$series)
#head(df.melt, n=40)
# plot on same grid, each series colored differently --
# good if the series have same scale
ggplot(df.melt, aes(time,value)) + geom_line(aes(colour = name)) + scale_y_continuous(limits=ylimits) + scale_x_continuous(limits=xlimits)
df.melt$name <- sub(".*__", "", df.melt$series)
head(df.melt, n=40)
ggplot(df.melt, aes(time,value)) + geom_line(aes(colour = name)) + scale_y_continuous(limits=ylimits) + scale_x_continuous(limits=xlimits)
ggplot(df.melt, aes(time,value)) + geom_line(aes(colour=name, group=name)) + scale_y_continuous(limits=ylimits) + scale_x_continuous(limits=xlimits)
ggplot(df.melt, aes(time,value, colour=name, group=name)) + geom_line() + scale_y_continuous(limits=ylimits) + scale_x_continuous(limits=xlimits)
ggplot(df.melt, aes(x=time,y=value, colour=name, group=name)) + geom_line() + scale_y_continuous(limits=ylimits) + scale_x_continuous(limits=xlimits)
ggplot(df.melt, aes(x=time,y=value, colour=name, group=series)) + geom_line() + scale_y_continuous(limits=ylimits) + scale_x_continuous(limits=xlimits)
ggplot(df.small) + geom_line(aes(x=PP__gal,y=PV__gal))
ggplot(df.small) + geom_line(aes(x=PP__gal,y=PV__gal, col=time))
ggplot(df.small) + geom_line(aes(x=PP__gal,y=PV__gal, col=time))
+ geom_line(aes(x=PP__rbcM,y=PV__rbcM, col=time))
ggplot(df.small) + geom_line(aes(x=PP__gal,y=PV__gal, col=time)) + geom_line(aes(x=PP__rbcM,y=PV__rbcM, col=time))
rm(list=ls())
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
args <- commandArgs(trailingOnly = TRUE)
sim_id <- 'Sim1371'
sim_file <- args[1]
out_dir <- args[2]
sim_file = '/home/mkoenig/multiscale-galactose-results/django/timecourse/T10/Galactose_v15_Nc20_dilution_Sim1371_roadrunner.csv'
out_dir = '/home/mkoenig/multiscale-galactose-results/tmp_plot'
print(sim_file)
print(out_dir)
# create model dataframe for simulation
if (is.na(sim_file)){
print('No simulation file given')
}
# plot some components via ids
plotTimecourse <- function(df, ids, cols='Black'){
for (id in ids){
lines(df$time, df[[id]], col=cols)
}
}
df = readDataForSimulationFile(sim_file)
ids = names(df)
# subsets for plotting
pp_ids = ids[grep('PP__', names(df))]
pv_ids = ids[grep('PV__', names(df))]
H01_ids = ids[grep('H01__', names(df))]
gal_ids = ids[grep('__gal$', names(df))]
galM_ids = ids[grep('__galM$', names(df))]
adp_ids = ids[grep('__a[d,t]p', names(df))]
audp_ids = ids[grep('__[a,u][d,t]p$', names(df))]
# get the variables to plot & calculate the plot limits
names(df)
plot_ids <- c(pp_ids, pv_ids)
plot_cols <- c(rep('Black', length(pp_ids)),
rep('Blue', length(pv_ids)))
xlimits = c(min(df$time), max(df$time))
xlimits = c(0,100)
ylimits = c(min(df[,plot_ids]), max(df[,plot_ids]))
# create plot standard
do_file_plots = F
if (do_file_plots){
plot_file <- paste(out_dir, '/', task, "_", sim_id, '_plot1.png' , sep="")
print(plot_file)
png(filename=plot_file,
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
plot(numeric(0), numeric(), xlim=xlimits, ylim=ylimits, type='l')
plotTimecourse(df, plot_ids, cols=plot_cols)
if (do_file_plots){
dev.off()
}
xlimits = c(0,1200)
ylimits = c(min(df[,plot_ids]), max(df[,plot_ids]))
# create plot standard
do_file_plots = F
if (do_file_plots){
plot_file <- paste(out_dir, '/', task, "_", sim_id, '_plot1.png' , sep="")
print(plot_file)
png(filename=plot_file,
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
plot(numeric(0), numeric(), xlim=xlimits, ylim=ylimits, type='l')
plotTimecourse(df, plot_ids, cols=plot_cols)
if (do_file_plots){
dev.off()
}
names(df)
plot_ids <- c(pp_ids, pv_ids)
plot_cols <- c(rep('Black', length(pp_ids)),
rep('Blue', length(pv_ids)))
xlimits = c(min(df$time), max(df$time))
xlimits = c(1000,1200)
ylimits = c(min(df[,plot_ids]), max(df[,plot_ids]))
# create plot standard
do_file_plots = F
if (do_file_plots){
plot_file <- paste(out_dir, '/', task, "_", sim_id, '_plot1.png' , sep="")
print(plot_file)
png(filename=plot_file,
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
plot(numeric(0), numeric(), xlim=xlimits, ylim=ylimits, type='l')
plotTimecourse(df, plot_ids, cols=plot_cols)
if (do_file_plots){
dev.off()
}
xlimits = c(1000,1200)
ylimits = c(0,1)
# create plot standard
do_file_plots = F
if (do_file_plots){
plot_file <- paste(out_dir, '/', task, "_", sim_id, '_plot1.png' , sep="")
print(plot_file)
png(filename=plot_file,
width = 500, height = 500, units = "px", bg = "white",  res = 72)
}
plot(numeric(0), numeric(), xlim=xlimits, ylim=ylimits, type='l')
plotTimecourse(df, plot_ids, cols=plot_cols)
if (do_file_plots){
dev.off()
}
plotTimecourse(df, c('PV__galM'), cols=c('BLUE'))
