# liver.info <- predict_liver_people(nhanes[1:20,], 1000, Ncores=4)
liver.info <- predict_liver_people(nhanes, Nsample, Ncores=Ncores)
proc.time() - ptm
# save the results
# save('nhanes', 'liver.info', file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_liver.Rdata'))
volLiver <- liver.info$volLiver
flowLiver <- liver.info$flowLiver
save('volLiver', file=file.path(out_dir, 'nhanes_volLiver.Rdata'))
save('flowLiver', file=file.path(out_dir, 'nhanes_flowLiver.Rdata'))
}
##############################################################################
# Predict GEC and GECkg
##############################################################################
cat('----------------------------------------------------------\n')
load(file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_data.Rdata'))
nhanes <- data; rm(data)
load(file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_volLiver.Rdata'))
load(file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_flowLiver.Rdata'))
cat('# Liver Volume #')
head(volLiver[, 1:5])
cat('# Liver Blood Flow #')
head(flowLiver[, 1:5])
cat('----------------------------------------------------------\n')
# Predict GEC and GECkg for NHANES
source(file.path(ma.settings$dir.code, 'analysis', 'GEC_predict_functions.R'))
GEC_f <- GEC_functions(task='T54')
GEC <- calculate_GEC(volLiver, flowLiver)
GEC <- GEC$values
m.bodyweight <- matrix(rep(nhanes$bodyweight, ncol(GEC)),
nrow=nrow(GEC), ncol=ncol(GEC))
GECkg <- GEC/m.bodyweight
save('GEC', file=file.path(out_dir, 'nhanes_GEC.Rdata'))
save('GECkg', file=file.path(out_dir, 'nhanes_GECkg.Rdata'))
# Calculation and settings of the quantiles for the data
calc_quantiles <- function(data, q.values=c(0.025, 0.25, 0.5, 0.75, 0.975)){
qdata <- apply(data, 1, quantile, q.values)
return ( t(qdata) )
}
volLiver.q <- calc_quantiles(volLiver)
flowLiver.q <- calc_quantiles(flowLiver)
GEC.q <- calc_quantiles(GEC)
GECkg.q <- calc_quantiles(GECkg)
# # store in the NHANES data.frame
# for (name in colnames(volLiver.q)){
#   nhanes[[sprintf('volLiver_%s', name)]]  <- volLiver.q[, name]
#   nhanes[[sprintf('flowLiver_%s', name)]]  <- flowLiver.q[, name]
#   nhanes[[sprintf('GEC_%s', name)]]  <- GEC.q[, name]
#   nhanes[[sprintf('GECkg_%s', name)]]  <- GECkg.q[, name]
# }
# store one random sample in addition
nhanes$volLiver_sample <- volLiver[, 1]
nhanes$flowLiver_sample <- flowLiver[, 1]
nhanes$GEC_sample <- GEC[, 1]
nhanes$GECkg_sample <- GECkg[, 1]
head(nhanes)
save(nhanes, volLiver.q, flowLiver.q, GEC.q, GECkg.q, file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_GEC.Rdata'))
rm(list=ls())
library('MultiscaleAnalysis')
library('methods')
setwd(ma.settings$dir.base)
source(file.path(ma.settings$dir.code, 'analysis', 'data_information.R'))
# Load the NHANES & quantile data
dir_nhanes <- file.path(ma.settings$dir.base, 'results', 'nhanes')
load(file=file.path(dir_nhanes, 'nhanes_GEC.Rdata'))
# Load the raw data
load(file=file.path(dir_nhanes, 'nhanes_volLiver.Rdata'))
load(file=file.path(dir_nhanes, 'nhanes_flowLiver.Rdata'))
load(file=file.path(dir_nhanes, 'nhanes_GEC.Rdata'))
load(file=file.path(dir_nhanes, 'nhanes_GECkg.Rdata'))
load(file=file.path(dir_nhanes, 'nhanes_GEC.Rdata'))
save(GEC, file=file.path(out_dir, 'nhanes_GEC.Rdata'))
save(GECkg, file=file.path(out_dir, 'nhanes_GECkg.Rdata'))
################################################################################
# NHANES prediction
################################################################################
# Predict liver volume, blood flow and metabolic functions for the
# NHANES cohort.
# Based on the individual samples of blood flow an liver the GEC clearance
# is calculated.
#
# author: Matthias Koenig
# date: 2014-12-01
################################################################################
rm(list=ls())
library('MultiscaleAnalysis')
library('methods')
setwd(ma.settings$dir.base)
source(file.path(ma.settings$dir.code, 'analysis', 'GAMLSS_predict_functions.R'))
source(file.path(ma.settings$dir.code, 'analysis', 'data_information.R'))
##############################################################################
# Predict NHANES liver volume & flow
##############################################################################
# Predicting liver volume and blod flow
Nsample <- 1000  # number of Monte Carlo predictions
Ncores <- 11     # number of cores
out_dir <- file.path(ma.settings$dir.base, 'results', 'nhanes')
do_nhanes = FALSE
if (do_nhanes){
# load empty NHANES data
load(file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_data.Rdata'))
nhanes <- data[, c('SEQN', 'sex', 'bodyweight', 'age', 'height', 'BSA')]
nhanes$volLiver <- NA
nhanes$volLiverkg <- NA
rm(data)
head(nhanes)
# predict liver volume and blood flow
set.seed(12345)   # only working for serial simulations
ptm <- proc.time()
# liver.info <- predict_liver_people(nhanes[1:20,], 1000, Ncores=4)
liver.info <- predict_liver_people(nhanes, Nsample, Ncores=Ncores)
proc.time() - ptm
# save the results
# save('nhanes', 'liver.info', file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_liver.Rdata'))
volLiver <- liver.info$volLiver
flowLiver <- liver.info$flowLiver
save('volLiver', file=file.path(out_dir, 'nhanes_volLiver.Rdata'))
save('flowLiver', file=file.path(out_dir, 'nhanes_flowLiver.Rdata'))
}
##############################################################################
# Predict GEC and GECkg
##############################################################################
cat('----------------------------------------------------------\n')
load(file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_data.Rdata'))
nhanes <- data; rm(data)
load(file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_volLiver.Rdata'))
load(file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_flowLiver.Rdata'))
cat('# Liver Volume #')
head(volLiver[, 1:5])
cat('# Liver Blood Flow #')
head(flowLiver[, 1:5])
cat('----------------------------------------------------------\n')
# Predict GEC and GECkg for NHANES
source(file.path(ma.settings$dir.code, 'analysis', 'GEC_predict_functions.R'))
GEC_f <- GEC_functions(task='T54')
GEC <- calculate_GEC(volLiver, flowLiver)
GEC <- GEC$values
m.bodyweight <- matrix(rep(nhanes$bodyweight, ncol(GEC)),
nrow=nrow(GEC), ncol=ncol(GEC))
GECkg <- GEC/m.bodyweight
save(GEC, file=file.path(out_dir, 'nhanes_GEC.Rdata'))
save(GECkg, file=file.path(out_dir, 'nhanes_GECkg.Rdata'))
################################################################################
# NHANES predict plot
################################################################################
# Predict liver volume, blood flow and metabolic functions for the
# NHANES cohort.
# Based on the individual samples of blood flow an liver the GEC clearance
# is calculated.
#
# author: Matthias Koenig
# date: 2014-12-01
################################################################################
rm(list=ls())
library('MultiscaleAnalysis')
library('methods')
setwd(ma.settings$dir.base)
source(file.path(ma.settings$dir.code, 'analysis', 'data_information.R'))
# Load the NHANES & quantile data
dir_nhanes <- file.path(ma.settings$dir.base, 'results', 'nhanes')
load(file=file.path(dir_nhanes, 'nhanes_GEC.Rdata'))
# Load the raw data
load(file=file.path(dir_nhanes, 'nhanes_volLiver.Rdata'))
load(file=file.path(dir_nhanes, 'nhanes_flowLiver.Rdata'))
load(file=file.path(dir_nhanes, 'nhanes_GEC.Rdata'))
load(file=file.path(dir_nhanes, 'nhanes_GECkg.Rdata'))
rm(list=ls())
library('MultiscaleAnalysis')
library('methods')
setwd(ma.settings$dir.base)
source(file.path(ma.settings$dir.code, 'analysis', 'data_information.R'))
# Load the NHANES & quantile data
dir_nhanes <- file.path(ma.settings$dir.base, 'results', 'nhanes')
load(file=file.path(dir_nhanes, 'nhanes_GEC.Rdata'))
################################################################################
# NHANES prediction
################################################################################
# Predict liver volume, blood flow and metabolic functions for the
# NHANES cohort.
# Based on the individual samples of blood flow an liver the GEC clearance
# is calculated.
#
# author: Matthias Koenig
# date: 2014-12-01
################################################################################
rm(list=ls())
library('MultiscaleAnalysis')
library('methods')
setwd(ma.settings$dir.base)
source(file.path(ma.settings$dir.code, 'analysis', 'GAMLSS_predict_functions.R'))
source(file.path(ma.settings$dir.code, 'analysis', 'data_information.R'))
##############################################################################
# Predict NHANES liver volume & flow
##############################################################################
# Predicting liver volume and blod flow
Nsample <- 1000  # number of Monte Carlo predictions
Ncores <- 11     # number of cores
out_dir <- file.path(ma.settings$dir.base, 'results', 'nhanes')
do_nhanes = FALSE
if (do_nhanes){
# load empty NHANES data
load(file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_data.Rdata'))
nhanes <- data[, c('SEQN', 'sex', 'bodyweight', 'age', 'height', 'BSA')]
nhanes$volLiver <- NA
nhanes$volLiverkg <- NA
rm(data)
head(nhanes)
# predict liver volume and blood flow
set.seed(12345)   # only working for serial simulations
ptm <- proc.time()
# liver.info <- predict_liver_people(nhanes[1:20,], 1000, Ncores=4)
liver.info <- predict_liver_people(nhanes, Nsample, Ncores=Ncores)
proc.time() - ptm
# save the results
# save('nhanes', 'liver.info', file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_liver.Rdata'))
volLiver <- liver.info$volLiver
flowLiver <- liver.info$flowLiver
save('volLiver', file=file.path(out_dir, 'nhanes_volLiver.Rdata'))
save('flowLiver', file=file.path(out_dir, 'nhanes_flowLiver.Rdata'))
}
##############################################################################
# Predict GEC and GECkg
##############################################################################
cat('----------------------------------------------------------\n')
load(file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_data.Rdata'))
nhanes <- data; rm(data)
load(file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_volLiver.Rdata'))
load(file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_flowLiver.Rdata'))
cat('# Liver Volume #')
head(volLiver[, 1:5])
cat('# Liver Blood Flow #')
head(flowLiver[, 1:5])
cat('----------------------------------------------------------\n')
# Predict GEC and GECkg for NHANES
source(file.path(ma.settings$dir.code, 'analysis', 'GEC_predict_functions.R'))
GEC_f <- GEC_functions(task='T54')
GEC <- calculate_GEC(volLiver, flowLiver)
GEC <- GEC$values
m.bodyweight <- matrix(rep(nhanes$bodyweight, ncol(GEC)),
nrow=nrow(GEC), ncol=ncol(GEC))
GECkg <- GEC/m.bodyweight
save(GEC, file=file.path(out_dir, 'nhanes_GEC.Rdata'))
save(GECkg, file=file.path(out_dir, 'nhanes_GECkg.Rdata'))
# Calculation and settings of the quantiles for the data
calc_quantiles <- function(data, q.values=c(0.025, 0.25, 0.5, 0.75, 0.975)){
qdata <- apply(data, 1, quantile, q.values)
return ( t(qdata) )
}
volLiver.q <- calc_quantiles(volLiver)
flowLiver.q <- calc_quantiles(flowLiver)
GEC.q <- calc_quantiles(GEC)
GECkg.q <- calc_quantiles(GECkg)
# # store in the NHANES data.frame
# for (name in colnames(volLiver.q)){
#   nhanes[[sprintf('volLiver_%s', name)]]  <- volLiver.q[, name]
#   nhanes[[sprintf('flowLiver_%s', name)]]  <- flowLiver.q[, name]
#   nhanes[[sprintf('GEC_%s', name)]]  <- GEC.q[, name]
#   nhanes[[sprintf('GECkg_%s', name)]]  <- GECkg.q[, name]
# }
# store one random sample in addition
nhanes$volLiver_sample <- volLiver[, 1]
nhanes$flowLiver_sample <- flowLiver[, 1]
nhanes$GEC_sample <- GEC[, 1]
nhanes$GECkg_sample <- GECkg[, 1]
head(nhanes)
save(nhanes, volLiver.q, flowLiver.q, GEC.q, GECkg.q, file=file.path(ma.settings$dir.base, 'results', 'nhanes', 'nhanes_GEC_quantiles.Rdata'))
rm(list=ls())
library('MultiscaleAnalysis')
library('methods')
setwd(ma.settings$dir.base)
source(file.path(ma.settings$dir.code, 'analysis', 'data_information.R'))
# Load the NHANES & quantile data
dir_nhanes <- file.path(ma.settings$dir.base, 'results', 'nhanes')
load(file=file.path(dir_nhanes, 'nhanes_GEC_quantiles.Rdata'))
# Load the raw data
load(file=file.path(dir_nhanes, 'nhanes_volLiver.Rdata'))
load(file=file.path(dir_nhanes, 'nhanes_flowLiver.Rdata'))
load(file=file.path(dir_nhanes, 'nhanes_GEC.Rdata'))
load(file=file.path(dir_nhanes, 'nhanes_GECkg.Rdata'))
############################################################################
GEC_figure <- function(data, person){
# Histogram
h <- hist(data, plot=FALSE)
h.max <- max(h$density)
# Density
dens <- density(data)
d.max <- max(dens$y)
# Maximum for arranging things
p.max <- max(h.max, d.max)
# empty plot
plot(numeric(0), numeric(0), type='n', xlim=c(0,5), ylim=c(0, 1.2*p.max),
main="GEC reference range [2.5% - 97.5%]",
xlab="GEC [mmol/min]", ylab="probability", font.lab=2)
qdata <- quantile(data, c(0.025, 0.5, .975))
# person info
person.info <- with(person, sprintf(' %s\n %1.0f years\n %1.1f kg\n %1.0f cm\n %1.2f m^2', sex, age, bodyweight,height, BSA))
x.text=0
if (qdata[2] < 2.5){ x.text = 3.7 }
text(x=x.text,y=p.max, labels=c(person.info), pos=4, cex=0.9)
# GEC info
GEC.info <- sprintf('median %1.2f\n [%1.2f - %1.2f]\n ', qdata[2], qdata[1], qdata[3])
text(x=qdata[2], y=1.08*p.max, labels=c(GEC.info), pos=3, cex=0.9)
# polygons (red area left & right)
span = 0.75
qdata <- quantile(data, c(0.025, .975))
polygon(x=c(qdata[1]-span, qdata[1], qdata[1], qdata[1]-span), y=c(0, 0,p.max, p.max), col=rgb(1,0,0,0.1), border=rgb(1,0,0,0))
polygon(x=c(qdata[2]+span, qdata[2], qdata[2], qdata[2]+span), y=c(0, 0,p.max, p.max), col=rgb(1,0,0,0.1), border=rgb(1,0,0,0))
# histogram & density
plot(h, xlim=c(0,5), col=rgb(0,0,0, 0.05), border=rgb(0,0,0, 0.5), freq=FALSE, add=TRUE)
lines(dens, col='black', lwd=2)
# Quantiles
# qdata <- quantile(GEC[1, ], c(0.025, .25, .50,  .75, .975))
# qdata <- quantile(data, c(.25,  .75))
# abline(v=qdata, col='black', lwd=2, lty=1)
#qdata <- quantile(data, c(0.025, .975))
# abline(v=qdata, col='red', lwd=2, lty=1)
# Rugs
rug(data)
# Boxplot
box <- boxplot(data, notch=FALSE, col=(rgb(0,0,0,0.2)), range=0, boxwex=0.1*p.max, horizontal = TRUE, at=c(1.1*p.max), add=TRUE, plot=FALSE)
box$stats <- matrix(quantile(data, c(0.025, 0.25, 0.5, 0.75, 0.975)), nrow=5, ncol=1)
bxp(z=box, notch=FALSE, range=0, boxwex=0.1*p.max, ylim=c(0,5), horizontal=TRUE, add=TRUE, at=c(1.1*p.max), lty=1)
}
############################################################################
# Plot flowLiver ~ volLiver
############################################################################
scale_density <- function(h, max.value){
h$density <- max.value/max(h$density) * h$density
return(h)
}
vol_flow_figure <- function(vol, flow, data, person){
# empty plot
plot(numeric(0), numeric(0), xlim=lim$volLiver, ylim=lim$flowLiver,
xlab=lab$volLiver, ylab=lab$flowLiver, type='n',
main="flowLiver ~ volLiver")
abline(a=0, b=1, col='gray')
points(vol, flow, pch=21, bg=rgb(0,0,0, 0.1), col="black", cex=1*data/max(data))
# rugs
rug(vol, side=1)
rug(flow, side=2)
# additional histograms
max.value=400
hx <- hist(vol, plot=FALSE)
hx <- scale_density(hx, max.value=max.value)
plot(hx, freq=FALSE, col=rgb(0,0,0,0.3), add=TRUE)
hy <- hist(flow, plot=FALSE)
hy <- scale_density(hy, max.value=max.value)
plot(hy, freq=FALSE, col=rgb(0,0,0,0.3), add=TRUE)
# additional boxplot
# add the means
points(mean(vol), mean(flow), bg='blue', col='black', pch=22, cex=2)
}
# test the plots
# index <- 1
# person <- with(nhanes[index, ], list(sex=sex, age=age, bodyweight=bodyweight, height=height, BSA=BSA))
# vol_flow_figure(vol=volLiver[index,], flow=flowLiver[index, ], data=GEC[index, ], person)
dir <- file.path(ma.settings$dir.base, 'results', 'nhanes', 'plots')
for (index in 1:30){
person <- with(nhanes[index, ], list(sex=sex, age=age, bodyweight=bodyweight, height=height, BSA=BSA))
# create figure
png(filename=sprintf("%s/NHANES_GEC_range_%04i.png", dir, index), width=2000, height=1000, units = "px", bg = "white",  res = 150)
par(mfrow=c(1,2))
GEC_figure(data=GEC[index, ], person)
vol_flow_figure(vol=volLiver[index,], flow=flowLiver[index, ], data=GEC[index, ], person)
par(mfrow=c(1,1))
dev.off()
# Sys.sleep(2)
}
dir <- file.path(ma.settings$dir.base, 'results', 'nhanes', 'plots')
for (index in 1:nrow(nhanes)) ){
person <- with(nhanes[index, ], list(sex=sex, age=age, bodyweight=bodyweight, height=height, BSA=BSA))
# create figure
png(filename=sprintf("%s/NHANES_GEC_range_%04i.png", dir, index), width=2000, height=1000, units = "px", bg = "white",  res = 150)
par(mfrow=c(1,2))
GEC_figure(data=GEC[index, ], person)
vol_flow_figure(vol=volLiver[index,], flow=flowLiver[index, ], data=GEC[index, ], person)
par(mfrow=c(1,1))
dev.off()
# Sys.sleep(2)
}
dir <- file.path(ma.settings$dir.base, 'results', 'nhanes', 'plots')
for (index in 1:nrow(nhanes)) {
person <- with(nhanes[index, ], list(sex=sex, age=age, bodyweight=bodyweight, height=height, BSA=BSA))
# create figure
png(filename=sprintf("%s/NHANES_GEC_range_%04i.png", dir, index), width=2000, height=1000, units = "px", bg = "white",  res = 150)
par(mfrow=c(1,2))
GEC_figure(data=GEC[index, ], person)
vol_flow_figure(vol=volLiver[index,], flow=flowLiver[index, ], data=GEC[index, ], person)
par(mfrow=c(1,1))
dev.off()
# Sys.sleep(2)
}
ind.male <- (nhanes$sex == 'male')
ind.female <- (nhanes$sex == 'female')
plot(nhanes$age, GEC.q[,'50%'], cex=0.3, pch=21)
plot(nhanes$bodyweight[ind.male], GEC.q[ind.male,'50%'], cex=0.3, pch=21, col=rgb(1,0,0, 0.5))
x0 <- nhanes$bodyweight[ind.male]
y0 <- GEC.q[ind.male,'25%']
y1 <- GEC.q[ind.male,'75%']
# y0 <- GEC.q[ind.male,'2.5%']
# y1 <- GEC.q[ind.male,'97.5%']
segments(x0=x0, y0=y0, x1=x0, y1=y1, col=rgb(1,0,0, 0.1) )
points(nhanes$bodyweight[ind.female], GEC.q[ind.female,'50%'], cex=0.3, pch=21, col=rgb(0,0,1, 0.5))
x0 <- nhanes$bodyweight[ind.female]
y0 <- GEC.q[ind.female,'25%']
y1 <- GEC.q[ind.female,'75%']
# y0 <- GEC.q[ind.female,'2.5%']
# y1 <- GEC.q[ind.female,'97.5%']
segments(x0=x0, y0=y0, x1=x0, y1=y1, col=rgb(0,0,1, 0.1) )
xname <- 'bodyweight'; yname <- 'GEC'
plot(numeric(0), numeric(0), xlab=lab[[xname]], ylab=lab[[yname]], xlim=lim[[xname]], ylim=lim[[yname]])
xname <- 'bodyweight'; yname <- 'GEC'
plot(numeric(0), numeric(0), xlab=lab[[xname]], ylab=lab[[yname]], xlim=lim[[xname]], ylim=lim[[yname]])
points(nhanes[[xname]][ind.male], GEC.q[ind.male,'50%'], cex=0.3, pch=21, col=gender.cols$male)
gender.cols
points(nhanes[[xname]][ind.male], GEC.q[ind.male,'50%'], cex=0.3, pch=21, col=gender.cols[['male']])
xname <- 'bodyweight'; yname <- 'GEC'
plot(numeric(0), numeric(0), xlab=lab[[xname]], ylab=lab[[yname]], xlim=lim[[xname]], ylim=lim[[yname]])
points(nhanes[[xname]][ind.male], GEC.q[ind.male,'50%'], cex=0.3, pch=21, col=gender.cols[['male']])
points(nhanes[[xname]][ind.female], GEC.q[ind.female,'50%'], cex=0.3, pch=21, col=gender.cols[['female']])
x0 <- nhanes$bodyweight[ind.male]
# y0 <- GEC.q[ind.male,'25%']
# y1 <- GEC.q[ind.male,'75%']
y0 <- GEC.q[ind.male,'2.5%']
y1 <- GEC.q[ind.male,'97.5%']
segments(x0=x0, y0=y0, x1=x0, y1=y1, col=gender.cols[['male']] )
points(nhanes$bodyweight[ind.female], GEC.q[ind.female,'50%'], cex=0.3, pch=21, col=rgb(0,0,1, 0.5))
x0 <- nhanes$bodyweight[ind.female]
y0 <- GEC.q[ind.female,'25%']
y1 <- GEC.q[ind.female,'75%']
# y0 <- GEC.q[ind.female,'2.5%']
# y1 <- GEC.q[ind.female,'97.5%']
segments(x0=x0, y0=y0, x1=x0, y1=y1, col=rgb(0,0,1, 0.1) )
xname <- 'bodyweight'; yname <- 'GEC'
plot(numeric(0), numeric(0), xlab=lab[[xname]], ylab=lab[[yname]], xlim=lim[[xname]], ylim=lim[[yname]])
points(nhanes[[xname]][ind.male], GEC.q[ind.male,'50%'], cex=0.3, pch=21, col=gender.cols[['male']])
points(nhanes[[xname]][ind.female], GEC.q[ind.female,'50%'], cex=0.3, pch=21, col=gender.cols[['female']])
x0 <- nhanes$bodyweight[ind.male]
y0 <- GEC.q[ind.male,'25%']
y1 <- GEC.q[ind.male,'75%']
# y0 <- GEC.q[ind.male,'2.5%']
# y1 <- GEC.q[ind.male,'97.5%']
segments(x0=x0, y0=y0, x1=x0, y1=y1, col=gender.cols[['male']] )
## GEC vs. bodyweight ##
xname <- 'bodyweight'; yname <- 'GEC'
plot(numeric(0), numeric(0), xlab=lab[[xname]], ylab=lab[[yname]], xlim=lim[[xname]], ylim=lim[[yname]])
points(nhanes[[xname]][ind.male], GEC.q[ind.male,'50%'], cex=0.3, pch=21, col=gender.cols[['male']])
points(nhanes[[xname]][ind.female], GEC.q[ind.female,'50%'], cex=0.3, pch=21, col=gender.cols[['female']])
x0 <- nhanes$bodyweight[ind.male]
y0 <- GEC.q[ind.male, down]
y1 <- GEC.q[ind.male, up]
segments(x0=x0, y0=y0, x1=x0, y1=y1, col=gender.cols[['male']] )
ind.male <- (nhanes$sex == 'male')
ind.female <- (nhanes$sex == 'female')
down <- '25%'; up <- '75%';  # the intervals to plot
## GEC vs. bodyweight ##
xname <- 'bodyweight'; yname <- 'GEC'
plot(numeric(0), numeric(0), xlab=lab[[xname]], ylab=lab[[yname]], xlim=lim[[xname]], ylim=lim[[yname]])
points(nhanes[[xname]][ind.male], GEC.q[ind.male,'50%'], cex=0.3, pch=21, col=gender.cols[['male']])
points(nhanes[[xname]][ind.female], GEC.q[ind.female,'50%'], cex=0.3, pch=21, col=gender.cols[['female']])
x0 <- nhanes$bodyweight[ind.male]
y0 <- GEC.q[ind.male, down]
y1 <- GEC.q[ind.male, up]
segments(x0=x0, y0=y0, x1=x0, y1=y1, col=gender.cols[['male']] )
gender.cols_light = c(rgb(0,0,0, alpha=0.1), rgb(0,0,1, alpha=0.1), rgb(1,0,0, alpha=0.1))
xname <- 'bodyweight'; yname <- 'GEC'
plot(numeric(0), numeric(0), xlab=lab[[xname]], ylab=lab[[yname]], xlim=lim[[xname]], ylim=lim[[yname]])
points(nhanes[[xname]][ind.male], GEC.q[ind.male,'50%'], cex=0.3, pch=21, col=gender.cols[['male']])
points(nhanes[[xname]][ind.female], GEC.q[ind.female,'50%'], cex=0.3, pch=21, col=gender.cols[['female']])
x0 <- nhanes$bodyweight[ind.male]
y0 <- GEC.q[ind.male, down]
y1 <- GEC.q[ind.male, up]
segments(x0=x0, y0=y0, x1=x0, y1=y1, col=gender.cols_light[['male']])
source('~/multiscale-galactose/R/analysis/data_information.R')
xname <- 'bodyweight'; yname <- 'GEC'
plot(numeric(0), numeric(0), xlab=lab[[xname]], ylab=lab[[yname]], xlim=lim[[xname]], ylim=lim[[yname]])
points(nhanes[[xname]][ind.male], GEC.q[ind.male,'50%'], cex=0.3, pch=21, col=gender.cols[['male']])
points(nhanes[[xname]][ind.female], GEC.q[ind.female,'50%'], cex=0.3, pch=21, col=gender.cols[['female']])
x0 <- nhanes$bodyweight[ind.male]
y0 <- GEC.q[ind.male, down]
y1 <- GEC.q[ind.male, up]
segments(x0=x0, y0=y0, x1=x0, y1=y1, col=gender.cols_light[['male']])
xname <- 'bodyweight'; yname <- 'GEC'
plot(numeric(0), numeric(0), xlab=lab[[xname]], ylab=lab[[yname]], xlim=lim[[xname]], ylim=lim[[yname]])
for (sex in c('male', 'female')){
inds <- (nhanes$sex == sex)
points(nhanes[[xname]][inds], GEC.q[inds,'50%'], cex=0.3, pch=21, col=gender.cols[[sex]])
x0 <- nhanes$bodyweight[inds]
y0 <- GEC.q[inds, down]
y1 <- GEC.q[inds, up]
segments(x0=x0, y0=y0, x1=x0, y1=y1, col=gender.cols_light[[sex]])
}
plot(volLiver.q[,'50%'], flowLiver.q[,'50%'], cex=0.3, xlim=c(0,2000), ylim=c(0,2000))
plot(volLiver.q[ind.male,'50%'], flowLiver.q[ind.male,'50%'], col=rgb(0,0,1), cex=nhanes$age[ind.male]/100, xlim=c(400, 2000), ylim=c(400, 2000))
points(volLiver.q[ind.female,'50%'], flowLiver.q[ind.female,'50%'], col=rgb(1,0,0), cex=nhanes$age[ind.female]/100)
plot(volLiver[1,], flowLiver[1,], cex=0.3)
points(volLiver.q[1, '50%'], flowLiver.q[1, '50%'], cex=2.0, col='black', bg='black', pch=21)
plot(volLiver.q[ind.male, flowLiver.q, cex=0.3)
plot(numeric(0), numeric(0), xlab=lab[[xname]], ylab=lab[[yname]], xlim=lim[[xname]], ylim=lim[[yname]])
xname <- 'volLiver'; yname <- 'flowLiver'
plot(numeric(0), numeric(0), xlab=lab[[xname]], ylab=lab[[yname]], xlim=lim[[xname]], ylim=lim[[yname]])
for (sex in c('male', 'female')){
inds <- (nhanes$sex == sex)
points(volLiver.q[inds,'50%'], flowLiver.q[inds,'50%'],
col=gender.cols[[sex]], cex=nhanes$age[ind.male]/100)
}
xname <- 'volLiver'; yname <- 'flowLiver'
plot(numeric(0), numeric(0), xlab=lab[[xname]], ylab=lab[[yname]], xlim=lim[[xname]], ylim=lim[[yname]])
for (sex in c('male', 'female')){
inds <- (nhanes$sex == sex)
points(volLiver.q[inds,'50%'], flowLiver.q[inds,'50%'],
col=gender.cols[[sex]], cex=nhanes$age[inds]/100)
}
