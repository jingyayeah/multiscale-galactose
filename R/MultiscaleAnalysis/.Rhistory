library(data.table)
library(libSBML)
library(matrixStats)
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
ma.settings$simulator <- 'ROADRUNNER'
task = 2
simId = 101
modelId <- paste('Galactose_v12_Nc20_core')
dir = paste(sep="")
# http://localhost:8002/media/timecourse/T2/Galactose_v12_Nc20_core_Sim101_roadrunner.csv
# /home/mkoenig/multiscale-galactose-results/tmp_sim/T2/Galactose_v12_Nc20_core_101_roadrunner.csv
dir = paste(ma.settings$dir.results, '/tmp_sim/T', task, sep='')
print(dir)
df = readDataForSimulation(dir=dir, simId=paste('Sim', simId, sep=''))
head(df)
library(MultiscaleAnalysis)
# plot a single simulation
rm(list=ls())
library(data.table)
library(libSBML)
library(matrixStats)
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
ma.settings$simulator <- 'ROADRUNNER'
task = 2
simId = 101
modelId <- paste('Galactose_v12_Nc20_core')
dir = paste(sep="")
# http://localhost:8002/media/timecourse/T2/Galactose_v12_Nc20_core_Sim101_roadrunner.csv
# /home/mkoenig/multiscale-galactose-results/tmp_sim/T2/Galactose_v12_Nc20_core_101_roadrunner.csv
dir = paste(ma.settings$dir.results, '/tmp_sim/T', task, sep='')
print(dir)
df = readDataForSimulation(dir=dir, simId=paste('Sim', simId, sep=''))
head(df)
plot(df$time, df$PP__gal)
# plot a single simulation
rm(list=ls())
library(data.table)
library(libSBML)
library(matrixStats)
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
ma.settings$simulator <- 'ROADRUNNER'
task = 2
simId = 103
modelId <- paste('Galactose_v12_Nc20_core')
dir = paste(ma.settings$dir.results, '/tmp_sim/T', task, sep='')
print(dir)
df = readDataForSimulation(dir=dir, simId=paste('Sim', simId, sep=''))
head(df)
plot(df$time, df$PP__gal)
points(df$time, df$PV__gal)
points(df$time, df$PV__gal)
plot(df$time, df$PP__gal, xlim=c(0,100))
points(df$time, df$PV__gal)
points(df$time, df$PV__gal)
plot(df$time, df$PV__gal)
plot(df)
plot(df)
plot(df$time, df[,2])
plot(df$time, df[,2:4])
plot(df$time, df[[,2:4]])
plot(df$time, df[,2])
names(df)
g <- ggplot(df, aes(time, PV__gal))
library('ggplot2')
g <- ggplot(df, aes(time, PV__gal))
summary(g)
p <- g + geom_point()
print(p)
g + geom_point() + geom_smooth(method='lm')
g + geom_point() + geom_smooth()
p <- g + geom_point() + geom_line()
p <- g + geom_point() + geom_line()
print(p)
library("reshape2")
mdf <- melt(df, id.vars="time", value.name="value", variable.name="Test")
head(mdf)
mdf <- melt(df, id.vars="time", value.name="value", variable.name="id")
head(mdf)
g1 <- ggplot(mdf, aes(time, id, group="id", colour="id"))
plot(g1)
p <- g1 + geom_point() + geom_line()
print(p)
plot(df$time, df[,2])
points(df$time, df$PV__gal)
plot(df$time, df$PP__gal, xlim=c(0,100))
plot(df$time, df$PP__gal, xlim=c(0,100), ylim=c(0,2))
points(df$time, df$PV__gal)
points(df$time, df$D05__gal)
plot(df$time, df$PP__gal, xlim=c(0,100), ylim=c(0,2))
for k in seq(1,Nc){
id = sprintf('D%2d__gal', k)
print(id)
points(df$time, df[[id], col="Green")
}
for (k in seq(1,Nc)){
id = sprintf('D%2d__gal', k)
print(id)
points(df$time, df[[id], col="Green")
}
k = 2
sprintf('D%2d__gal', k)
sprintf('D%02d__gal', k)
sey(1,20)
seq(1,20)
plot(df$time, df$PP__gal, xlim=c(0,100), ylim=c(0,2))
for (k in seq(1,Nc)){
id = sprintf('D%02d__gal', k)
print(id)
points(df$time, df[[id])
}
points(df$time, df$PV__gal)
plot(df$time, df$PP__gal, xlim=c(0,100), ylim=c(0,2))
for (k in seq(1,Nc)){
id = sprintf('D%02d__gal', k)
print(id)
points(df$time, df[[id]])
}
points(df$time, df$PV__gal)
Nc=20
plot(df$time, df$PP__gal, xlim=c(0,100), ylim=c(0,2))
for (k in seq(1,Nc)){
id = sprintf('D%02d__gal', k)
print(id)
points(df$time, df[[id]])
}
points(df$time, df$PV__gal)
plot(df$time, df$PP__gal, xlim=c(0,100), ylim=c(0,2))
for (k in seq(1,Nc)){
# Sinusoid
id = sprintf('S%02d__gal', k)
points(df$time, df[[id]], col="Gray")
# Disse
id = sprintf('D%02d__gal', k)
points(df$time, df[[id]], col="Green")
# Hepatocyte
id = sprintf('H%02d__gal', k)
points(df$time, df[[id]], col="Blue")
}
points(df$time, df$PV__gal)
plot(df$time, df$PP__gal, xlim=c(0,100), ylim=c(0,2))
for (k in seq(1,Nc)){
# Sinusoid
id = sprintf('S%02d__gal', k)
lines(df$time, df[[id]], col="Gray")
# Disse
id = sprintf('D%02d__gal', k)
lines(df$time, df[[id]], col="Green")
# Hepatocyte
id = sprintf('H%02d__gal', k)
lines(df$time, df[[id]], col="Blue")
}
lines(df$time, df$PV__gal)
plot(df$time, df$PP__gal, xlim=c(0,100), ylim=c(0,2), type='l')
for (k in seq(1,Nc)){
# Sinusoid
id = sprintf('S%02d__gal', k)
lines(df$time, df[[id]], col="Gray")
# Disse
id = sprintf('D%02d__gal', k)
lines(df$time, df[[id]], col="Green")
# Hepatocyte
id = sprintf('H%02d__gal', k)
lines(df$time, df[[id]], col="Blue")
}
lines(df$time, df$PV__gal)
plot ids
plot names(df)
names(df)
pp_compounds = grep('PP__', names(df))
pp_compounds
ids = names(df)
pp_compounds = ids[grep('PP__', names(df))]
pv_compounds = ids[grep('PP__', names(df))]
pp_compounds = ids[grep('PP__', names(df))]
pp_compounds
H01_compounds = ids[grep('H01__', names(df))]
H01_compounds
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,5), type='l')
for (id in H01_compounds){
print(id)
}
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,5), type='l')
for (id in H01_compounds){
lines(df$time, df[[id]])
}
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,5), type='l')
for (id in ids){
lines(df$time, df[[id]])
}
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,5), type='l')
for (id in ids){
if (id != 'time'){
lines(df$time, df[[id]])
}
}
gal_compounds = ids[grep('__gal', names(df))]
print(gal_compounds)
gal_compounds = ids[grep('__gal$', names(df))]
print(gal_compounds)
# plot everything
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,5), type='l')
for (id in gal_compounds){
if (id != 'time'){
lines(df$time, df[[id]])
}
}
adp_compounds = ids[grep('__a[d,t]p', names(df))]
print(adp_compounds)
names(df)
# plot everything
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,5), type='l')
for (id in adp_compounds){
if (id != 'time'){
lines(df$time, df[[id]])
}
}
audp_compounds = ids[grep('__[a,u][d,t]p', names(df))]
print(audp_compounds)
audp_compounds = ids[grep('__[a,u][d,t]p$', names(df))]
print(audp_compounds)
rm(list=ls())
library(data.table)
library(libSBML)
library(matrixStats)
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
ma.settings$simulator <- 'ROADRUNNER'
task = 3
simId = 226
modelId <- paste('Galactose_v12_Nc20_dilution')
rm(list=ls())
library(data.table)
library(libSBML)
library(matrixStats)
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
ma.settings$simulator <- 'ROADRUNNER'
task = 3
simId = 226
modelId <- paste('Galactose_v12_Nc20_dilution')
# create a model dictionary
dir = paste(ma.settings$dir.results, '/tmp_sim/T', task, sep='')
print(dir)
df = readDataForSimulation(dir=dir, simId=paste('Sim', simId, sep=''))
head(df)
plot(df$time, df[,2])
pp_compounds = ids[grep('PP__', names(df))]
ids = names(df)
pp_compounds = ids[grep('PP__', names(df))]
pv_compounds = ids[grep('PP__', names(df))]
# plot some components via ids
plotTimecourse <- function(df, ids){
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,5), type='l')
for (id in H01_ids){
lines(df$time, df[[id]])
}
}
plotTimecourse(df, pp_compounds)
# plot some components via ids
plotTimecourse <- function(df, ids){
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,5), type='l')
for (id in ids){
lines(df$time, df[[id]])
}
}
ids = names(df)
pp_compounds = ids[grep('PP__', names(df))]
plotTimecourse(df, pp_compounds)
pv_compounds = ids[grep('PP__', names(df))]
plotTimecourse(df, pv_compounds)
plotTimecourse(df, pv_compounds)
plotTimecourse <- function(df, ids){
for (id in ids){
lines(df$time, df[[id]])
}
}
pv_compounds = ids[grep('PV__', names(df))]
# plot some components via ids
plotTimecourse <- function(df, ids){
for (id in ids){
lines(df$time, df[[id]])
}
}
# subsets for plotting
pp_ids = ids[grep('PP__', names(df))]
pv_ids = ids[grep('PV__', names(df))]
H01_ids = ids[grep('H01__', names(df))]
gal_ids = ids[grep('__gal$', names(df))]
adp_ids = ids[grep('__a[d,t]p', names(df))]
audp_ids = ids[grep('__[a,u][d,t]p$', names(df))]
# create some plots
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,5), type='l')
plotTimecourse(df, pp_compounds)
plotTimecourse(df, pv_compounds)
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,2.3), type='l')
plotTimecourse(df, pp_compounds)
plotTimecourse(df, pv_compounds)
print pp_ids
print(pp_ids)
plotTimecourse(df, c('PV__galM'), col='Blue')
plotTimecourse(df, c('PV__galM'), col='Blue')
# plot some components via ids
plotTimecourse <- function(df, ids, cols='Black'){
for (id in ids){
lines(df$time, df[[id]], cols)
}
}
plotTimecourse(df, c('PV__galM'), col='Blue')
plotTimecourse(df, c('PV__galM'), col=c('Blue'))
# plot some components via ids
plotTimecourse <- function(df, ids, cols='Black'){
for (id in ids){
lines(df$time, df[[id]], col=cols)
}
}
plotTimecourse(df, c('PV__galM'), col=c('Blue'))
plot(df$time, df[['PV__galM']])
plot(df$time, df[['PV__galM']], xlim(c(0,20)))
plot(df$time, df[['PV__galM']] , xlim=c(0,20)))
plot(df$time, df[['PV__galM']] , xlim=c(0,20))
plot(df$time, df[['PV__galM']] , xlim=c(0,50))
plot(df$time, df[['PV__galM']] , xlim=c(0,100))
plotTimecourse(df, c('PV_galM'))
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,2.3), type='l')
plotTimecourse(df, c('PV_galM'))
plotTimecourse(df, c('PV__galM'))
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,2.3), type='l')
plotTimecourse(df, c('PV__galM'), col=c('Blue'))
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,0.05), type='l')
plotTimecourse(df, c('PV__galM'), col=c('Blue'))
galM_ids = ids[grep('__galM$', names(df))]
plotTimecourse(df, galM_ids)
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,0.5), type='l')
plotTimecourse(df, galM_ids)
plotTimecourse(df, gal_ids, col=c('Blue'))
plotTimecourse(df, gal_ids, col=c('Blue'))
head(df$[[gal_ids]])
head(df[[gal_ids]])
head(df[,gal_ids])
ma.settings$simulator <- 'ROADRUNNER'
task <- 3
date = '2014-07-15'
modelId <- paste('Galactose_v12_Nc20_dilution')
Nc <- 20
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
print(parsfile)
pars <- loadParameterFile(file=parsfile)
head(pars)
sname <- paste(date, '_', task, sep='')
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
print(parsfile)
pars <- loadParameterFile(file=parsfile)
head(pars)
rm(list=ls())
library(data.table)
library(libSBML)
library(matrixStats)
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
ma.settings$simulator <- 'ROADRUNNER'
task <- 3
date = '2014-07-15'
modelId <- paste('Galactose_v12_Nc20_dilution')
Nc <- 20
sname <- paste(date, '_', task, sep='')
rm(list=ls())
library(data.table)
library(libSBML)
library(matrixStats)
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
# Get overview over available simulations
ma.settings$simulator <- 'ROADRUNNER'
task <- 'T3'
date = '2014-07-15'
modelId <- paste('Galactose_v12_Nc20_dilution')
Nc <- 20
sname <- paste(date, '_', task, sep='')
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
print(parsfile)
pars <- loadParameterFile(file=parsfile)
head(pars)
simId <- 497
dir = paste(ma.settings$dir.results, '/tmp_sim/', task, sep='')
df = readDataForSimulation(dir=dir, simId=paste('Sim', simId, sep=''))
head(df)
ids = names(df)
plotTimecourse <- function(df, ids, cols='Black'){
for (id in ids){
lines(df$time, df[[id]], col=cols)
}
}
pp_ids = ids[grep('PP__', names(df))]
pv_ids = ids[grep('PV__', names(df))]
H01_ids = ids[grep('H01__', names(df))]
gal_ids = ids[grep('__gal$', names(df))]
galM_ids = ids[grep('__galM$', names(df))]
adp_ids = ids[grep('__a[d,t]p', names(df))]
audp_ids = ids[grep('__[a,u][d,t]p$', names(df))]
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,2.3), type='l')
plotTimecourse(df, pp_compounds)
plotTimecourse(df, pv_compounds)
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,2.3), type='l')
plotTimecourse(df, pp_ids)
plotTimecourse(df, pv_ids)
plotTimecourse(df, c('PV__galM'), col=c('Blue'))
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,0.05), type='l')
plotTimecourse(df, c('PV__galM'), col=c('Blue'))
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,0.05), type='l')
plotTimecourse(df, c('PV__galM'), col=c('Blue'))
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,2.3), type='l')
plotTimecourse(df, pp_ids)
plotTimecourse(df, pv_ids)
plotTimecourse(df, c('PV__galM'), col=c('Blue'))
plotTimecourse(df, c('PV__gal'), col=c('Red'))
rm(list=ls())
library(data.table)
library(libSBML)
library(matrixStats)
library(MultiscaleAnalysis)
setwd(ma.settings$dir.results)
# Get overview over available simulations
ma.settings$simulator <- 'ROADRUNNER'
task <- 'T3'
date = '2014-07-15'
modelId <- paste('Galactose_v12_Nc20_dilution')
Nc <- 20
sname <- paste(date, '_', task, sep='')
parsfile <- file.path(ma.settings$dir.results, sname,
paste(task, '_', modelId, '_parameters.csv', sep=""))
print(parsfile)
pars <- loadParameterFile(file=parsfile)
head(pars)
simId <- 298
dir = paste(ma.settings$dir.results, '/tmp_sim/', task, sep='')
df = readDataForSimulation(dir=dir, simId=paste('Sim', simId, sep=''))
head(df)
ids = names(df)
# plot some components via ids
plotTimecourse <- function(df, ids, cols='Black'){
for (id in ids){
lines(df$time, df[[id]], col=cols)
}
}
# subsets for plotting
pp_ids = ids[grep('PP__', names(df))]
pv_ids = ids[grep('PV__', names(df))]
H01_ids = ids[grep('H01__', names(df))]
gal_ids = ids[grep('__gal$', names(df))]
galM_ids = ids[grep('__galM$', names(df))]
adp_ids = ids[grep('__a[d,t]p', names(df))]
audp_ids = ids[grep('__[a,u][d,t]p$', names(df))]
# create some plots
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,2.3), type='l')
plotTimecourse(df, pp_ids)
plotTimecourse(df, pv_ids)
plotTimecourse(df, c('PV__galM'), col=c('Blue'))
plotTimecourse(df, c('PV__gal'), col=c('Red'))
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,5.1), type='l')
plotTimecourse(df, c('PV__gal'), col=c('Red'))
plotTimecourse(df, c('PP__gal'), col=c('Red'))
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,5.1), type='l')
plotTimecourse(df, gal_ids)
head(pars)
simId <- 497 # 298 (5)
dir = paste(ma.settings$dir.results, '/tmp_sim/', task, sep='')
df = readDataForSimulation(dir=dir, simId=paste('Sim', simId, sep=''))
head(df)
ids = names(df)
# plot some components via ids
plotTimecourse <- function(df, ids, cols='Black'){
for (id in ids){
lines(df$time, df[[id]], col=cols)
}
}
# subsets for plotting
pp_ids = ids[grep('PP__', names(df))]
pv_ids = ids[grep('PV__', names(df))]
H01_ids = ids[grep('H01__', names(df))]
gal_ids = ids[grep('__gal$', names(df))]
galM_ids = ids[grep('__galM$', names(df))]
adp_ids = ids[grep('__a[d,t]p', names(df))]
audp_ids = ids[grep('__[a,u][d,t]p$', names(df))]
# create some plots
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,2.3), type='l')
plotTimecourse(df, pp_ids)
plotTimecourse(df, pv_ids)
plotTimecourse(df, c('PV__galM'), col=c('Blue'))
plotTimecourse(df, c('PV__gal'), col=c('Red'))
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,5.1), type='l')
plotTimecourse(df, gal_ids)
plotTimecourse(df, c('PV__gal'), col=c('Red'))
plotTimecourse(df, c('PP__gal'), col=c('Red'))
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,5.1), type='l')
plotTimecourse(df, gal_ids)
plot(df$time, df)
plot(df$time, df[[ids]])
plot(df$time, df[,ids])
plot(df$time, df[[,ids]])
plot(numeric(0), numeric(), xlim=c(0,100), ylim=c(0,2.0), type='l')
plotTimecourse(df, ids)
library(MultiscaleAnalysis)
library(MultiscaleAnalysis)
library(MultiscaleAnalysis)
df = readDataForSimulationFile(sim_file)
library(MultiscaleAnalysis)
