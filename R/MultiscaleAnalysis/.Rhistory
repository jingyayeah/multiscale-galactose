wyn1990$dtype <- 'individual'
wyn1990$gender <- getGender(wyn1990)
wyn1990$flowLiver <- wyn1990$liverBloodflow
saveRawData(wyn1990)
head(wyn1990)
# BSA [m^2], liverWeight [g]
yos2003 <- read.csv(file.path(ma.settings$dir.expdata, "liver_volume", "Yoshizumi2003.csv"), sep="\t")
yos2003$dtype <- 'individual'
yos2003$gender <- getGender(yos2003)
yos2003$volLiver <- yos2003$liverWeight/f_liver_density ; # [ml]
saveRawData(yos2003)
head(yos2003)
# age [years], FHF (functional hepatic flow) [ml/min]
zol1993 <- read.csv(file.path(ma.settings$dir.expdata, "liver_bloodflow", "Zoller1993.csv"), sep="\t")
zol1993$dtype <- 'individual'
zol1993$gender <- getGender(zol1993)
zol1993$flowLiverkg <- zol1993$liverBloodflowPerBodyweight
saveRawData(zol1993)
head(zol1993)
# age [years], FHF (functional hepatic flow) [ml/min]
zol1999 <- read.csv(file.path(ma.settings$dir.expdata, "liver_bloodflow", "Zoli1999.csv"), sep="\t")
zol1999$dtype <- 'individual'
zol1999$gender <- getGender(zol1999)
zol1999$flowLiver <- zol1999$FHF
saveRawData(zol1999)
head(zol1999)
############################################################################################
# Linear regression template
############################################################################################
linear_regression <- function(data, xname, yname){
# do linear regression
formula <- as.formula(paste(yname, '~', xname))
m1 <- lm(formula, data=data)
# Create output file with log information
name = paste(yname, 'vs', xname)
log.file <- file.path(ma.settings$dir.base, "results", "correlations",
sprintf('%s_%s.log', yname, xname))
sink.file <- file(log.file, open = "wt")
sink(sink.file)
sink(sink.file, type="message")
# TODO better logging
print('### Data ###')
print(summary(data))
print('### Linear Regression Model ###')
print(summary(m1))
sink(type="message")
sink()
return(m1)
}
############################################################################################
# Helper functions
############################################################################################
makeFigureFull <- function(data, m1, xname, yname, create_plots=F){
xlab <- lab[[xname]]; ylab <- lab[[yname]]
xlim <- lim[[xname]]; ylim <- lim[[yname]]
main <- sprintf('%s vs. %s', yname, xname)
makeFigure(data, m1, main, xname, yname, xlab, ylab, xlim, ylim, create_plots)
}
makeFigure <- function(data, m1, main, xname, yname,
xlab, ylab,
xlim, ylim, create_plots=F){
name = sprintf('%s_%s', yname, xname)
if (create_plots == TRUE){
plot.file <- file.path(ma.settings$dir.base, "results", "correlations",
paste(name, '.png', sep=""))
print(plot.file)
png(filename=plot.file,
width = 1000, height = 1000, units = "px", bg = "white",  res = 150)
}
plot(numeric(0), numeric(0), xlim=xlim, ylim=ylim,
main=main, xlab=xlab, ylab=ylab)
# plot the individual gender data
for (k in 1:length(gender.levels)){
# better plot
inds.in <- which(data$gender == gender.levels[k] & data$dtype == 'individual')
points(data[inds.in, xname], data[inds.in, yname], col=gender.cols[k], bg=gender.cols[k],
pch=gender.symbols[k], cex=0.8)
inds.po <- which(data$gender == gender.levels[k] & data$dtype == 'population')
points(data[inds.po, xname], data[inds.po, yname], col=gender.cols[k],
pch=gender.symbols[k], cex=0.8)
}
legend("topright",  legend=gender.levels, fill=gender.cols)
# legend("topleft",  legend=gender.levels, fill=gender.cols)
# Plot linear regression information
if (!is.null(m1)){
# plot regression line
abline(m1)
# get the confidence intervals for the betas
newx <- seq(min(data[[xname]]), max(data[[xname]]), length.out = 100)
newx.df <- as.data.frame(newx)
names(newx.df) <- c(xname)
# conf.interval <- predict(m1, interval="confidence")
conf.interval <- predict(m1, newdata=newx.df, interval="confidence")
lines(newx, conf.interval[,2], lty=2)
lines(newx, conf.interval[,3], lty=2)
# get prediction intervals
for (level in c(0.682, 0.95)){
pred.interval <- predict(m1, newdata=newx.df, interval="prediction", level=level)
lines(newx, pred.interval[,2], lty=3, col='blue')
lines(newx, pred.interval[,3], lty=3, col='blue')
}
# residual standard error
RSE <- sqrt(deviance(m1)/df.residual(m1))
# plot equation
info <- sprintf('y = %3.4f * x %+3.4f\n RSE = %3.4f\n n = %d', m1$coefficients[2], m1$coefficients[1], RSE, length(m1$residuals))
text(x=0.5*(xlim[2]+xlim[1]),
y=(ylim[1] + 0.05*(ylim[2]-ylim[1])), labels = info)
}
if (create_plots==TRUE){ dev.off() }
# makeQualityFigure(m1, xname, yname, create_plots=T)
}
# check if Sd or Range for x and y based on which fields are available
# in the dataset
getRangeType <- function(dat, xname, yname){
xtype <- NULL
ytype <- NULL
if (paste(xname, 'Sd', sep="") %in% names(dat)){
xtype <- 'Sd'
} else if (paste(xname, 'Range', sep="") %in% names(dat)){
xtype <- 'Range'
}
if (paste(yname, 'Sd', sep="") %in% names(dat)){
ytype <- 'Sd'
} else if (paste(yname, 'Range', sep="") %in% names(dat)){
ytype <- 'Range'
}
return(list(xtype=xtype, ytype=ytype))
}
# Add the population data segments to the plot
addPopulationSegments <- function(dat, xname, yname){
types <- getRangeType(dat, xname, yname)
for (k in 1:nrow(dat)){
sex <- dat$gender[k]
col <- gender.cols[which(gender.levels == sex)]
xmean <- dat[k, xname]
ymean <- dat[k, yname]
xrange <- dat[k, paste(xname, types$xtype, sep="")]
yrange <- dat[k, paste(yname, types$ytype, sep="")]
# horizontal
segments(xmean-xrange, ymean, xmean+xrange, ymean, col=col)
# vertical
segments(xmean, ymean-yrange, xmean, ymean+yrange, col=col)
}
}
################################
# Population data
################################
# Takes data from population studies, i.e. multiple individuals put together
# providing n (number subjects), mean (mean value) and Sd (standard deviation)
# or range (distance to upper/lower limit of group).
# Add n measurements of mean data
addMeanPopulationData <- function(data, newdata){
xname <- names(data)[3]
yname <- names(data)[4]
freq <- newdata$n
sds <- newdata[, paste(yname, 'Sd', sep="")]
for (k in 1:nrow(newdata)){
n <- freq[k]
study <- rep(newdata$study[k], n)
gender <- rep(newdata$gender[k], n)
dtype <- rep(newdata$dtype[k], n)
# replicate mean data point n times
x <- rep(newdata[k, xname], n)
assign(xname, x)
y <- rep(newdata[k, yname], n)
assign(yname, y)
df <- data.frame(study, gender, get(xname), get(yname), dtype)
names(df) <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind(data, df)
}
return(data)
}
# Generate randomized data points within the given measurement
# interval for the data, i.e. use mean and sd/range for x and y
# to create n data points.
# The data is weighted only a fraction of the individual data in
# the regression but the information is provided for the fit curves.
addRandomizedPopulationData <- function(data, newdata){
xname <- names(data)[3]
yname <- names(data)[4]
types <- getRangeType(newdata, xname, yname)
print(types)
for (k in 1:nrow(newdata)){
n <- newdata$n[k]
study <- rep(newdata$study[k], n)
gender <- rep(newdata$gender[k], n)
dtype <- rep(newdata$dtype[k], n)
# generate x points
xmean <- newdata[k, xname]
xrange <- newdata[k, paste(xname, types$xtype, sep="")]
if (types$xtype == 'Sd'){
x <- rnorm(n, mean=xmean, sd=xrange)
} else if (types$xtype == 'Range'){
x <- runif(n, min=xmean-xrange, max=xmean+xrange)
}
x[x<0] <- NA
assign(xname, x)
cat(xname, ':', xmean, '+-', xrange, '\n')
# generate y points
ymean <- newdata[k, yname]
yrange <- newdata[k, paste(yname, types$ytype, sep="")]
if (types$ytype == 'Sd'){
y <- rnorm(n, mean=ymean, sd=yrange)
} else if (types$ytype == 'Range'){
y <- runif(n, min=ymean-yrange, max=ymean+yrange)
}
y[y<0] <- NA
assign(yname, y)
cat(yname, ':', ymean, '+-', yrange, '\n')
df <- data.frame(study, gender, get(xname), get(yname), dtype)
names(df) <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind(data, df)
}
return(data)
}
# Saves data.frame as csv and R data
saveData <- function(data, dir=NULL){
if (is.null(dir)){
dir <- file.path(ma.settings$dir.base, "results", "correlations")
}
xname <- names(data)[3]
yname <- names(data)[4]
r_fname <- file.path(dir, sprintf('%s_%s.Rdata', yname, xname))
csv_fname <- file.path(dir, sprintf('%s_%s.csv', yname, xname))
cat(r_fname, '\n')
cat(csv_fname, '\n')
save('data', file=r_fname)
write.table(file=csv_fname, x=data, na="NA", row.names=FALSE, quote=FALSE,
sep="\t", col.names=TRUE)
}
########################################################################################
create_plots = F
############################################
# GEC [mmol/min] vs. age [years]
############################################
xname <- 'age'; yname <- 'GEC'
selection <- c('study', 'gender', xname, yname, 'dtype')
# individual subject data
data <- rbind( mar1988[, selection],
tyg1963[, selection],
sch1986.tab1[, selection],
# win1965[, selection], # outlier compare to other datasets
duc1979[, selection],
duf1992[, selection])
data <- data[complete.cases(data), ]  # remove NA
saveData(data)
m1 <- linear_regression(data, xname, yname)
makeFigureFull(data, m1, xname, yname, create_plots=create_plots)
############################################
# GECkg [mmol/min/kgbw] vs. age [years]
############################################
xname <- 'age'; yname <- 'GECkg'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind( lan2011[, selection],
duc1979[, selection],
tyg1963[, selection],
sch1986.fig1[, selection],
# sch1986.tab1[, c('study', 'gender', 'age', 'GECkg')], # already ploted via sch1986.fig1
# win1965[, selection],  # outlier compare to other datasets
duf1992[, selection])
data <- data[complete.cases(data), ]  # remove NA
saveData(data)
m1 <- linear_regression(data, xname, yname)
makeFigureFull(data, m1, xname, yname, create_plots=create_plots)
############################################
# GEC [mmol/min] vs. volLiver [ml]
############################################
xname <- 'volLiver'; yname <- 'GEC'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind( mar1988[, selection])
saveData(data)
m1 <- linear_regression(data, xname, yname)
makeFigureFull(data, m1, xname, yname, create_plots=create_plots)
############################################
# GEC [mmol/min] vs. flowLiver [ml/min]
############################################
xname <- 'flowLiver'; yname <- 'GEC'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind( win1965[, selection]) # outlier compare to other datasets
saveData(data)
m1 <- linear_regression(data, xname, yname)
makeFigureFull(data, m1, xname, yname, create_plots=create_plots)
############################################
# volLiver [ml] vs. age [years]
############################################
xname <- 'age'; yname <- 'volLiver'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind( mar1988[, selection],
wyn1989[, selection],
naw1998[, selection],
boy1933[, selection],
hei1999[, selection])
# data <- addRandomizedPopulationData(data, alt1962) # no range/Sd for volLiver
# data <- addRandomizedPopulationData(data, tom1965)
# data <- addRandomizedPopulationData(data, kay1987)
saveData(data)
makeFigureFull(data, NULL, xname, yname, create_plots=create_plots)
addPopulationSegments(tom1965, xname, yname)
addPopulationSegments(kay1987, xname, yname)
############################################
# volLiver [ml] vs. age [years] and bodyweight [kg]
############################################
# x1name <- 'age'; x2name <- 'bodyweight'; yname <- 'volLiver'
# selection <- c('study', 'gender', x1name, x2name, yname, 'dtype')
# data <- rbind(wyn1989[, selection] ,
#               naw1998[, selection],
#               hei1999[, selection])
# require("rgl")
# require("RColorBrewer")
# colors <- rep(NA, nrow(data))
# colors[data$gender=='male'] <- rgb(0,0,1, alpha=0.5)
# colors[data$gender=='female'] <- rgb(1,0,0, alpha=0.5)
# plot3d(data$age, data$bodyweight, data$volLiver,
#        col=colors, pch=symbols, size=5)
# data1 <- data[data$gender=="male", ]
# data2 <- data[data$gender=="female", ]
# plot3d(data1$age, data1$bodyweight, data1$volLiver,
#        pch=symbols, size=5, col='blue')
# plot3d(data2$age, data2$bodyweight, data2$volLiver,
#        pch=symbols, size=5, col='red')
# decorate3d()
############################################
# volLiverkg [ml/kg] vs. age [years]
############################################
xname <- 'age'; yname <- 'volLiverkg'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind(wyn1989[, selection] ,
naw1998[, selection],
hei1999[, selection])
saveData(data)
makeFigureFull(data, NULL, xname, yname, create_plots=create_plots)
############################################
# volLiver [ml] vs. BSA [m^2]
############################################
xname <- 'BSA'; yname <- 'volLiver'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind(naw1998[, selection],
hei1999[, selection],
ura1995[, selection],
vau2002.fig1[, selection],
yos2003[,selection])
# data <- addRandomizedPopulationData(data, del1968.fig4)
saveData(data)
makeFigureFull(data, NULL, xname, yname, create_plots=create_plots)
# addPopulationSegments(del1968.fig4, xname, yname)
############################################
# volLiverkg [ml/kg] vs. BSA [m^2]
############################################
xname <- 'BSA'; yname <- 'volLiverkg'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind(naw1998[, selection],
hei1999[, selection])
saveData(data)
makeFigureFull(data, NULL, xname, yname, create_plots=create_plots)
############################################
# volLiver [ml] vs. bodyweight [kg]
############################################
xname <- 'bodyweight'; yname <- 'volLiver'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind(naw1998[, selection],
vau2002.fig2[, selection],
wyn1989[, selection],
hei1999[, selection])
# data <- addRandomizedPopulationData(data, del1968.fig1)
# data <- addRandomizedPopulationData(data, tom1965)
saveData(data)
makeFigureFull(data, NULL, xname, yname, create_plots=create_plots)
addPopulationSegments(del1968.fig1, xname, yname)
addPopulationSegments(tom1965, xname, yname)
############################################
# volLiverkg [ml/kg] vs. bodyweight [kg]
############################################
xname <- 'bodyweight'; yname <- 'volLiverkg'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind(naw1998[, selection],
vau2002.fig2[, selection],
wyn1989[, selection],
hei1999[, selection])
saveData(data)
makeFigureFull(data, NULL, xname, yname, create_plots=create_plots)
############################################
# volLiver [ml] vs. height [cm]
############################################
xname <- 'height'; yname <- 'volLiver'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind(naw1998[, selection],
hei1999[, selection])
# data <- addRandomizedPopulationData(data, del1968.fig3)
# data <- addRandomizedPopulationData(data, gra2000.tab1)
saveData(data)
makeFigureFull(data, NULL, xname, yname, create_plots=create_plots)
addPopulationSegments(del1968.fig3, xname, yname)
addPopulationSegments(gra2000.tab1, xname, yname)
############################################
# volLiverkg [ml/kg] vs. height [cm]
############################################
xname <- 'height'; yname <- 'volLiverkg'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind(naw1998[, selection],
hei1999[, selection])
saveData(data)
makeFigureFull(data, NULL, xname, yname, create_plots=create_plots)
############################################
# flowLiver [ml/min] vs. age [years]
############################################
xname <- 'age'; yname <- 'flowLiver'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind( win1965[, selection],
wyn1989[, selection],
bra1945[, selection],
zol1999[, selection],
sch1945[, selection],
wyn1990[, selection],
tyg1958[, selection],
cat2010[, selection],     # estimate via cardiac output
ircp2001.co[, selection]) # estimate via cardiac output
saveData(data)
makeFigureFull(data, NULL, xname, yname, create_plots=create_plots)
# points(tyg1958$age, tyg1958$flowLiver, col='black', bg='black', pch=21, cex=1.5)
############################################
# flowLiverkg [ml/min/kg] vs. age [years]
############################################
xname <- 'age'; yname <- 'flowLiverkg'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind( win1965[, selection],
wyn1989[, selection],
sch1945[, selection],
zol1993[, selection],
tyg1958[, selection],
cat2010[, selection]) # estimate via cardiac output
saveData(data)
# m1 <- linear_regression(data, xname, yname)
makeFigureFull(data, NULL, xname, yname, create_plots=create_plots)
#points(tyg1958$age, tyg1958$flowLiverkg, col='black', bg='black', pch=21, cex=1.5)
############################################
# flowLiver [ml/min] vs. bodyweight [kg]
############################################
xname <- 'bodyweight'; yname <- 'flowLiver'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind(wyn1989[, selection],
tyg1958[, selection],
sim1997[, selection], # estimate via cardiac output
cat2010[, selection]) # estimate via cardiac output
saveData(data)
m1 <- linear_regression(data, xname, yname)
makeFigureFull(data, m1, xname, yname, create_plots=create_plots)
############################################
# flowLiverkg [ml/min] vs. bodyweight [kg]
############################################
xname <- 'bodyweight'; yname <- 'flowLiverkg'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind(  wyn1989[, selection],
tyg1958[, selection],
sim1997[, selection], # estimate via cardiac output
cat2010[, selection]) # estimate via cardiac output
saveData(data)
m1 <- linear_regression(data, xname, yname)
makeFigureFull(data, m1, xname, yname, create_plots=create_plots)
############################################
# flowLiver [ml/min] vs. BSA [m^2]
############################################
xname <- 'BSA'
yname <- 'flowLiver'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind(bra1945[, selection],
sch1945[, selection],
tyg1958[, selection],
cat2010[, selection]) # estimate via cardiac output
saveData(data)
m1 <- linear_regression(data, xname, yname)
makeFigureFull(data, m1, xname, yname, create_plots=create_plots)
############################################
# flowLiverkg [ml/min/kg] vs. BSA [m^2]
############################################
xname <- 'BSA'
yname <- 'flowLiverkg'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind(sch1945[, selection],
tyg1958[, selection],
cat2010[, selection]) # estimate via cardiac output
saveData(data)
# m1 <- linear_regression(data, xname, yname)
makeFigureFull(data, NULL, xname, yname, create_plots=create_plots)
############################################
# flowLiver [ml/min] vs. volLiver [ml]
############################################
xname <- 'volLiver'
yname <- 'flowLiver'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind(wyn1989[, selection])
saveData(data)
m1 <- linear_regression(data, xname, yname)
makeFigureFull(data, m1, xname, yname, create_plots=create_plots)
############################################
# flowLiverkg [ml/min/kg] vs. volLiverkg [ml/kg]
############################################
xname <- 'volLiverkg'
yname <- 'flowLiverkg'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind(wyn1989[, selection])
saveData(data)
m1 <- linear_regression(data, xname, yname)
makeFigureFull(data, m1, xname, yname, create_plots=create_plots)
############################################
# perfusion [ml/min/ml] vs. age [years]
############################################
xname <- 'age'; yname <- 'perfusion'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind( wyn1989[, selection])
saveData(data)
m1 <- linear_regression(data, xname, yname)
makeFigureFull(data, m1, xname, yname, create_plots=create_plots)
