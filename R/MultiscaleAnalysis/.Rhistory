mname <- paste('m.flowLiver_age.', sex, sep="")
dname <- paste('df.', sex, sep="")
rname <- paste('flowLiver.', sex, sep="")
rname.mu <- paste('flowLiver_direct.', sex, '.mu', sep="")
m <- get(mname)
d <- get(dname)
newdata <- get(paste('nhanes.', sex, sep="") )
# calculate the liver volumes based on age and gender
plotCentiles(model=m, d=d, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[[sex]])
# random selection from distribution
assign(rname, f_flowLiver_volLiver(volLiver=newdata$volLiver, mean.value=FALSE) )
points(newdata$age, get(rname), cex=0.5, col='orange')
# mean value
assign(rname.mu, f_flowLiver_volLiver(volLiver=newdata$volLiver, mean.value=TRUE) )
points(newdata$age, get(rname.mu), col='red')
}
par(mfrow=c(1,1))
par(mfrow=c(1,3))
for (sex in c('all')){
mname <- paste('m.flowLiver_age.', sex, sep="")
dname <- paste('df.', sex, sep="")
rname <- paste('flowLiver.', sex, sep="")
rname.mu <- paste('flowLiver_direct.', sex, '.mu', sep="")
m <- get(mname)
d <- get(dname)
newdata <- get(paste('nhanes.', sex, sep="") )
# calculate the liver volumes based on age and gender
plotCentiles(model=m, d=d, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[[sex]])
# random selection from distribution
assign(rname, f_flowLiver_volLiver(volLiver=newdata$volLiver, mean.value=FALSE) )
points(newdata$volLiver, get(rname), cex=0.5, col='orange')
# mean value
assign(rname.mu, f_flowLiver_volLiver(volLiver=newdata$volLiver, mean.value=TRUE) )
points(newdata$volLiver, get(rname.mu), col='red')
}
par(mfrow=c(1,1))
dev.off()
par(mfrow=c(1,3))
for (sex in c('all')){
mname <- paste('m.flowLiver_age.', sex, sep="")
dname <- paste('df.', sex, sep="")
rname <- paste('flowLiver.', sex, sep="")
rname.mu <- paste('flowLiver_direct.', sex, '.mu', sep="")
m <- get(mname)
d <- get(dname)
newdata <- get(paste('nhanes.', sex, sep="") )
# calculate the liver volumes based on age and gender
plotCentiles(model=m, d=d, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[[sex]])
# random selection from distribution
assign(rname, f_flowLiver_volLiver(volLiver=newdata$volLiver, mean.value=FALSE) )
points(newdata$volLiver, get(rname), cex=0.5, col='orange')
# mean value
assign(rname.mu, f_flowLiver_volLiver(volLiver=newdata$volLiver, mean.value=TRUE) )
points(newdata$volLiver, get(rname.mu), col='red')
}
par(mfrow=c(1,1))
par(mfrow=c(1,3))
for (sex in c('all')){
mname <- paste('m.flowLiver_volLiver.', sex, sep="")
dname <- paste('df.', sex, sep="")
rname <- paste('flowLiver.', sex, sep="")
rname.mu <- paste('flowLiver_direct.', sex, '.mu', sep="")
m <- get(mname)
d <- get(dname)
newdata <- get(paste('nhanes.', sex, sep="") )
# calculate the liver volumes based on age and gender
plotCentiles(model=m, d=d, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[[sex]])
# random selection from distribution
assign(rname, f_flowLiver_volLiver(volLiver=newdata$volLiver, mean.value=FALSE) )
points(newdata$volLiver, get(rname), cex=0.5, col='orange')
# mean value
assign(rname.mu, f_flowLiver_volLiver(volLiver=newdata$volLiver, mean.value=TRUE) )
points(newdata$volLiver, get(rname.mu), col='red')
}
par(mfrow=c(1,1))
f_flowLiver_volLiver <- function(volLiver, mean.value=FALSE){
# No sex dependence of flowLiver ~ volLiver
m <- m.flowLiver_volLiver.all
newdata <- data.frame(volLiver=volLiver)
mu <- predict(m, what = "mu", type = "response", newdata=newdata)
sigma <- predict(m, what = "sigma", type = "response", newdata=newdata)
if (mean.value == TRUE){
# calculate the predicted mean volume
flowLiver <- mu
} else {
flowLiver <- rNO(n=nrow(newdata), mu=mu, sigma=sigma)
}
return(flowLiver)
}
# Nhanes blood flow predictions
par(mfrow=c(1,3))
for (sex in c('all')){
mname <- paste('m.flowLiver_volLiver.', sex, sep="")
dname <- paste('df.', sex, sep="")
rname <- paste('flowLiver.', sex, sep="")
rname.mu <- paste('flowLiver_direct.', sex, '.mu', sep="")
m <- get(mname)
d <- get(dname)
newdata <- get(paste('nhanes.', sex, sep="") )
# calculate the liver volumes based on age and gender
plotCentiles(model=m, d=d, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[[sex]])
# random selection from distribution
assign(rname, f_flowLiver_volLiver(volLiver=newdata$volLiver, mean.value=FALSE) )
points(newdata$volLiver, get(rname), cex=0.5, col='orange')
# mean value
assign(rname.mu, f_flowLiver_volLiver(volLiver=newdata$volLiver, mean.value=TRUE) )
points(newdata$volLiver, get(rname.mu), col='red')
}
par(mfrow=c(1,1))
par(mfrow=c(1,3))
plot(nhanes.all$age, nhanes.all$flowLiver)
plot(nhanes.all$age, nhanes.all$flowLiver_direct)
par(mfrow=c(1,1))
plot(nhanes.all$age, flowLiver_direct.all)
par(mfrow=c(1,3))
for (sex in c('all')){
mname <- paste('m.flowLiver_volLiver.', sex, sep="")
dname <- paste('df.', sex, sep="")
rname <- paste('flowLiver_direct.', sex, sep="")
rname.mu <- paste('flowLiver_direct.', sex, '.mu', sep="")
m <- get(mname)
d <- get(dname)
newdata <- get(paste('nhanes.', sex, sep="") )
# calculate the liver volumes based on age and gender
plotCentiles(model=m, d=d, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[[sex]])
# random selection from distribution
assign(rname, f_flowLiver_volLiver(volLiver=newdata$volLiver, mean.value=FALSE) )
points(newdata$volLiver, get(rname), cex=0.5, col='orange')
# mean value
assign(rname.mu, f_flowLiver_volLiver(volLiver=newdata$volLiver, mean.value=TRUE) )
points(newdata$volLiver, get(rname.mu), col='red')
}
par(mfrow=c(1,1))
nhanes.all$flowLiver_direct <- flowLiver_direct.all
par(mfrow=c(1,3))
plot(nhanes.all$age, nhanes.all$flowLiver)
plot(nhanes.all$age, nhanes.all$flowLiver_direct)
par(mfrow=c(1,1))
par(mfrow=c(1,3))
plot(nhanes.all$volLiver, nhanes.all$flowLiver)
plot(nhanes.all$volLiver, nhanes.all$flowLiver_direct)
par(mfrow=c(1,1))
par(mfrow=c(1,3))
plot(nhanes.all$age, nhanes.all$flowLiver)
plot(nhanes.all$age, nhanes.all$flowLiver_direct)
par(mfrow=c(1,1))
plot(nhanes.all$age, nhanes.all$flowLiver, col=nhanes.all$sex)
par(mfrow=c(1,3))
plot(nhanes.all$volLiver, nhanes.all$flowLiver, col=nhanes.all$sex)
plot(nhanes.all$volLiver, nhanes.all$flowLiver_direct, col=nhanes.all$sex)
par(mfrow=c(1,1))
par(mfrow=c(1,3))
plot(nhanes.all$age, nhanes.all$flowLiver, col=nhanes.all$sex)
plot(nhanes.all$age, nhanes.all$flowLiver_direct, col=nhanes.all$sex)
par(mfrow=c(1,1))
rm(list=ls())
library(distr)
install.packages('distr')
D <- DiscreteDistribution (supp = c(0, 1, 2) , prob = c(0.5, .25, .25))
dD <- d(D)  ## Density function
pD <- p(D)  ## Distribution function
qD <- q(D)  ## Quantile function
rD <- r(D)  ## Random number generation
D <- DiscreteDistribution (supp = c(0, 1, 2) , prob = c(0.5, .25, .25))
library(distr)
D <- DiscreteDistribution (supp = c(0, 1, 2) , prob = c(0.5, .25, .25))
dD <- d(D)  ## Density function
pD <- p(D)  ## Distribution function
qD <- q(D)  ## Quantile function
rD <- r(D)  ## Random number generation
# Take them for a spin
dD(-1:3)
pD(-1:3)
qD(seq(0,1,by=0.1))
rD(20)
age.grid=seq(from=0, to=100, by=1)
par(mfrow=c(2,1))
y1 <- dnorm(x=age.grid,mean=50,sd=20)
y2 <- dnorm(x=age.grid, mean=40, sd=10)
y3 <- y1*y2
plot(age.grid, y1/max(y1), col='gray', type='l', ylim=c(0, 1.0))
points(age.grid, y2/max(y2), col='blue', type='l')
points(age.grid, y3/max(y3), col='red', type='l')
n <- 1000
yr1 <- rnorm(n, mean=50,sd=20)
yr2 <- rnorm(n, mean=40, sd=10)
yr3 <- yr1*yr2
hist(yr1, breaks=20, xlim=c(-10, 110), col=rgb(0.5, 0.5, 0.5, 0.25))
hist(yr2, breaks=20, xlim=c(-10, 110), col=rgb(0, 0, 1.0, 0.25), add=T)
hist(yr3, xlim=c(-10, 110), col=rgb(1.0, 0, 0, 0.25), add=T)
par(mfrow=c(1,1))
par(mfrow=c(2,1))
y1 <- pnorm(q=age.grid,mean=50,sd=20)
y2 <- pnorm(q=age.grid, mean=40, sd=10)
# new cummulative distribution function
y3 <- y1*y2
plot(age.grid, y1, col='grey', type='l', ylim=c(0, 1.0))
points(age.grid, y2, col='blue', type='l')
points(age.grid, y3, col='red', type='l')
uantile = qnorm(runif(0,0,1),mean=mean(D),sd=sigma/sqrt(length(D))
quantile = qnorm(runif(0,0,1),mean=mean(D),sd=sigma/sqrt(length(D)))
quantile = qnorm(runif(0,0,1),mean=mean(D),sd=sigma/sqrt(length(D)))
D = 10; sigma = 2;
quantile = qnorm(runif(0,0,1),mean=mean(D),sd=sigma/sqrt(length(D)))
plot(quantile)
quantile = qnorm(runif(0,0,1),mean=mean(D),sd=sigma/sqrt(length(D)))
quantile = qnorm(runif(10,0,1),mean=mean(D),sd=sigma/sqrt(length(D)))
y1 <- pnorm(q=age.grid,mean=50,sd=20)
y2 <- pnorm(q=age.grid, mean=40, sd=10)
# new custom cummulative distribution function
f_quantile <- function(x){
return(pnorm(q=q,mean=50,sd=20) * pnorm(q=q, mean=40, sd=10))
}
y3 <- f_quantile(q=age.grid)
f_quantile <- function(q){
return(pnorm(q=q,mean=50,sd=20) * pnorm(q=q, mean=40, sd=10))
}
y3 <- f_quantile(q=age.grid)
plot(age.grid, y1, col='grey', type='l', ylim=c(0, 1.0))
points(age.grid, y2, col='blue', type='l')
points(age.grid, y3, col='red', type='l')
tmp = f_quantile(runif(100,0,1))
hist(tmp)
random_var <- runif(100,0,1)
par(mfrow=c(2,1))
p.grid <- seq(0,1,by=0.1)
y1 <- qnorm(p=p.grid,mean=50,sd=20)
y2 <- qnorm(q=p.grid, mean=40, sd=10)
p.grid <- seq(0,1,by=0.1)
y1 <- qnorm(p=p.grid,mean=50,sd=20)
y2 <- qnorm(p=p.grid, mean=40, sd=10)
plot(p.grid, y1, col='grey', type='l', ylim=c(0, 1.0))
points(p.grid, y2, col='blue', type='l')
plot(p.grid, y1, col='grey', type='l')
points(p.grid, y2, col='blue', type='l')
p.grid <- seq(from=0,to=1,length.out = 20)
y1 <- qnorm(p=p.grid,mean=50,sd=20)
y2 <- qnorm(p=p.grid, mean=40, sd=10)
plot(p.grid, y1, col='grey', type='l')
points(p.grid, y2, col='blue', type='l')
plot(p.grid, y1, col='grey', type='p')
points(p.grid, y2, col='blue', type='p')
p.grid
plot(p.grid, y1, col='grey', type='p', ylim=c(0, 120))
y1
par(mfrow=c(1,1))
# use the quantile functon
par(mfrow=c(1,1))
p.grid <- seq(from=0,to=1,length.out = 20)
p.grid
y1 <- qnorm(p=p.grid,mean=50,sd=20)
y2 <- qnorm(p=p.grid, mean=40, sd=10)
# combined quantile function via quantile mixture
f_quantile <- function(p){
return( 0.5*qnorm(p=p,mean=50,sd=20) + 0.5*pnorm(p=p, mean=40, sd=10))
}
y3 <- f_quantile(p=p.grid)
plot(p.grid, y1, col='grey', type='p', ylim=c(0, 120))
points(p.grid, y2, col='blue', type='p')
points(p.grid, y3, col='red', type='p')
par(mfrow=c(1,1))
f_quantile <- function(p){
return( 0.5*qnorm(p=p,mean=50,sd=20) + 0.5*pnorm(p=p, mean=40, sd=10))
}
y3 <- f_quantile(p=p.grid)
f_quantile <- function(p){
return( 0.5*qnorm(p=p,mean=50,sd=20) + 0.5*qnorm(p=p, mean=40, sd=10))
}
y3 <- f_quantile(p=p.grid)
plot(p.grid, y1, col='grey', type='p', ylim=c(0, 120))
points(p.grid, y2, col='blue', type='p')
points(p.grid, y3, col='red', type='p')
r = f_quantile(runif(100,0,1))
hist(r)
f_q1 <- function(p, mean=50, sd=20){
return(qnorm(p, mean, sd))
}
f_q2 <- function(p, mean=40, sd=10){
return(qnorm(p, mean, sd))
}
par(mfrow=c(1,1))
p.grid <- seq(from=0,to=1,length.out = 20)
p.grid
# combined quantile function via quantile mixture
f_q1 <- function(p, mean=50, sd=20){
return(qnorm(p, mean, sd))
}
f_q2 <- function(p, mean=40, sd=10){
return(qnorm(p, mean, sd))
}
f_quantile <- function(p){
return( mean(c(f_q1(p), f_q2(p)) )
}
y1 <- f_q1(p=p.grid)
y2 <- f_q2(p=p.grid)
y3 <- f_quantile(p=p.grid)
f_quantile <- function(p){
return( 0.5*f_q1(p)+0.5*f_q2(p) )
}
y1 <- f_q1(p=p.grid)
y2 <- f_q2(p=p.grid)
y3 <- f_quantile(p=p.grid)
plot(p.grid, y1, col='grey', type='p', ylim=c(0, 120))
points(p.grid, y2, col='blue', type='p')
points(p.grid, y3, col='red', type='p')
yr1 <- f_q1(runif(100,0,1))
yr2 <- f_q2(runif(100,0,1))
yr3 <- f_quantile(runif(100,0,1))
hist(yr1, breaks=20, xlim=c(-10, 110), col=rgb(0.5, 0.5, 0.5, 0.25))
hist(yr2, breaks=20, xlim=c(-10, 110), col=rgb(0, 0, 1.0, 0.25), add=T)
hist(yr3, breaks=20, xlim=c(-10, 110), col=rgb(1.0, 0, 0, 0.25), add=T)
yr1 <- f_q1(runif(100,0,1))
yr2 <- f_q2(runif(100,0,1))
yr3 <- f_quantile(runif(100,0,1))
par(mfrow=c(3,1))
hist(yr1, breaks=20, xlim=c(-10, 110), col=rgb(0.5, 0.5, 0.5, 0.25))
hist(yr2, breaks=20, xlim=c(-10, 110), col=rgb(0, 0, 1.0, 0.25))
hist(yr3, breaks=20, xlim=c(-10, 110), col=rgb(1.0, 0, 0, 0.25))
par(mfrow=c(1,1))
n.sample <- 1000
p_rand <- runif(n.sample,0,1)
yr1 <- f_q1(p_rand)
yr2 <- f_q2(p_rand)
yr3 <- f_quantile(p_rand)
par(mfrow=c(3,1))
hist(yr1, breaks=20, xlim=c(-10, 110), col=rgb(0.5, 0.5, 0.5, 0.25))
hist(yr2, breaks=20, xlim=c(-10, 110), col=rgb(0, 0, 1.0, 0.25))
hist(yr3, breaks=20, xlim=c(-10, 110), col=rgb(1.0, 0, 0, 0.25))
par(mfrow=c(1,1))
n.sample <- 5000
p_rand <- runif(n.sample,0,1)
yr1 <- f_q1(p_rand)
yr2 <- f_q2(p_rand)
yr3 <- f_quantile(p_rand)
par(mfrow=c(3,1))
hist(yr1, breaks=20, xlim=c(-10, 110), col=rgb(0.5, 0.5, 0.5, 0.25))
hist(yr2, breaks=20, xlim=c(-10, 110), col=rgb(0, 0, 1.0, 0.25))
hist(yr3, breaks=20, xlim=c(-10, 110), col=rgb(1.0, 0, 0, 0.25))
par(mfrow=c(1,1))
f_q1 <- function(p, mean=50, sd=10){
return(qnorm(p, mean, sd))
}
f_q2 <- function(p, mean=45, sd=5){
return(qnorm(p, mean, sd))
}
f_quantile <- function(p){
return( 0.5*f_q1(p)+0.5*f_q2(p) )
}
y1 <- f_q1(p=p.grid)
y2 <- f_q2(p=p.grid)
y3 <- f_quantile(p=p.grid)
plot(p.grid, y1, col='grey', type='p', ylim=c(0, 120))
points(p.grid, y2, col='blue', type='p')
points(p.grid, y3, col='red', type='p')
par(mfrow=c(1,1))
# sample from the resulting quantile functions
n.sample <- 1000
p_rand <- runif(n.sample,0,1)
yr1 <- f_q1(p_rand)
yr2 <- f_q2(p_rand)
yr3 <- f_quantile(p_rand)
par(mfrow=c(3,1))
hist(yr1, breaks=2, xlim=c(-10, 110), col=rgb(0.5, 0.5, 0.5, 0.25))
hist(yr2, breaks=20, xlim=c(-10, 110), col=rgb(0, 0, 1.0, 0.25))
hist(yr3, breaks=20, xlim=c(-10, 110), col=rgb(1.0, 0, 0, 0.25))
par(mfrow=c(1,1))
n.sample <- 1000
p_rand <- runif(n.sample,0,1)
yr1 <- f_q1(p_rand)
yr2 <- f_q2(p_rand)
yr3 <- f_quantile(p_rand)
par(mfrow=c(3,1))
hist(yr1, breaks=20, xlim=c(-10, 110), col=rgb(0.5, 0.5, 0.5, 0.25))
hist(yr2, breaks=20, xlim=c(-10, 110), col=rgb(0, 0, 1.0, 0.25))
hist(yr3, breaks=20, xlim=c(-10, 110), col=rgb(1.0, 0, 0, 0.25))
par(mfrow=c(1,1))
f_q1 <- function(p, mean=50, sd=10){
return(qnorm(p, mean, sd))
}
f_q2 <- function(p, mean=65, sd=5){
return(qnorm(p, mean, sd))
}
f_quantile <- function(p){
return( 0.5*f_q1(p)+0.5*f_q2(p) )
}
y1 <- f_q1(p=p.grid)
y2 <- f_q2(p=p.grid)
y3 <- f_quantile(p=p.grid)
plot(p.grid, y1, col='grey', type='p', ylim=c(0, 120))
points(p.grid, y2, col='blue', type='p')
points(p.grid, y3, col='red', type='p')
par(mfrow=c(1,1))
# sample from the resulting quantile functions
n.sample <- 1000
p_rand <- runif(n.sample,0,1)
yr1 <- f_q1(p_rand)
yr2 <- f_q2(p_rand)
yr3 <- f_quantile(p_rand)
par(mfrow=c(3,1))
hist(yr1, breaks=20, xlim=c(-10, 110), col=rgb(0.5, 0.5, 0.5, 0.25))
hist(yr2, breaks=20, xlim=c(-10, 110), col=rgb(0, 0, 1.0, 0.25))
hist(yr3, breaks=20, xlim=c(-10, 110), col=rgb(1.0, 0, 0, 0.25))
par(mfrow=c(1,1))
f_quantile <- function(p){
#return( 0.5*f_q1(p)+0.5*f_q2(p) )
return( f_q1(p)*f_q2(p) )
}
y1 <- f_q1(p=p.grid)
y2 <- f_q2(p=p.grid)
y3 <- f_quantile(p=p.grid)
plot(p.grid, y1, col='grey', type='p', ylim=c(0, 120))
points(p.grid, y2, col='blue', type='p')
points(p.grid, y3, col='red', type='p')
par(mfrow=c(1,1))
# sample from the resulting quantile functions
n.sample <- 1000
p_rand <- runif(n.sample,0,1)
yr1 <- f_q1(p_rand)
yr2 <- f_q2(p_rand)
yr3 <- f_quantile(p_rand)
par(mfrow=c(3,1))
hist(yr1, breaks=20, xlim=c(-10, 110), col=rgb(0.5, 0.5, 0.5, 0.25))
hist(yr2, breaks=20, xlim=c(-10, 110), col=rgb(0, 0, 1.0, 0.25))
hist(yr3, breaks=20, xlim=c(-10, 110), col=rgb(1.0, 0, 0, 0.25))
par(mfrow=c(1,1))
r = f_quantile(runif(100,0,1))
f_quantile <- function(p){
return( 0.5*f_q1(p)+0.5*f_q2(p) )
#return( f_q1(p)*f_q2(p) )
}
y1 <- f_q1(p=p.grid)
y2 <- f_q2(p=p.grid)
y3 <- f_quantile(p=p.grid)
plot(p.grid, y1, col='grey', type='p', ylim=c(0, 120))
points(p.grid, y2, col='blue', type='p')
points(p.grid, y3, col='red', type='p')
par(mfrow=c(1,1))
age.grid=seq(from=0, to=100, by=1)
par(mfrow=c(1,1))
y1 <- dnorm(x=age.grid,mean=50,sd=20)
y2 <- dnorm(x=age.grid, mean=40, sd=10)
y3 <- y1*y2
plot(age.grid, y1/max(y1), col='gray', type='l', ylim=c(0, 1.0))
points(age.grid, y2/max(y2), col='blue', type='l')
points(age.grid, y3/max(y3), col='red', type='l')
par(mfrow=c(1,1))
n <- 1000
yr1 <- rnorm(n, mean=50,sd=20)
yr2 <- rnorm(n, mean=40, sd=10)
yr3 <- yr1*yr2
par(mfrow=c(1,1))
y1 <- dnorm(x=age.grid,mean=60,sd=20)
y2 <- dnorm(x=age.grid, mean=20, sd=5)
y3 <- y1*y2
plot(age.grid, y1/max(y1), col='gray', type='l', ylim=c(0, 1.0))
points(age.grid, y2/max(y2), col='blue', type='l')
points(age.grid, y3/max(y3), col='red', type='l')
par(mfrow=c(1,1))
n <- 1000
yr1 <- rnorm(n, mean=50,sd=20)
yr2 <- rnorm(n, mean=40, sd=10)
yr3 <- yr1*yr2
par(mfrow=c(3,1))
hist(yr1, breaks=20, xlim=c(-10, 110), col=rgb(0.5, 0.5, 0.5, 0.25))
hist(yr2, breaks=20, xlim=c(-10, 110), col=rgb(0, 0, 1.0, 0.25), add=T)
hist(yr3, breaks=20, xlim=c(-10, 110), col=rgb(1.0, 0, 0, 0.25), add=T)
par(mfrow=c(1,1))
par(mfrow=c(3,1))
hist(yr1, breaks=20, xlim=c(-10, 110), col=rgb(0.5, 0.5, 0.5, 0.25))
hist(yr2, breaks=20, xlim=c(-10, 110), col=rgb(0, 0, 1.0, 0.25), add=F)
hist(yr3, breaks=20, xlim=c(-10, 110), col=rgb(1.0, 0, 0, 0.25), add=F)
par(mfrow=c(1,1))
f_p1 <- function(p, mean=60, sd=20){
return(dnorm(p, mean, sd))
}
f_p2 <- function(p, mean=20, sd=5){
return(dnorm(p, mean, sd))
}
f_pc <- function(p){
return( f_p1(p) * f_p2(p) )
#return( f_q1(p)*f_q2(p) )
}
age.grid=seq(from=0, to=100, by=1)
par(mfrow=c(1,1))
f_p1 <- function(x, mean=60, sd=20){
return(dnorm(x, mean, sd))
}
f_p2 <- function(x, mean=20, sd=5){
return(dnorm(x, mean, sd))
}
f_pc <- function(x){
return( f_p1(x) * f_p2(x) )
#return( f_q1(p)*f_q2(p) )
}
y1 <- f_p1(x=age.grid)
y2 <- f_p2(x=age.grid)
y3 <- f_pc(x=age.grid)
plot(age.grid, y1/max(y1), col='gray', type='l', ylim=c(0, 1.0))
points(age.grid, y2/max(y2), col='blue', type='l')
points(age.grid, y3/max(y3), col='red', type='l')
