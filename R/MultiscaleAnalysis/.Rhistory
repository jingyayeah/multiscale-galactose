saveData(data)
makeFigureFull(data, NULL, xname, yname)
5146.98 * 12 + 1184.70 + 5352.85 * 12 + 1232.26 +5567.85 * 12 + 1281.55 +5789.64 * 12 + 1332.81 +6021.60 * 12 + 1386.32
res = 5146.98 * 12 + 1184.70 + 5352.85 * 12 + 1232.26 +5567.85 * 12 + 1281.55 +5789.64 * 12 + 1332.81 +6021.60 * 12 + 1386.32
print(0.5*res)
print(res)
1.5*res + 36840
548287 + 170482 + 36840
548287 + 37500 + 8000 + 22000 + 21000
xname <- 'age'; yname <- 'volLiver'
selection <- c('study', 'gender', xname, yname, 'dtype')
data <- rbind( mar1988[, selection],
wyn1989[, selection],
naw1998[, selection],
boy1933[, selection],
hei1999[, selection])
# data <- addRandomizedPopulationData(data, alt1962) # no range/Sd for volLiver
data <- addRandomizedPopulationData(data, tom1965)
data <- addRandomizedPopulationData(data, kay1987)
saveData(data)
makeFigureFull(data, NULL, xname, yname)
addPopulationSegments(tom1965, xname, yname)
addPopulationSegments(kay1987, xname, yname)
# Plot helpers
name.parts <- strsplit(dataset, '_')
xname <- name.parts[[1]][2]
yname <- name.parts[[1]][1]
rm(name.parts)
xlab <- lab[[xname]]; ylab <- lab[[yname]]
xlim <- lim[[xname]]; ylim <- lim[[yname]]
main <- sprintf('%s vs. %s', yname, xname)
# Plot to file
create_plots = FALSE
startDevPlot <- function(width=2000, height=1000, file=NULL){
if (is.null(file)){
file <- file.path(ma.settings$dir.results, 'regression', sprintf('%s_%s_regression.png', yname, xname))
}
if (create_plots == T) {
print(file)
png(filename=file, width=width, height=height,
units = "px", bg = "white",  res = 150)
}
print('No plot files created')
}
stopDevPlot <- function(){
if (create_plots == T) { dev.off() }
}
################################################################################
## load data ##
fname <- file.path(ma.settings$dir.expdata, "processed", sprintf("%s_%s.Rdata", yname, xname))
print(fname)
load(file=fname)
head(data)
# data processing
names(data)[names(data) == 'gender'] <- 'sex'
data <- na.omit(data) # remove NA
data$weights <- 1   # population data is weighted 0.25
data$weights[data$dtype=='population'] = 0.1
data$study <- as.factor(data$study)
data$sex <- as.factor(data$sex)
data$dtype <- as.factor(data$dtype)
# prepare subsets
df.names <- c('all', 'male', 'female')
df.all <- data
# reduce data tp the individual data for first analysis
# df.all <- df.all[df.all$dtype=="individual", ]
# some preprocessing
if (dataset == 'GEC_age'){
# problems with non Marchesini data,
# data far away and very large spread
df.all <- df.all[df.all$sex=='all',]
}
if (dataset == 'volLiver_BSA'){
# cutoff based on the NHANES normal range
df.all <- df.all[df.all$BSA<=2.5,]
}
df.male <- df.all[df.all$sex == 'male', ]
df.female <- df.all[df.all$sex == 'female', ]
rm(data)
#######################################################
# Plot basic data overview
#######################################################
create_plots = F
# startDevPlot(width=2000, height=1000, file="/home/mkoenig/Desktop/Dirsch/flowLiver_age.png")
par(mfrow=c(1,3))
for (k in 1:3){
if (k==1){ d <- df.all }
if (k==2){ d <- df.male }
if (k==3){ d <- df.female }
plot(d[, xname], d[, yname], type='n',
main=sprintf('%s', df.names[k]), xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim)
inds.po <- which(d$dtype == 'population')
points(d[inds.po, xname], d[inds.po, yname], col=df.cols.po[k], pch=df.symbols[k])
inds.in <- which(d$dtype == 'individual')
points(d[inds.in, xname], d[inds.in, yname], col=df.cols[k], bg=df.cols[k], pch=df.symbols[k])
rug(d[inds.in, xname], side=1, col="black"); rug(d[inds.in, yname], side=2, col="black")
}
par(mfrow=c(1,1))
#stopDevPlot()
rm(d,k)
################################################################################
# GAMLSS - Model fitting
################################################################################
library('gamlss')
# Save models
saveFitModels <- function(models, xname, yname, dir=NULL){
if (is.null(dir)){
dir <- file.path(ma.settings$dir.expdata, "processed")
}
r_fname <- file.path(dir, sprintf('%s_%s_models.Rdata', yname, xname))
print( sprintf('%s vs. %s -> %s', yname, xname, r_fname) )
save('models', file=r_fname)
}
## GEC vs. age ########################################
create_plots=T
if (dataset == 'GEC_age'){
startDevPlot(width=650, height=1000)
# all #
fit.all.no <- gamlss(GEC ~ cs(age,2), sigma.formula= ~cs(age,1), family=NO, data=df.all)
# fit.all.no <- gamlss(GEC ~ cs(age,3), family=NO, data=df.all)
# fit.all.no <- gamlss(GEC ~ cs(age,2), sigma.formula= ~cs(age,2), family=NO, data=df.all)
fit.all <- fit.all.no
plotCentiles(model=fit.all, d=df.all, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[['all']])
stopDevPlot()
# male #
fit.male <- NULL
# female #
fit.female <- NULL
# save Models
models <- list(fit.all=fit.all, fit.male=fit.male, fit.female=fit.female,
df.all=df.all, df.male=df.male, df.female=df.female)
saveFitModels(models, xname, yname)
}
## GECkg vs. age ######################################
if (dataset == 'GECkg_age'){
startDevPlot(width=650, height=1000)
# simple model with normal distributed link function
fit.all.no <- gamlss(GECkg ~ cs(age,4), sigma.formula= ~cs(age,2), family=NO, data=df.all)
# fit.all.no <- gamlss(GEC ~ cs(age,3), family=NO, data=df.all)
# fit.all.no <- gamlss(GEC ~ cs(age,2), sigma.formula= ~cs(age,2), family=NO, data=df.all)
fit.final <- fit.all.no
plotCentiles(model=fit.final, d=df.all, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[['all']])
stopDevPlot()
}
head(df.all)
## volLiver vs. age ######################################
if (dataset == 'volLiver_age'){
startDevPlot(width=2000, height=1000)
par(mfrow=c(1,3))
## all ##
# fit.all.no <- gamlss(volLiver ~ cs(age,1), data=df.all)
# fit.all.bccg <- gamlss(volLiver ~ cs(age,3), sigma.formula= ~cs(age,1), family=BCCG, data=df.all)
# fit.all.bccg.2 <- gamlss(volLiver ~ cs(age,2), sigma.formula= ~cs(age,1), family=BCCG, data=df.all)
fit.all.bccg.3 <- gamlss(volLiver ~ cs(age,3), family=BCCG, data=df.all)
fit.all <- fit.all.bccg.3
plotCentiles(model=fit.all, d=df.all, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[['all']])
summary(fit.all)
## male ##
#fit.male.bccg <- gamlss(volLiver ~ cs(age,3), family=BCCG, data=df.male)
fit.male.bccg.3 <- gamlss(volLiver ~ cs(age,3), sigma.formula=~age ,family=BCCG, data=df.male)
fit.male <- fit.male.bccg.3
plotCentiles(model=fit.male, d=df.male, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[['male']])
summary(fit.male)
## female ##
fit.female.bccg <- gamlss(volLiver ~ cs(age,3), sigma.formula= ~cs(age,1), family=BCCG, data=df.female)
# fit.female.bccg <- gamlss(volLiver ~ cs(age,3), family=BCCG, data=df.female)
# fit.female.no <- gamlss(volLiver ~ cs(age,4), data=df.female)
# fit.all.no <- gamlss(GEC ~ cs(age,3), family=NO, data=df.all)
# fit.all.no <- gamlss(GEC ~ cs(age,2), sigma.formula= ~cs(age,2), family=NO, data=df.all)
fit.female <- fit.female.bccg
plotCentiles(model=fit.female, d=df.female, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[['female']])
par(mfrow=c(1,1))
stopDevPlot()
# save Models
models <- list(fit.all=fit.all, fit.male=fit.male, fit.female=fit.female,
df.all=df.all, df.male=df.male, df.female=df.female)
saveFitModels(models, xname, yname)
# optimize degree of freedoms based on BIC (Baysian information criterium)
#   fn.SBC.female <- function(p) {
#       AIC(gamlss(volLiver ~ cs(age, df = p[1]), data=df.female, trace = FALSE, family=NO), k = log(nrow(df.female)))
#   }
#   opSBC <- optim(par=c(4), fn.SBC.female, method = "L-BFGS-B", lower = c(1), upper = c(6))
}
## volLiverkg vs. age ######################################
if (dataset == 'volLiverkg_age'){
startDevPlot(width=2000, height=1000)
par(mfrow=c(1,3))
## all ##
fit.all.no <- gamlss(volLiverkg ~ cs(age,3), sigma.formula= ~cs(age,2), family=NO, data=df.all)
# fit.all.no <- gamlss(GEC ~ cs(age,3), family=NO, data=df.all)
# fit.all.no <- gamlss(GEC ~ cs(age,2), sigma.formula= ~cs(age,2), family=NO, data=df.all)
plotCentiles(model=fit.all.no, d=df.all, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[['all']])
## male ##
fit.male.no <- gamlss(volLiverkg ~ cs(age,2), sigma.formula=~cs(age,1), family=NO, data=df.male)
fit.male.no <- gamlss(volLiverkg ~ cs(age,2), sigma.formula=~cs(age,1), family=NO, data=df.male)
# fit.all.no <- gamlss(GEC ~ cs(age,3), family=NO, data=df.all)
# fit.all.no <- gamlss(GEC ~ cs(age,2), sigma.formula= ~cs(age,2), family=NO, data=df.all)
plotCentiles(model=fit.male.no, d=df.male, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[['male']])
summary(fit.male.no)
## female ##
fit.female.no <- gamlss(volLiverkg ~ cs(age,2), sigma.formula= ~cs(age,1), family=NO, data=df.female)
# fit.all.no <- gamlss(GEC ~ cs(age,3), family=NO, data=df.all)
# fit.all.no <- gamlss(GEC ~ cs(age,2), sigma.formula= ~cs(age,2), family=NO, data=df.all)
plotCentiles(model=fit.female.no, d=df.female, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[['female']])
par(mfrow=c(1,1))
stopDevPlot()
}
## volLiver vs. BSA ######################################
if (dataset == 'volLiver_BSA'){
startDevPlot(width=2000, height=1000)
par(mfrow=c(1,3))
## all ##
# fit.all.no <- gamlss(volLiver ~ cs(BSA,3), sigma.formula= ~cs(BSA,3), family=NO, data=df.all)
fit.all.bccg <- gamlss(volLiver ~ cs(BSA,3), sigma.formula= ~cs(BSA,3), nu.formula= ~cs(BSA,1) family=BCCG, data=df.all)
plotCentiles(model=fit.all.bccg, d=df.all, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[['all']])
## male ##
fit.male.no <- gamlss(volLiver ~ cs(BSA,2), family=NO, data=df.male)
# fit.all.no <- gamlss(GEC ~ cs(age,3), family=NO, data=df.all)
# fit.all.no <- gamlss(GEC ~ cs(age,2), sigma.formula= ~cs(age,2), family=NO, data=df.all)
plotCentiles(model=fit.male.no, d=df.male, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[['male']])
summary(fit.male.no)
## female ##
fit.female.no <- gamlss(volLiver ~ cs(BSA,1), family=NO, data=df.female)
# fit.all.no <- gamlss(GEC ~ cs(age,3), family=NO, data=df.all)
# fit.all.no <- gamlss(GEC ~ cs(age,2), sigma.formula= ~cs(age,2), family=NO, data=df.all)
plotCentiles(model=fit.female.no, d=df.female, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[['female']])
par(mfrow=c(1,1))
stopDevPlot()
}
## volLiver vs. bodyweight ######################################
if (dataset == 'volLiver_bodyweight'){
startDevPlot(width=2000, height=1000)
par(mfrow=c(1,3))
head(df.all)
## all ##
# fit.all.no <- gamlss(volLiver ~ cs(BSA,3), sigma.formula= ~cs(BSA,3), family=NO, data=df.all)
fit.all.no <- gamlss(volLiver ~ cs(bodyweight,2), sigma.formula= ~cs(bodyweight,2), family=NO, data=df.all)
plotCentiles(model=fit.all.no, d=df.all, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[['all']])
## male ##
fit.male.no <- gamlss(volLiver ~ cs(bodyweight,2), family=NO, data=df.male)
# fit.all.no <- gamlss(GEC ~ cs(age,3), family=NO, data=df.all)
# fit.all.no <- gamlss(GEC ~ cs(age,2), sigma.formula= ~cs(age,2), family=NO, data=df.all)
plotCentiles(model=fit.male.no, d=df.male, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[['male']])
summary(fit.male.no)
## female ##
fit.female.no <- gamlss(volLiver ~ cs(bodyweight,2), family=NO, data=df.female)
# fit.all.no <- gamlss(GEC ~ cs(age,3), family=NO, data=df.all)
# fit.all.no <- gamlss(GEC ~ cs(age,2), sigma.formula= ~cs(age,2), family=NO, data=df.all)
plotCentiles(model=fit.female.no, d=df.female, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[['female']])
par(mfrow=c(1,1))
stopDevPlot()
}
## flowLiver vs. age ######################################
create_plots=T
if (dataset == 'flowLiver_age'){
startDevPlot(width=2000, height=1000)
par(mfrow=c(1,3))
head(df.all); tail(df.all)
## all ##
# fit.all.bccg <- gamlss(flowLiver ~ cs(age,3), sigma.formula= ~cs(age,1), family=BCCG, weights=weights, data=df.all)
fit.all.bccg <- gamlss(flowLiver ~ cs(age,1), family=BCCG, weights=weights, data=df.all)
fit.all <- fit.all.bccg
plotCentiles(model=fit.all, d=df.all, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[['all']])
summary(fit.all)
## male ##
fit.male.bccg <- gamlss(flowLiver ~ cs(age,4), sigma.formula= ~cs(age,1), family=BCCG, data=df.male)
fit.male <- fit.male.bccg
plotCentiles(model=fit.male, d=df.male, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[['male']])
## female ##
fit.female.bccg <- gamlss(flowLiver ~ cs(age,4), sigma.formula= ~cs(age,1), family=BCCG, data=df.female)
# fit.all.no <- gamlss(GEC ~ cs(age,3), family=NO, data=df.all)
# fit.all.no <- gamlss(GEC ~ cs(age,2), sigma.formula= ~cs(age,2), family=NO, data=df.all)
fit.female <- fit.female.bccg
plotCentiles(model=fit.female, d=df.female, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[['female']])
par(mfrow=c(1,1))
stopDevPlot()
# save Models
models <- list(fit.all=fit.all, fit.male=fit.male, fit.female=fit.female,
df.all=df.all, df.male=df.male, df.female=df.female)
saveFitModels(models, xname, yname)
}
################################################################################
# Centile estimation for other datasets with GAMLSS
################################################################################
# http://www.gamlss.org/?p=1215
# Fitting statistical model todata.
# These models are linked and used for prediction.
#
# author: Matthias Koenig
# date: 14-10-2014
################################################################################
library('MultiscaleAnalysis')
setwd('/home/mkoenig/multiscale-galactose/')
rm(list = ls())
source(file.path(ma.settings$dir.code, 'analysis', 'data_information.R'))
################################################################################
# dataset <- 'GEC_age'
# dataset <- 'GECkg_age'
dataset <- 'volLiver_age'
# dataset <- 'volLiverkg_age'
# dataset <- 'volLiver_BSA'
# dataset <- 'volLiver_bodyweight'
# dataset <- 'flowLiver_age'
# dataset <- 'flowLiverkg_age'
# dataset <- 'perfusion_age'
# dataset <- 'flowLiver_volLiver'
# dataset <- 'volLiver_flowLiver'
################################################################################
# Plot helpers
name.parts <- strsplit(dataset, '_')
xname <- name.parts[[1]][2]
yname <- name.parts[[1]][1]
rm(name.parts)
xlab <- lab[[xname]]; ylab <- lab[[yname]]
xlim <- lim[[xname]]; ylim <- lim[[yname]]
main <- sprintf('%s vs. %s', yname, xname)
# Plot to file
create_plots = FALSE
startDevPlot <- function(width=2000, height=1000, file=NULL){
if (is.null(file)){
file <- file.path(ma.settings$dir.results, 'regression', sprintf('%s_%s_regression.png', yname, xname))
}
if (create_plots == T) {
print(file)
png(filename=file, width=width, height=height,
units = "px", bg = "white",  res = 150)
}
print('No plot files created')
}
stopDevPlot <- function(){
if (create_plots == T) { dev.off() }
}
################################################################################
## load data ##
fname <- file.path(ma.settings$dir.expdata, "processed", sprintf("%s_%s.Rdata", yname, xname))
print(fname)
load(file=fname)
head(data)
# data processing
names(data)[names(data) == 'gender'] <- 'sex'
data <- na.omit(data) # remove NA
data$weights <- 1   # population data is weighted 0.25
data$weights[data$dtype=='population'] = 0.1
data$study <- as.factor(data$study)
data$sex <- as.factor(data$sex)
data$dtype <- as.factor(data$dtype)
# prepare subsets
df.names <- c('all', 'male', 'female')
df.all <- data
# reduce data tp the individual data for first analysis
# df.all <- df.all[df.all$dtype=="individual", ]
# some preprocessing
if (dataset == 'GEC_age'){
# problems with non Marchesini data,
# data far away and very large spread
df.all <- df.all[df.all$sex=='all',]
}
if (dataset == 'volLiver_BSA'){
# cutoff based on the NHANES normal range
df.all <- df.all[df.all$BSA<=2.5,]
}
df.male <- df.all[df.all$sex == 'male', ]
df.female <- df.all[df.all$sex == 'female', ]
rm(data)
#######################################################
# Plot basic data overview
#######################################################
create_plots = F
# startDevPlot(width=2000, height=1000, file="/home/mkoenig/Desktop/Dirsch/flowLiver_age.png")
par(mfrow=c(1,3))
for (k in 1:3){
if (k==1){ d <- df.all }
if (k==2){ d <- df.male }
if (k==3){ d <- df.female }
plot(d[, xname], d[, yname], type='n',
main=sprintf('%s', df.names[k]), xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim)
inds.po <- which(d$dtype == 'population')
points(d[inds.po, xname], d[inds.po, yname], col=df.cols.po[k], pch=df.symbols[k])
inds.in <- which(d$dtype == 'individual')
points(d[inds.in, xname], d[inds.in, yname], col=df.cols[k], bg=df.cols[k], pch=df.symbols[k])
rug(d[inds.in, xname], side=1, col="black"); rug(d[inds.in, yname], side=2, col="black")
}
par(mfrow=c(1,1))
#stopDevPlot()
rm(d,k)
fit.female.bccg <- gamlss(volLiver ~ cs(age,3), sigma.formula= ~cs(age,1), family=BCCG, data=df.female)
# fit.female.bccg <- gamlss(volLiver ~ cs(age,3), family=BCCG, data=df.female)
# fit.female.no <- gamlss(volLiver ~ cs(age,4), data=df.female)
# fit.all.no <- gamlss(GEC ~ cs(age,3), family=NO, data=df.all)
# fit.all.no <- gamlss(GEC ~ cs(age,2), sigma.formula= ~cs(age,2), family=NO, data=df.all)
fit.female <- fit.female.bccg
plotCentiles(model=fit.female, d=df.female, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[['female']])
df.all <- df.all[df.all$dtype=="individual", ]
# some preprocessing
if (dataset == 'GEC_age'){
# problems with non Marchesini data,
# data far away and very large spread
df.all <- df.all[df.all$sex=='all',]
}
if (dataset == 'volLiver_BSA'){
# cutoff based on the NHANES normal range
df.all <- df.all[df.all$BSA<=2.5,]
}
df.male <- df.all[df.all$sex == 'male', ]
df.female <- df.all[df.all$sex == 'female', ]
rm(data)
load(file=fname)
head(data)
# data processing
names(data)[names(data) == 'gender'] <- 'sex'
data <- na.omit(data) # remove NA
data$weights <- 1   # population data is weighted 0.25
data$weights[data$dtype=='population'] = 0.1
data$study <- as.factor(data$study)
data$sex <- as.factor(data$sex)
data$dtype <- as.factor(data$dtype)
# prepare subsets
df.names <- c('all', 'male', 'female')
df.all <- data
# reduce data tp the individual data for first analysis
df.all <- df.all[df.all$dtype=="individual", ]
# some preprocessing
if (dataset == 'GEC_age'){
# problems with non Marchesini data,
# data far away and very large spread
df.all <- df.all[df.all$sex=='all',]
}
if (dataset == 'volLiver_BSA'){
# cutoff based on the NHANES normal range
df.all <- df.all[df.all$BSA<=2.5,]
}
df.male <- df.all[df.all$sex == 'male', ]
df.female <- df.all[df.all$sex == 'female', ]
rm(data)
fit.female.bccg <- gamlss(volLiver ~ cs(age,3), sigma.formula= ~cs(age,1), family=BCCG, data=df.female)
# fit.female.bccg <- gamlss(volLiver ~ cs(age,3), family=BCCG, data=df.female)
# fit.female.no <- gamlss(volLiver ~ cs(age,4), data=df.female)
# fit.all.no <- gamlss(GEC ~ cs(age,3), family=NO, data=df.all)
# fit.all.no <- gamlss(GEC ~ cs(age,2), sigma.formula= ~cs(age,2), family=NO, data=df.all)
fit.female <- fit.female.bccg
plotCentiles(model=fit.female, d=df.female, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[['female']])
fit.female.bccg <- gamlss(volLiver ~ cs(age,3), sigma.formula= ~cs(age,2), family=BCCG, data=df.female)
# fit.female.bccg <- gamlss(volLiver ~ cs(age,3), family=BCCG, data=df.female)
# fit.female.no <- gamlss(volLiver ~ cs(age,4), data=df.female)
# fit.all.no <- gamlss(GEC ~ cs(age,3), family=NO, data=df.all)
# fit.all.no <- gamlss(GEC ~ cs(age,2), sigma.formula= ~cs(age,2), family=NO, data=df.all)
fit.female <- fit.female.bccg
plotCentiles(model=fit.female, d=df.female, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[['female']])
fit.female.bccg <- gamlss(volLiver ~ cs(age,3), sigma.formula= ~cs(age,3), family=BCCG, data=df.female)
# fit.female.bccg <- gamlss(volLiver ~ cs(age,3), family=BCCG, data=df.female)
# fit.female.no <- gamlss(volLiver ~ cs(age,4), data=df.female)
# fit.all.no <- gamlss(GEC ~ cs(age,3), family=NO, data=df.all)
# fit.all.no <- gamlss(GEC ~ cs(age,2), sigma.formula= ~cs(age,2), family=NO, data=df.all)
fit.female <- fit.female.bccg
plotCentiles(model=fit.female, d=df.female, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[['female']])
fit.female.bccg <- gamlss(volLiver ~ cs(age,3), sigma.formula= ~cs(age,1), family=BCCG, data=df.female)
# fit.female.bccg <- gamlss(volLiver ~ cs(age,3), family=BCCG, data=df.female)
# fit.female.no <- gamlss(volLiver ~ cs(age,4), data=df.female)
# fit.all.no <- gamlss(GEC ~ cs(age,3), family=NO, data=df.all)
# fit.all.no <- gamlss(GEC ~ cs(age,2), sigma.formula= ~cs(age,2), family=NO, data=df.all)
fit.female <- fit.female.bccg
plotCentiles(model=fit.female, d=df.female, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[['female']])
par(mfrow=c(1,1))
fit.male.bccg.3 <- gamlss(volLiver ~ cs(age,3), sigma.formula=~age ,family=BCCG, data=df.male)
fit.male <- fit.male.bccg.3
plotCentiles(model=fit.male, d=df.male, xname=xname, yname=yname,
main=main, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim,
pcol=df.cols[['male']])
